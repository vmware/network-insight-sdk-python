# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ApplicationsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_application(self, body, **kwargs):
        """
        Create an application
        Application is a group of tiers. A tier is a group of virtual machines or IP addresses based on membership criteria. Tiers are bound to a single application. An application name is unique and should not conflict with another application name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_application(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApplicationRequest body: (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_application_with_http_info(body, **kwargs)
        else:
            (data) = self.add_application_with_http_info(body, **kwargs)
            return data

    def add_application_with_http_info(self, body, **kwargs):
        """
        Create an application
        Application is a group of tiers. A tier is a group of virtual machines or IP addresses based on membership criteria. Tiers are bound to a single application. An application name is unique and should not conflict with another application name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_application_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApplicationRequest body: (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_application`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Application',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_application_with_tiers(self, body, **kwargs):
        """
        Create application along with it's tiers
        Creates a manual application or saves discovered application. While saving discovered application user can curate it. This API also allows to merge multiple discovered application and save it as a single saved applicaiton. For merging application, customer should add criteria of tiers to be merged in one tier and similarly update rest of the imformation. Also, allows edit of saved application. To make sure changes are being applied on latest saved app, use \"If-Match\" header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_application_with_tiers(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AppWithTiersRequest body: (required)
        :param int if_match: Represent lastModifiedTimestamp of application definition which user is modifying
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_application_with_tiers_with_http_info(body, **kwargs)
        else:
            (data) = self.add_application_with_tiers_with_http_info(body, **kwargs)
            return data

    def add_application_with_tiers_with_http_info(self, body, **kwargs):
        """
        Create application along with it's tiers
        Creates a manual application or saves discovered application. While saving discovered application user can curate it. This API also allows to merge multiple discovered application and save it as a single saved applicaiton. For merging application, customer should add criteria of tiers to be merged in one tier and similarly update rest of the imformation. Also, allows edit of saved application. To make sure changes are being applied on latest saved app, use \"If-Match\" header.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_application_with_tiers_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AppWithTiersRequest body: (required)
        :param int if_match: Represent lastModifiedTimestamp of application definition which user is modifying
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'if_match']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_application_with_tiers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_application_with_tiers`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/full/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Application',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_tier(self, id, body, **kwargs):
        """
        Create tier in application
        Create a tier of an application with specified membership criteria or members list. The membership criteria is defined in terms of virtual machines or IP addresses/subnet. Please refer to API Guide on how to construct membership criteria.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_tier(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param TierRequest body: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_tier_with_http_info(id, body, **kwargs)
        else:
            (data) = self.add_tier_with_http_info(id, body, **kwargs)
            return data

    def add_tier_with_http_info(self, id, body, **kwargs):
        """
        Create tier in application
        Create a tier of an application with specified membership criteria or members list. The membership criteria is defined in terms of virtual machines or IP addresses/subnet. Please refer to API Guide on how to construct membership criteria.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_tier_with_http_info(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param TierRequest body: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_tier`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_tier`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/tiers', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Tier',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_fbad_config(self, **kwargs):
        """
        Create flow based application discovery configuration
        Create and save flow based configuration to be used for application and tier discovery. All the fields in the request JSON are optional and default configuration will be used for undefined fields. The order of discovery options will be honoured during application discovery if discovery options are defined in the input request. Please use API api/ni/groups/discovered-applications/custom-config/fbad/file/upload to upload a CSV file to be used for application and tier discovery and naming. Use the filepath in it's response in the values tag of discovery options and naming preferences, each of type CSV, as applicable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_fbad_config(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param FBADConfigRequest flow_based_config:
        :return: FBADConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_fbad_config_with_http_info(**kwargs)
        else:
            (data) = self.create_fbad_config_with_http_info(**kwargs)
            return data

    def create_fbad_config_with_http_info(self, **kwargs):
        """
        Create flow based application discovery configuration
        Create and save flow based configuration to be used for application and tier discovery. All the fields in the request JSON are optional and default configuration will be used for undefined fields. The order of discovery options will be honoured during application discovery if discovery options are defined in the input request. Please use API api/ni/groups/discovered-applications/custom-config/fbad/file/upload to upload a CSV file to be used for application and tier discovery and naming. Use the filepath in it's response in the values tag of discovery options and naming preferences, each of type CSV, as applicable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_fbad_config_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param FBADConfigRequest flow_based_config:
        :return: FBADConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow_based_config']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_fbad_config" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'flow_based_config' in params:
            body_params = params['flow_based_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/discovered-applications/custom-config/fbad', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FBADConfigResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_application(self, id, **kwargs):
        """
        Delete an application
        Deleting an application deletes all the tiers of the application along with the application
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_application(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_application_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_application_with_http_info(id, **kwargs)
            return data

    def delete_application_with_http_info(self, id, **kwargs):
        """
        Delete an application
        Deleting an application deletes all the tiers of the application along with the application
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_application_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_application`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_fbad_config(self, id, **kwargs):
        """
        Delete flow based application discovery configuration
        Delete the saved flow based configuration used for application and tier discovery
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fbad_config(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_fbad_config_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_fbad_config_with_http_info(id, **kwargs)
            return data

    def delete_fbad_config_with_http_info(self, id, **kwargs):
        """
        Delete flow based application discovery configuration
        Delete the saved flow based configuration used for application and tier discovery
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fbad_config_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fbad_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_fbad_config`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/discovered-applications/custom-config/fbad/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_tier(self, id, tier_id, **kwargs):
        """
        Delete application tier
        Delete application tier of an application
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_tier(id, tier_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param str tier_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_tier_with_http_info(id, tier_id, **kwargs)
        else:
            (data) = self.delete_tier_with_http_info(id, tier_id, **kwargs)
            return data

    def delete_tier_with_http_info(self, id, tier_id, **kwargs):
        """
        Delete application tier
        Delete application tier of an application
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_tier_with_http_info(id, tier_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param str tier_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tier_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_tier`")
        # verify the required parameter 'tier_id' is set
        if ('tier_id' not in params) or (params['tier_id'] is None):
            raise ValueError("Missing the required parameter `tier_id` when calling `delete_tier`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'tier_id' in params:
            path_params['tier-id'] = params['tier_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/tiers/{tier-id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edit_application_tier(self, id, tier_id, body, **kwargs):
        """
        Edit tier in application
        Edit a tier of an application with specified membership criteria or members list. The membership criteria is defined in terms of virtual machines or IP addresses/subnet. Please refer to API Guide on how to construct membership criteria.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_application_tier(id, tier_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param str tier_id: (required)
        :param TierRequest body: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edit_application_tier_with_http_info(id, tier_id, body, **kwargs)
        else:
            (data) = self.edit_application_tier_with_http_info(id, tier_id, body, **kwargs)
            return data

    def edit_application_tier_with_http_info(self, id, tier_id, body, **kwargs):
        """
        Edit tier in application
        Edit a tier of an application with specified membership criteria or members list. The membership criteria is defined in terms of virtual machines or IP addresses/subnet. Please refer to API Guide on how to construct membership criteria.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_application_tier_with_http_info(id, tier_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param str tier_id: (required)
        :param TierRequest body: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tier_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `edit_application_tier`")
        # verify the required parameter 'tier_id' is set
        if ('tier_id' not in params) or (params['tier_id'] is None):
            raise ValueError("Missing the required parameter `tier_id` when calling `edit_application_tier`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_tier`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'tier_id' in params:
            path_params['tier-id'] = params['tier_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/tiers/{tier-id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Tier',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def export_fbadcsv_errors(self, **kwargs):
        """
        Export errors in CSV being used for Flow Based Application Discovery
        Export all the errors to CSV from CSV being used for Flow Based Application Discovery
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.export_fbadcsv_errors(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.export_fbadcsv_errors_with_http_info(**kwargs)
        else:
            (data) = self.export_fbadcsv_errors_with_http_info(**kwargs)
            return data

    def export_fbadcsv_errors_with_http_info(self, **kwargs):
        """
        Export errors in CSV being used for Flow Based Application Discovery
        Export all the errors to CSV from CSV being used for Flow Based Application Discovery
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.export_fbadcsv_errors_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_fbadcsv_errors" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['multipart/form-data', 'application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/discovered-applications/custom-config/fbad/fileErrors/csv', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='file',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_app_flow_metrics(self, id, metrics, **kwargs):
        """
        Get application flow metrics
        Get application flow properties sum of bytes of incoming and outgoing flows
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_flow_metrics(id, metrics, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param list[AppFlowMetricEnum] metrics: List of metrics to include (required)
        :param float start_time: Start time for query in epoch seconds
        :param float end_time: End time for query in epoch seconds
        :return: ApplicationFlowData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_app_flow_metrics_with_http_info(id, metrics, **kwargs)
        else:
            (data) = self.get_app_flow_metrics_with_http_info(id, metrics, **kwargs)
            return data

    def get_app_flow_metrics_with_http_info(self, id, metrics, **kwargs):
        """
        Get application flow metrics
        Get application flow properties sum of bytes of incoming and outgoing flows
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_flow_metrics_with_http_info(id, metrics, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param list[AppFlowMetricEnum] metrics: List of metrics to include (required)
        :param float start_time: Start time for query in epoch seconds
        :param float end_time: End time for query in epoch seconds
        :return: ApplicationFlowData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'metrics', 'start_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_flow_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_app_flow_metrics`")
        # verify the required parameter 'metrics' is set
        if ('metrics' not in params) or (params['metrics'] is None):
            raise ValueError("Missing the required parameter `metrics` when calling `get_app_flow_metrics`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))
        if 'metrics' in params:
            query_params.append(('metrics', params['metrics']))
            collection_formats['metrics'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/flow-metrics', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationFlowData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_app_flow_properties(self, id, props, **kwargs):
        """
        Get application flow properties
        Get application flow properties e.g flow count, count of interent flows etc
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_flow_properties(id, props, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param list[AppFlowPropEnum] props: List of properties to include (required)
        :param float start_time: Start time for query in epoch seconds
        :param float end_time: End time for query in epoch seconds
        :return: ApplicationFlowData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_app_flow_properties_with_http_info(id, props, **kwargs)
        else:
            (data) = self.get_app_flow_properties_with_http_info(id, props, **kwargs)
            return data

    def get_app_flow_properties_with_http_info(self, id, props, **kwargs):
        """
        Get application flow properties
        Get application flow properties e.g flow count, count of interent flows etc
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_flow_properties_with_http_info(id, props, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param list[AppFlowPropEnum] props: List of properties to include (required)
        :param float start_time: Start time for query in epoch seconds
        :param float end_time: End time for query in epoch seconds
        :return: ApplicationFlowData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'props', 'start_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_flow_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_app_flow_properties`")
        # verify the required parameter 'props' is set
        if ('props' not in params) or (params['props'] is None):
            raise ValueError("Missing the required parameter `props` when calling `get_app_flow_properties`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))
        if 'props' in params:
            query_params.append(('props', params['props']))
            collection_formats['props'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/flow-props', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationFlowData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_app_problems(self, id, **kwargs):
        """
        List Application problems
        List Application problem events.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_problems(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param float start_time: Start time for query in epoch seconds
        :param float end_time: End time for query in epoch seconds
        :param str event_type: Type of event, e.g UserDefinedProblemEvent
        :param list[str] event_tags: Event tags
        :param str event_status: Status of event open or closed
        :param float update_time_from: (Optional) Events that were created or updated or closed between this time and update_time_to, in seconds
        :param float update_time_to: (Optional) Events that were created or updated or closed between update_time_from and this time, in seconds
        :return: PagedListResponseWithTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_app_problems_with_http_info(id, **kwargs)
        else:
            (data) = self.get_app_problems_with_http_info(id, **kwargs)
            return data

    def get_app_problems_with_http_info(self, id, **kwargs):
        """
        List Application problems
        List Application problem events.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_problems_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param float start_time: Start time for query in epoch seconds
        :param float end_time: End time for query in epoch seconds
        :param str event_type: Type of event, e.g UserDefinedProblemEvent
        :param list[str] event_tags: Event tags
        :param str event_status: Status of event open or closed
        :param float update_time_from: (Optional) Events that were created or updated or closed between this time and update_time_to, in seconds
        :param float update_time_to: (Optional) Events that were created or updated or closed between update_time_from and this time, in seconds
        :return: PagedListResponseWithTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'size', 'cursor', 'start_time', 'end_time', 'event_type', 'event_tags', 'event_status', 'update_time_from', 'update_time_to']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_problems" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_app_problems`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))
        if 'event_type' in params:
            query_params.append(('event_type', params['event_type']))
        if 'event_tags' in params:
            query_params.append(('event_tags', params['event_tags']))
            collection_formats['event_tags'] = 'multi'
        if 'event_status' in params:
            query_params.append(('event_status', params['event_status']))
        if 'update_time_from' in params:
            query_params.append(('update_time_from', params['update_time_from']))
        if 'update_time_to' in params:
            query_params.append(('update_time_to', params['update_time_to']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/problems', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PagedListResponseWithTime',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_app_top_talking_members(self, id, sort_criteria, **kwargs):
        """
        List Application top talking members
        List Application top talking members based on provided criteria
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_top_talking_members(id, sort_criteria, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param list[TopTalkerSortEnum] sort_criteria: Sorting criteria (required)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param float start_time: Start time for query in epoch seconds
        :param float end_time: End time for query in epoch seconds
        :return: ApplicationTopTalkingMemberData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_app_top_talking_members_with_http_info(id, sort_criteria, **kwargs)
        else:
            (data) = self.get_app_top_talking_members_with_http_info(id, sort_criteria, **kwargs)
            return data

    def get_app_top_talking_members_with_http_info(self, id, sort_criteria, **kwargs):
        """
        List Application top talking members
        List Application top talking members based on provided criteria
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_top_talking_members_with_http_info(id, sort_criteria, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param list[TopTalkerSortEnum] sort_criteria: Sorting criteria (required)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param float start_time: Start time for query in epoch seconds
        :param float end_time: End time for query in epoch seconds
        :return: ApplicationTopTalkingMemberData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort_criteria', 'size', 'cursor', 'start_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_top_talking_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_app_top_talking_members`")
        # verify the required parameter 'sort_criteria' is set
        if ('sort_criteria' not in params) or (params['sort_criteria'] is None):
            raise ValueError("Missing the required parameter `sort_criteria` when calling `get_app_top_talking_members`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))
        if 'sort_criteria' in params:
            query_params.append(('sort_criteria', params['sort_criteria']))
            collection_formats['sort_criteria'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/top-talking-member', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationTopTalkingMemberData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_app_top_talking_pairs(self, id, sort_criteria, **kwargs):
        """
        List Application top talking pairs
        List Application top talking pairs based on provided criteria
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_top_talking_pairs(id, sort_criteria, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param list[TopTalkerSortEnum] sort_criteria: Sorting criteria (required)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param float start_time: Start time for query in epoch seconds
        :param float end_time: End time for query in epoch seconds
        :return: ApplicationTopTalkingPairData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_app_top_talking_pairs_with_http_info(id, sort_criteria, **kwargs)
        else:
            (data) = self.get_app_top_talking_pairs_with_http_info(id, sort_criteria, **kwargs)
            return data

    def get_app_top_talking_pairs_with_http_info(self, id, sort_criteria, **kwargs):
        """
        List Application top talking pairs
        List Application top talking pairs based on provided criteria
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_top_talking_pairs_with_http_info(id, sort_criteria, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param list[TopTalkerSortEnum] sort_criteria: Sorting criteria (required)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param float start_time: Start time for query in epoch seconds
        :param float end_time: End time for query in epoch seconds
        :return: ApplicationTopTalkingPairData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort_criteria', 'size', 'cursor', 'start_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_top_talking_pairs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_app_top_talking_pairs`")
        # verify the required parameter 'sort_criteria' is set
        if ('sort_criteria' not in params) or (params['sort_criteria'] is None):
            raise ValueError("Missing the required parameter `sort_criteria` when calling `get_app_top_talking_pairs`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))
        if 'sort_criteria' in params:
            query_params.append(('sort_criteria', params['sort_criteria']))
            collection_formats['sort_criteria'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/top-talking-pair', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationTopTalkingPairData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_application_by_id(self, id, **kwargs):
        """
        Get application summary
        Get application summary for an entity ID. This returns the application name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param bool fetch_member_counts: True, if member counts should be fetched.
        :param bool fetch_update_status: True, if the update status of the saved application should be fetched.
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_application_by_id_with_http_info(id, **kwargs)
        else:
            (data) = self.get_application_by_id_with_http_info(id, **kwargs)
            return data

    def get_application_by_id_with_http_info(self, id, **kwargs):
        """
        Get application summary
        Get application summary for an entity ID. This returns the application name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_by_id_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param bool fetch_member_counts: True, if member counts should be fetched.
        :param bool fetch_update_status: True, if the update status of the saved application should be fetched.
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fetch_member_counts', 'fetch_update_status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_application_by_id`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'fetch_member_counts' in params:
            query_params.append(('fetch_member_counts', params['fetch_member_counts']))
        if 'fetch_update_status' in params:
            query_params.append(('fetch_update_status', params['fetch_update_status']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Application',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_application_flow_summary(self, id, **kwargs):
        """
        Show application flow summary
        Show application details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_flow_summary(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param float start_time: Start time for query in epoch seconds
        :param float end_time: End time for query in epoch seconds
        :return: ApplicationFlowSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_application_flow_summary_with_http_info(id, **kwargs)
        else:
            (data) = self.get_application_flow_summary_with_http_info(id, **kwargs)
            return data

    def get_application_flow_summary_with_http_info(self, id, **kwargs):
        """
        Show application flow summary
        Show application details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_flow_summary_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param float start_time: Start time for query in epoch seconds
        :param float end_time: End time for query in epoch seconds
        :return: ApplicationFlowSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_flow_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_application_flow_summary`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/flow-summary', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationFlowSummary',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_application_tier(self, id, tier_id, **kwargs):
        """
        Show application tier details
        Show application tier details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_tier(id, tier_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param str tier_id: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_application_tier_with_http_info(id, tier_id, **kwargs)
        else:
            (data) = self.get_application_tier_with_http_info(id, tier_id, **kwargs)
            return data

    def get_application_tier_with_http_info(self, id, tier_id, **kwargs):
        """
        Show application tier details
        Show application tier details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_tier_with_http_info(id, tier_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param str tier_id: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tier_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_application_tier`")
        # verify the required parameter 'tier_id' is set
        if ('tier_id' not in params) or (params['tier_id'] is None):
            raise ValueError("Missing the required parameter `tier_id` when calling `get_application_tier`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'tier_id' in params:
            path_params['tier-id'] = params['tier_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/tiers/{tier-id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Tier',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_application_updates(self, id, **kwargs):
        """
        Get application update details
        Get the details of the available updates for a saved application.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_updates(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: ApplicationUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_application_updates_with_http_info(id, **kwargs)
        else:
            (data) = self.get_application_updates_with_http_info(id, **kwargs)
            return data

    def get_application_updates_with_http_info(self, id, **kwargs):
        """
        Get application update details
        Get the details of the available updates for a saved application.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_updates_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: ApplicationUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_updates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_application_updates`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/updates', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationUpdate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_application_vms(self, id, **kwargs):
        """
        Show application members
        Show application members
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_vms(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: ApplicationMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_application_vms_with_http_info(id, **kwargs)
        else:
            (data) = self.get_application_vms_with_http_info(id, **kwargs)
            return data

    def get_application_vms_with_http_info(self, id, **kwargs):
        """
        Show application members
        Show application members
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_vms_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: ApplicationMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_vms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_application_vms`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/members/vms', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationMembers',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_applications_members(self, body, **kwargs):
        """
        Get member details of applications
        Get member details of applications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_applications_members(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupsMembersRequest body: (required)
        :return: ApplicationsMembersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_applications_members_with_http_info(body, **kwargs)
        else:
            (data) = self.get_applications_members_with_http_info(body, **kwargs)
            return data

    def get_applications_members_with_http_info(self, body, **kwargs):
        """
        Get member details of applications
        Get member details of applications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_applications_members_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupsMembersRequest body: (required)
        :return: ApplicationsMembersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_applications_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_applications_members`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/members', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationsMembersResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bulk_application_task_progress(self, request_id, **kwargs):
        """
        GET progress of bulk application creation request
        GET progress of bulk application creation request
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_bulk_application_task_progress(request_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str request_id: (required)
        :return: SaveBulkDiscoveredAppProgressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bulk_application_task_progress_with_http_info(request_id, **kwargs)
        else:
            (data) = self.get_bulk_application_task_progress_with_http_info(request_id, **kwargs)
            return data

    def get_bulk_application_task_progress_with_http_info(self, request_id, **kwargs):
        """
        GET progress of bulk application creation request
        GET progress of bulk application creation request
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_bulk_application_task_progress_with_http_info(request_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str request_id: (required)
        :return: SaveBulkDiscoveredAppProgressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bulk_application_task_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params) or (params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `get_bulk_application_task_progress`")


        collection_formats = {}

        path_params = {}
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/task/progress/{requestId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaveBulkDiscoveredAppProgressResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_csv_used_for_fbad(self, id, filepath, **kwargs):
        """
        Get CSV being used for flow based application discovery
        Get the CSV being used for flow based application discovery
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_csv_used_for_fbad(id, filepath, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param str filepath: Encoded file path of the CSV being used for flow based application discovery. (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_csv_used_for_fbad_with_http_info(id, filepath, **kwargs)
        else:
            (data) = self.get_csv_used_for_fbad_with_http_info(id, filepath, **kwargs)
            return data

    def get_csv_used_for_fbad_with_http_info(self, id, filepath, **kwargs):
        """
        Get CSV being used for flow based application discovery
        Get the CSV being used for flow based application discovery
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_csv_used_for_fbad_with_http_info(id, filepath, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param str filepath: Encoded file path of the CSV being used for flow based application discovery. (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filepath']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_csv_used_for_fbad" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_csv_used_for_fbad`")
        # verify the required parameter 'filepath' is set
        if ('filepath' not in params) or (params['filepath'] is None):
            raise ValueError("Missing the required parameter `filepath` when calling `get_csv_used_for_fbad`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'filepath' in params:
            query_params.append(('filepath', params['filepath']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['multipart/form-data', 'application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/discovered-applications/custom-config/fbad/{id}/file/download', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='file',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_discovered_application_summaries(self, discovery_type, **kwargs):
        """
        Get discovered application summaries in bulk
        Get the summaries of discovered applications in bulk, by providing a list of entity IDs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_discovered_application_summaries(discovery_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str discovery_type: The discovery type of the application. Allowed values are SERVICE_NOW and FLOW_BASED_DISCOVERY. (required)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param str granularity: The granularity of the discovered applications. Only applies to flow based discovery. Allowed values are FINE, MEDIUM and COARSE.
        :param bool fetch_member_counts: True, if member counts should be fetched.
        :return: PagedApplicationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_discovered_application_summaries_with_http_info(discovery_type, **kwargs)
        else:
            (data) = self.get_discovered_application_summaries_with_http_info(discovery_type, **kwargs)
            return data

    def get_discovered_application_summaries_with_http_info(self, discovery_type, **kwargs):
        """
        Get discovered application summaries in bulk
        Get the summaries of discovered applications in bulk, by providing a list of entity IDs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_discovered_application_summaries_with_http_info(discovery_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str discovery_type: The discovery type of the application. Allowed values are SERVICE_NOW and FLOW_BASED_DISCOVERY. (required)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param str granularity: The granularity of the discovered applications. Only applies to flow based discovery. Allowed values are FINE, MEDIUM and COARSE.
        :param bool fetch_member_counts: True, if member counts should be fetched.
        :return: PagedApplicationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['discovery_type', 'size', 'cursor', 'granularity', 'fetch_member_counts']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discovered_application_summaries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'discovery_type' is set
        if ('discovery_type' not in params) or (params['discovery_type'] is None):
            raise ValueError("Missing the required parameter `discovery_type` when calling `get_discovered_application_summaries`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))
        if 'discovery_type' in params:
            query_params.append(('discovery_type', params['discovery_type']))
        if 'granularity' in params:
            query_params.append(('granularity', params['granularity']))
        if 'fetch_member_counts' in params:
            query_params.append(('fetch_member_counts', params['fetch_member_counts']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/discovered-applications/fetch', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PagedApplicationListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_discovered_applications(self, discovery_type, **kwargs):
        """
        Get discovered application IDs
        Get the discovered application entity IDs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_discovered_applications(discovery_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str discovery_type: The discovery type of the application. Allowed values are SERVICE_NOW and FLOW_BASED_DISCOVERY. (required)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param str granularity: The granularity of the discovered applications. Only applies to flow based discovery. Allowed values are FINE, MEDIUM and COARSE.
        :return: PagedListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_discovered_applications_with_http_info(discovery_type, **kwargs)
        else:
            (data) = self.get_discovered_applications_with_http_info(discovery_type, **kwargs)
            return data

    def get_discovered_applications_with_http_info(self, discovery_type, **kwargs):
        """
        Get discovered application IDs
        Get the discovered application entity IDs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_discovered_applications_with_http_info(discovery_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str discovery_type: The discovery type of the application. Allowed values are SERVICE_NOW and FLOW_BASED_DISCOVERY. (required)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param str granularity: The granularity of the discovered applications. Only applies to flow based discovery. Allowed values are FINE, MEDIUM and COARSE.
        :return: PagedListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['discovery_type', 'size', 'cursor', 'granularity']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discovered_applications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'discovery_type' is set
        if ('discovery_type' not in params) or (params['discovery_type'] is None):
            raise ValueError("Missing the required parameter `discovery_type` when calling `get_discovered_applications`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))
        if 'discovery_type' in params:
            query_params.append(('discovery_type', params['discovery_type']))
        if 'granularity' in params:
            query_params.append(('granularity', params['granularity']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/discovered-applications', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PagedListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fbad_config(self, id, **kwargs):
        """
        Get flow based application discovery configuration
        Get the saved flow based configuration used for application and tier discovery
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fbad_config(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: FBADConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fbad_config_with_http_info(id, **kwargs)
        else:
            (data) = self.get_fbad_config_with_http_info(id, **kwargs)
            return data

    def get_fbad_config_with_http_info(self, id, **kwargs):
        """
        Get flow based application discovery configuration
        Get the saved flow based configuration used for application and tier discovery
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fbad_config_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: FBADConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fbad_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_fbad_config`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/discovered-applications/custom-config/fbad/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FBADConfigResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fbad_config_ids(self, **kwargs):
        """
        Get all the flow based application discovery configuration ids
        Get a list of flow based application discovery configuration ids used for application and tier discovery
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fbad_config_ids(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: FBADConfigIdList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fbad_config_ids_with_http_info(**kwargs)
        else:
            (data) = self.get_fbad_config_ids_with_http_info(**kwargs)
            return data

    def get_fbad_config_ids_with_http_info(self, **kwargs):
        """
        Get all the flow based application discovery configuration ids
        Get a list of flow based application discovery configuration ids used for application and tier discovery
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fbad_config_ids_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: FBADConfigIdList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fbad_config_ids" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/discovered-applications/custom-config/fbad', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FBADConfigIdList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fbad_progress(self, id, **kwargs):
        """
        Get progress of flow based application discovery of configuration id
        Get the progress status of flow based application discovery of the input configuration id. It shows the progress status of flow based application discovery when a user creates a new configuration or updates the existing configuration. Updation of the existing configuration includes changing naming preferences, updating the CSV file used for application discovery and changing the scope. It can also be used to get the progress status when flow based application discovery is run for the first time.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fbad_progress(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: FBADProgressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fbad_progress_with_http_info(id, **kwargs)
        else:
            (data) = self.get_fbad_progress_with_http_info(id, **kwargs)
            return data

    def get_fbad_progress_with_http_info(self, id, **kwargs):
        """
        Get progress of flow based application discovery of configuration id
        Get the progress status of flow based application discovery of the input configuration id. It shows the progress status of flow based application discovery when a user creates a new configuration or updates the existing configuration. Updation of the existing configuration includes changing naming preferences, updating the CSV file used for application discovery and changing the scope. It can also be used to get the progress status when flow based application discovery is run for the first time.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fbad_progress_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: FBADProgressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fbad_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_fbad_progress`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/discovered-applications/custom-config/fbad/progress/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FBADProgressResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_saved_applications_summaries(self, **kwargs):
        """
        Get saved application summaries in bulk
        Get the summaries of saved applications in bulk, by providing a list of entity IDs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_saved_applications_summaries(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param float modified_after: timestamp after which apps has been modified
        :param bool fetch_member_counts: True, if member counts should be fetched.
        :param bool fetch_update_status: True, if the update status of the saved applications should be fetched.
        :return: PagedApplicationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_saved_applications_summaries_with_http_info(**kwargs)
        else:
            (data) = self.get_saved_applications_summaries_with_http_info(**kwargs)
            return data

    def get_saved_applications_summaries_with_http_info(self, **kwargs):
        """
        Get saved application summaries in bulk
        Get the summaries of saved applications in bulk, by providing a list of entity IDs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_saved_applications_summaries_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param float modified_after: timestamp after which apps has been modified
        :param bool fetch_member_counts: True, if member counts should be fetched.
        :param bool fetch_update_status: True, if the update status of the saved applications should be fetched.
        :return: PagedApplicationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['size', 'cursor', 'modified_after', 'fetch_member_counts', 'fetch_update_status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_saved_applications_summaries" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))
        if 'modified_after' in params:
            query_params.append(('modifiedAfter', params['modified_after']))
        if 'fetch_member_counts' in params:
            query_params.append(('fetch_member_counts', params['fetch_member_counts']))
        if 'fetch_update_status' in params:
            query_params.append(('fetch_update_status', params['fetch_update_status']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/fetch', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PagedApplicationListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tier(self, tier_id, **kwargs):
        """
        Show application tier details
        Show application tier details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tier(tier_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tier_id: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tier_with_http_info(tier_id, **kwargs)
        else:
            (data) = self.get_tier_with_http_info(tier_id, **kwargs)
            return data

    def get_tier_with_http_info(self, tier_id, **kwargs):
        """
        Show application tier details
        Show application tier details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tier_with_http_info(tier_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tier_id: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tier_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tier_id' is set
        if ('tier_id' not in params) or (params['tier_id'] is None):
            raise ValueError("Missing the required parameter `tier_id` when calling `get_tier`")


        collection_formats = {}

        path_params = {}
        if 'tier_id' in params:
            path_params['tier-id'] = params['tier_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/tiers/{tier-id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Tier',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tiers_members(self, body, **kwargs):
        """
        Get member details of tiers
        Get member details of tiers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tiers_members(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupsMembersRequest body: (required)
        :return: TiersMembersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tiers_members_with_http_info(body, **kwargs)
        else:
            (data) = self.get_tiers_members_with_http_info(body, **kwargs)
            return data

    def get_tiers_members_with_http_info(self, body, **kwargs):
        """
        Get member details of tiers
        Get member details of tiers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tiers_members_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupsMembersRequest body: (required)
        :return: TiersMembersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tiers_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_tiers_members`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/tiers/members', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TiersMembersResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_application_tiers(self, id, **kwargs):
        """
        List tiers of an application
        List tiers of an application
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_application_tiers(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: TierListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_application_tiers_with_http_info(id, **kwargs)
        else:
            (data) = self.list_application_tiers_with_http_info(id, **kwargs)
            return data

    def list_application_tiers_with_http_info(self, id, **kwargs):
        """
        List tiers of an application
        List tiers of an application
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_application_tiers_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :return: TierListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_application_tiers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_application_tiers`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/tiers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TierListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_applications(self, **kwargs):
        """
        List applications
        List applications in Operations for Networks
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_applications(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param float modified_after: timestamp after which apps has been modified
        :return: PagedListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_applications_with_http_info(**kwargs)
        else:
            (data) = self.list_applications_with_http_info(**kwargs)
            return data

    def list_applications_with_http_info(self, **kwargs):
        """
        List applications
        List applications in Operations for Networks
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_applications_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float size: Page size of results
        :param str cursor: Cursor from previous response
        :param float modified_after: timestamp after which apps has been modified
        :return: PagedListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['size', 'cursor', 'modified_after']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_applications" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))
        if 'modified_after' in params:
            query_params.append(('modifiedAfter', params['modified_after']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PagedListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def save_discovered_applications(self, **kwargs):
        """
        Bulk save discovered applciations
        Save multiple discovered applications of particular discovery source.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_discovered_applications(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DiscoveredAppsBulkSaveRequest body:
        :return: SaveBulkDiscoveredAppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.save_discovered_applications_with_http_info(**kwargs)
        else:
            (data) = self.save_discovered_applications_with_http_info(**kwargs)
            return data

    def save_discovered_applications_with_http_info(self, **kwargs):
        """
        Bulk save discovered applciations
        Save multiple discovered applications of particular discovery source.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_discovered_applications_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DiscoveredAppsBulkSaveRequest body:
        :return: SaveBulkDiscoveredAppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_discovered_applications" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/discovered-applications/save', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaveBulkDiscoveredAppResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_fbad_config(self, id, flow_based_config, **kwargs):
        """
        Update flow based application discovery configuration
        Update the flow based configuration used for application and tier discovery. All the fields in the request JSON are optional and default configuration will be used for undefined fields. The order of discovery options will be honoured during application discovery if discovery options are defined in the input request. Please use API api/ni/groups/discovered-applications/custom-config/fbad/file/upload to upload a CSV file to be used for application and tier discovery and naming. Use the filepath in it's response in the values tag of discovery options and naming preferences, each of type CSV, as applicable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_fbad_config(id, flow_based_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param FBADConfigRequest flow_based_config: (required)
        :return: FBADConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_fbad_config_with_http_info(id, flow_based_config, **kwargs)
        else:
            (data) = self.update_fbad_config_with_http_info(id, flow_based_config, **kwargs)
            return data

    def update_fbad_config_with_http_info(self, id, flow_based_config, **kwargs):
        """
        Update flow based application discovery configuration
        Update the flow based configuration used for application and tier discovery. All the fields in the request JSON are optional and default configuration will be used for undefined fields. The order of discovery options will be honoured during application discovery if discovery options are defined in the input request. Please use API api/ni/groups/discovered-applications/custom-config/fbad/file/upload to upload a CSV file to be used for application and tier discovery and naming. Use the filepath in it's response in the values tag of discovery options and naming preferences, each of type CSV, as applicable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_fbad_config_with_http_info(id, flow_based_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The Entity ID of object requestion information on (required)
        :param FBADConfigRequest flow_based_config: (required)
        :return: FBADConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'flow_based_config']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_fbad_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_fbad_config`")
        # verify the required parameter 'flow_based_config' is set
        if ('flow_based_config' not in params) or (params['flow_based_config'] is None):
            raise ValueError("Missing the required parameter `flow_based_config` when calling `update_fbad_config`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'flow_based_config' in params:
            body_params = params['flow_based_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/discovered-applications/custom-config/fbad/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FBADConfigResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_fbadcsv(self, file, **kwargs):
        """
        Upload CSV file to be used for flow based application discovery
        Upload CSV file to be used for application and tier discovery and optionally for naming applications and tiers. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_fbadcsv(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: The CSV file to be uploaded. (required)
        :return: FBADCSVUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_fbadcsv_with_http_info(file, **kwargs)
        else:
            (data) = self.upload_fbadcsv_with_http_info(file, **kwargs)
            return data

    def upload_fbadcsv_with_http_info(self, file, **kwargs):
        """
        Upload CSV file to be used for flow based application discovery
        Upload CSV file to be used for application and tier discovery and optionally for naming applications and tiers. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_fbadcsv_with_http_info(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: The CSV file to be uploaded. (required)
        :return: FBADCSVUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_fbadcsv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_fbadcsv`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/discovered-applications/custom-config/fbad/file/upload', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FBADCSVUploadResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
