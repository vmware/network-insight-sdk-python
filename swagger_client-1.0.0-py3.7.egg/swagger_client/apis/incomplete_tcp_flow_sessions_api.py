# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class IncompleteTCPFlowSessionsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def csv_export_incomplete_sessions(self, destination_vm_entity_id, resolution_in_minutes, end_time, limit, **kwargs):
        """
        Export Incomplete TCP flow Sessions in csv file
        Export Incomplete TCP flow Sessions in csv file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.csv_export_incomplete_sessions(destination_vm_entity_id, resolution_in_minutes, end_time, limit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str destination_vm_entity_id: Destination VM Entity ID (required)
        :param int resolution_in_minutes: Metric point interval. Supported values are 5 or 30 minutes. (required)
        :param int end_time: End time for query in epoch milli seconds. (required)
        :param int limit: limit for paged list response. (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.csv_export_incomplete_sessions_with_http_info(destination_vm_entity_id, resolution_in_minutes, end_time, limit, **kwargs)
        else:
            (data) = self.csv_export_incomplete_sessions_with_http_info(destination_vm_entity_id, resolution_in_minutes, end_time, limit, **kwargs)
            return data

    def csv_export_incomplete_sessions_with_http_info(self, destination_vm_entity_id, resolution_in_minutes, end_time, limit, **kwargs):
        """
        Export Incomplete TCP flow Sessions in csv file
        Export Incomplete TCP flow Sessions in csv file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.csv_export_incomplete_sessions_with_http_info(destination_vm_entity_id, resolution_in_minutes, end_time, limit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str destination_vm_entity_id: Destination VM Entity ID (required)
        :param int resolution_in_minutes: Metric point interval. Supported values are 5 or 30 minutes. (required)
        :param int end_time: End time for query in epoch milli seconds. (required)
        :param int limit: limit for paged list response. (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destination_vm_entity_id', 'resolution_in_minutes', 'end_time', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method csv_export_incomplete_sessions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destination_vm_entity_id' is set
        if ('destination_vm_entity_id' not in params) or (params['destination_vm_entity_id'] is None):
            raise ValueError("Missing the required parameter `destination_vm_entity_id` when calling `csv_export_incomplete_sessions`")
        # verify the required parameter 'resolution_in_minutes' is set
        if ('resolution_in_minutes' not in params) or (params['resolution_in_minutes'] is None):
            raise ValueError("Missing the required parameter `resolution_in_minutes` when calling `csv_export_incomplete_sessions`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `csv_export_incomplete_sessions`")
        # verify the required parameter 'limit' is set
        if ('limit' not in params) or (params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `csv_export_incomplete_sessions`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'destination_vm_entity_id' in params:
            query_params.append(('destination_vm_entity_id', params['destination_vm_entity_id']))
        if 'resolution_in_minutes' in params:
            query_params.append(('resolution_in_minutes', params['resolution_in_minutes']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/flows/tcp-incomplete/csv-export', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='file',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_incomplete_sessions(self, destination_vm_entity_id, resolution_in_minutes, end_time, start, limit, **kwargs):
        """
        Get drill down of the incomplete tcp sessions for a specific destination virtual machine.
        Get drill down of the incomplete tcp sessions for a specific destination virtual machine in a specific time interval.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_incomplete_sessions(destination_vm_entity_id, resolution_in_minutes, end_time, start, limit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str destination_vm_entity_id: Destination VM Entity ID (required)
        :param int resolution_in_minutes: Metric point interval. Supported values are 5 or 30 minutes. (required)
        :param int end_time: End time for query in epoch milli seconds. (required)
        :param int start: start index for paged list response. (required)
        :param int limit: limit for paged list response. (required)
        :return: IncompleteSessionDrillDownListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_incomplete_sessions_with_http_info(destination_vm_entity_id, resolution_in_minutes, end_time, start, limit, **kwargs)
        else:
            (data) = self.list_incomplete_sessions_with_http_info(destination_vm_entity_id, resolution_in_minutes, end_time, start, limit, **kwargs)
            return data

    def list_incomplete_sessions_with_http_info(self, destination_vm_entity_id, resolution_in_minutes, end_time, start, limit, **kwargs):
        """
        Get drill down of the incomplete tcp sessions for a specific destination virtual machine.
        Get drill down of the incomplete tcp sessions for a specific destination virtual machine in a specific time interval.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_incomplete_sessions_with_http_info(destination_vm_entity_id, resolution_in_minutes, end_time, start, limit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str destination_vm_entity_id: Destination VM Entity ID (required)
        :param int resolution_in_minutes: Metric point interval. Supported values are 5 or 30 minutes. (required)
        :param int end_time: End time for query in epoch milli seconds. (required)
        :param int start: start index for paged list response. (required)
        :param int limit: limit for paged list response. (required)
        :return: IncompleteSessionDrillDownListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destination_vm_entity_id', 'resolution_in_minutes', 'end_time', 'start', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_incomplete_sessions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destination_vm_entity_id' is set
        if ('destination_vm_entity_id' not in params) or (params['destination_vm_entity_id'] is None):
            raise ValueError("Missing the required parameter `destination_vm_entity_id` when calling `list_incomplete_sessions`")
        # verify the required parameter 'resolution_in_minutes' is set
        if ('resolution_in_minutes' not in params) or (params['resolution_in_minutes'] is None):
            raise ValueError("Missing the required parameter `resolution_in_minutes` when calling `list_incomplete_sessions`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `list_incomplete_sessions`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `list_incomplete_sessions`")
        # verify the required parameter 'limit' is set
        if ('limit' not in params) or (params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `list_incomplete_sessions`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'destination_vm_entity_id' in params:
            query_params.append(('destination_vm_entity_id', params['destination_vm_entity_id']))
        if 'resolution_in_minutes' in params:
            query_params.append(('resolution_in_minutes', params['resolution_in_minutes']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/flows/tcp-incomplete/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='IncompleteSessionDrillDownListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
