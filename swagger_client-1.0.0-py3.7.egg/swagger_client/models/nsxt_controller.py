# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NSXTController(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'entity_type': 'EntityType',
        'manager': 'Reference',
        'ip_address': 'IpAddress',
        'version': 'str',
        'control_cluster_status': 'str',
        'management_connection_status': 'str',
        'vendor_id': 'str',
        'device': 'Reference',
        'mp_node': 'Reference'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'entity_type': 'entity_type',
        'manager': 'manager',
        'ip_address': 'ip_address',
        'version': 'version',
        'control_cluster_status': 'control_cluster_status',
        'management_connection_status': 'management_connection_status',
        'vendor_id': 'vendor_id',
        'device': 'device',
        'mp_node': 'mp_node'
    }

    def __init__(self, entity_id=None, name=None, entity_type=None, manager=None, ip_address=None, version=None, control_cluster_status=None, management_connection_status=None, vendor_id=None, device=None, mp_node=None):
        """
        NSXTController - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._entity_type = None
        self._manager = None
        self._ip_address = None
        self._version = None
        self._control_cluster_status = None
        self._management_connection_status = None
        self._vendor_id = None
        self._device = None
        self._mp_node = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if entity_type is not None:
          self.entity_type = entity_type
        if manager is not None:
          self.manager = manager
        if ip_address is not None:
          self.ip_address = ip_address
        if version is not None:
          self.version = version
        if control_cluster_status is not None:
          self.control_cluster_status = control_cluster_status
        if management_connection_status is not None:
          self.management_connection_status = management_connection_status
        if vendor_id is not None:
          self.vendor_id = vendor_id
        if device is not None:
          self.device = device
        if mp_node is not None:
          self.mp_node = mp_node

    @property
    def entity_id(self):
        """
        Gets the entity_id of this NSXTController.
        Entity ID that can be references in detail API calls

        :return: The entity_id of this NSXTController.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this NSXTController.
        Entity ID that can be references in detail API calls

        :param entity_id: The entity_id of this NSXTController.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this NSXTController.
        Name of the object

        :return: The name of this NSXTController.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NSXTController.
        Name of the object

        :param name: The name of this NSXTController.
        :type: str
        """

        self._name = name

    @property
    def entity_type(self):
        """
        Gets the entity_type of this NSXTController.

        :return: The entity_type of this NSXTController.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this NSXTController.

        :param entity_type: The entity_type of this NSXTController.
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def manager(self):
        """
        Gets the manager of this NSXTController.

        :return: The manager of this NSXTController.
        :rtype: Reference
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """
        Sets the manager of this NSXTController.

        :param manager: The manager of this NSXTController.
        :type: Reference
        """

        self._manager = manager

    @property
    def ip_address(self):
        """
        Gets the ip_address of this NSXTController.

        :return: The ip_address of this NSXTController.
        :rtype: IpAddress
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """
        Sets the ip_address of this NSXTController.

        :param ip_address: The ip_address of this NSXTController.
        :type: IpAddress
        """

        self._ip_address = ip_address

    @property
    def version(self):
        """
        Gets the version of this NSXTController.

        :return: The version of this NSXTController.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this NSXTController.

        :param version: The version of this NSXTController.
        :type: str
        """

        self._version = version

    @property
    def control_cluster_status(self):
        """
        Gets the control_cluster_status of this NSXTController.

        :return: The control_cluster_status of this NSXTController.
        :rtype: str
        """
        return self._control_cluster_status

    @control_cluster_status.setter
    def control_cluster_status(self, control_cluster_status):
        """
        Sets the control_cluster_status of this NSXTController.

        :param control_cluster_status: The control_cluster_status of this NSXTController.
        :type: str
        """

        self._control_cluster_status = control_cluster_status

    @property
    def management_connection_status(self):
        """
        Gets the management_connection_status of this NSXTController.

        :return: The management_connection_status of this NSXTController.
        :rtype: str
        """
        return self._management_connection_status

    @management_connection_status.setter
    def management_connection_status(self, management_connection_status):
        """
        Sets the management_connection_status of this NSXTController.

        :param management_connection_status: The management_connection_status of this NSXTController.
        :type: str
        """

        self._management_connection_status = management_connection_status

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this NSXTController.

        :return: The vendor_id of this NSXTController.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this NSXTController.

        :param vendor_id: The vendor_id of this NSXTController.
        :type: str
        """

        self._vendor_id = vendor_id

    @property
    def device(self):
        """
        Gets the device of this NSXTController.

        :return: The device of this NSXTController.
        :rtype: Reference
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this NSXTController.

        :param device: The device of this NSXTController.
        :type: Reference
        """

        self._device = device

    @property
    def mp_node(self):
        """
        Gets the mp_node of this NSXTController.

        :return: The mp_node of this NSXTController.
        :rtype: Reference
        """
        return self._mp_node

    @mp_node.setter
    def mp_node(self, mp_node):
        """
        Sets the mp_node of this NSXTController.

        :param mp_node: The mp_node of this NSXTController.
        :type: Reference
        """

        self._mp_node = mp_node

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NSXTController):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
