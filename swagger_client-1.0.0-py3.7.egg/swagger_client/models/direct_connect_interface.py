# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DirectConnectInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'entity_type': 'EntityType',
        'local_asn': 'int',
        'tunnel_id': 'str',
        'dx_connection_id': 'str',
        'mtu': 'int',
        'local_ip': 'IpAddress',
        'remote_ip': 'IpAddress',
        'remote_asn': 'int',
        'state': 'str',
        'bgp_status': 'str',
        'type': 'str',
        'sddc': 'Reference',
        'dx_connection': 'Reference'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'entity_type': 'entity_type',
        'local_asn': 'local_asn',
        'tunnel_id': 'tunnel_id',
        'dx_connection_id': 'dx_connection_id',
        'mtu': 'mtu',
        'local_ip': 'local_ip',
        'remote_ip': 'remote_ip',
        'remote_asn': 'remote_asn',
        'state': 'state',
        'bgp_status': 'bgp_status',
        'type': 'type',
        'sddc': 'sddc',
        'dx_connection': 'dx_connection'
    }

    def __init__(self, entity_id=None, name=None, entity_type=None, local_asn=None, tunnel_id=None, dx_connection_id=None, mtu=None, local_ip=None, remote_ip=None, remote_asn=None, state=None, bgp_status=None, type=None, sddc=None, dx_connection=None):
        """
        DirectConnectInterface - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._entity_type = None
        self._local_asn = None
        self._tunnel_id = None
        self._dx_connection_id = None
        self._mtu = None
        self._local_ip = None
        self._remote_ip = None
        self._remote_asn = None
        self._state = None
        self._bgp_status = None
        self._type = None
        self._sddc = None
        self._dx_connection = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if entity_type is not None:
          self.entity_type = entity_type
        if local_asn is not None:
          self.local_asn = local_asn
        if tunnel_id is not None:
          self.tunnel_id = tunnel_id
        if dx_connection_id is not None:
          self.dx_connection_id = dx_connection_id
        if mtu is not None:
          self.mtu = mtu
        if local_ip is not None:
          self.local_ip = local_ip
        if remote_ip is not None:
          self.remote_ip = remote_ip
        if remote_asn is not None:
          self.remote_asn = remote_asn
        if state is not None:
          self.state = state
        if bgp_status is not None:
          self.bgp_status = bgp_status
        if type is not None:
          self.type = type
        if sddc is not None:
          self.sddc = sddc
        if dx_connection is not None:
          self.dx_connection = dx_connection

    @property
    def entity_id(self):
        """
        Gets the entity_id of this DirectConnectInterface.
        Entity ID that can be references in detail API calls

        :return: The entity_id of this DirectConnectInterface.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this DirectConnectInterface.
        Entity ID that can be references in detail API calls

        :param entity_id: The entity_id of this DirectConnectInterface.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this DirectConnectInterface.
        Name of the object

        :return: The name of this DirectConnectInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DirectConnectInterface.
        Name of the object

        :param name: The name of this DirectConnectInterface.
        :type: str
        """

        self._name = name

    @property
    def entity_type(self):
        """
        Gets the entity_type of this DirectConnectInterface.

        :return: The entity_type of this DirectConnectInterface.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this DirectConnectInterface.

        :param entity_type: The entity_type of this DirectConnectInterface.
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def local_asn(self):
        """
        Gets the local_asn of this DirectConnectInterface.

        :return: The local_asn of this DirectConnectInterface.
        :rtype: int
        """
        return self._local_asn

    @local_asn.setter
    def local_asn(self, local_asn):
        """
        Sets the local_asn of this DirectConnectInterface.

        :param local_asn: The local_asn of this DirectConnectInterface.
        :type: int
        """

        self._local_asn = local_asn

    @property
    def tunnel_id(self):
        """
        Gets the tunnel_id of this DirectConnectInterface.

        :return: The tunnel_id of this DirectConnectInterface.
        :rtype: str
        """
        return self._tunnel_id

    @tunnel_id.setter
    def tunnel_id(self, tunnel_id):
        """
        Sets the tunnel_id of this DirectConnectInterface.

        :param tunnel_id: The tunnel_id of this DirectConnectInterface.
        :type: str
        """

        self._tunnel_id = tunnel_id

    @property
    def dx_connection_id(self):
        """
        Gets the dx_connection_id of this DirectConnectInterface.

        :return: The dx_connection_id of this DirectConnectInterface.
        :rtype: str
        """
        return self._dx_connection_id

    @dx_connection_id.setter
    def dx_connection_id(self, dx_connection_id):
        """
        Sets the dx_connection_id of this DirectConnectInterface.

        :param dx_connection_id: The dx_connection_id of this DirectConnectInterface.
        :type: str
        """

        self._dx_connection_id = dx_connection_id

    @property
    def mtu(self):
        """
        Gets the mtu of this DirectConnectInterface.

        :return: The mtu of this DirectConnectInterface.
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """
        Sets the mtu of this DirectConnectInterface.

        :param mtu: The mtu of this DirectConnectInterface.
        :type: int
        """

        self._mtu = mtu

    @property
    def local_ip(self):
        """
        Gets the local_ip of this DirectConnectInterface.

        :return: The local_ip of this DirectConnectInterface.
        :rtype: IpAddress
        """
        return self._local_ip

    @local_ip.setter
    def local_ip(self, local_ip):
        """
        Sets the local_ip of this DirectConnectInterface.

        :param local_ip: The local_ip of this DirectConnectInterface.
        :type: IpAddress
        """

        self._local_ip = local_ip

    @property
    def remote_ip(self):
        """
        Gets the remote_ip of this DirectConnectInterface.

        :return: The remote_ip of this DirectConnectInterface.
        :rtype: IpAddress
        """
        return self._remote_ip

    @remote_ip.setter
    def remote_ip(self, remote_ip):
        """
        Sets the remote_ip of this DirectConnectInterface.

        :param remote_ip: The remote_ip of this DirectConnectInterface.
        :type: IpAddress
        """

        self._remote_ip = remote_ip

    @property
    def remote_asn(self):
        """
        Gets the remote_asn of this DirectConnectInterface.

        :return: The remote_asn of this DirectConnectInterface.
        :rtype: int
        """
        return self._remote_asn

    @remote_asn.setter
    def remote_asn(self, remote_asn):
        """
        Sets the remote_asn of this DirectConnectInterface.

        :param remote_asn: The remote_asn of this DirectConnectInterface.
        :type: int
        """

        self._remote_asn = remote_asn

    @property
    def state(self):
        """
        Gets the state of this DirectConnectInterface.

        :return: The state of this DirectConnectInterface.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this DirectConnectInterface.

        :param state: The state of this DirectConnectInterface.
        :type: str
        """

        self._state = state

    @property
    def bgp_status(self):
        """
        Gets the bgp_status of this DirectConnectInterface.

        :return: The bgp_status of this DirectConnectInterface.
        :rtype: str
        """
        return self._bgp_status

    @bgp_status.setter
    def bgp_status(self, bgp_status):
        """
        Sets the bgp_status of this DirectConnectInterface.

        :param bgp_status: The bgp_status of this DirectConnectInterface.
        :type: str
        """

        self._bgp_status = bgp_status

    @property
    def type(self):
        """
        Gets the type of this DirectConnectInterface.

        :return: The type of this DirectConnectInterface.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this DirectConnectInterface.

        :param type: The type of this DirectConnectInterface.
        :type: str
        """

        self._type = type

    @property
    def sddc(self):
        """
        Gets the sddc of this DirectConnectInterface.

        :return: The sddc of this DirectConnectInterface.
        :rtype: Reference
        """
        return self._sddc

    @sddc.setter
    def sddc(self, sddc):
        """
        Sets the sddc of this DirectConnectInterface.

        :param sddc: The sddc of this DirectConnectInterface.
        :type: Reference
        """

        self._sddc = sddc

    @property
    def dx_connection(self):
        """
        Gets the dx_connection of this DirectConnectInterface.

        :return: The dx_connection of this DirectConnectInterface.
        :rtype: Reference
        """
        return self._dx_connection

    @dx_connection.setter
    def dx_connection(self, dx_connection):
        """
        Sets the dx_connection of this DirectConnectInterface.

        :param dx_connection: The dx_connection of this DirectConnectInterface.
        :type: Reference
        """

        self._dx_connection = dx_connection

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DirectConnectInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
