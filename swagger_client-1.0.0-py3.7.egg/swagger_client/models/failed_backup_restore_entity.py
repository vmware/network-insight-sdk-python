# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FailedBackupRestoreEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nick_name': 'str',
        'error_code': 'int',
        'error_description': 'str',
        'entity_attributes': 'list[BackupRestoreEntityAttribute]'
    }

    attribute_map = {
        'nick_name': 'nickName',
        'error_code': 'errorCode',
        'error_description': 'errorDescription',
        'entity_attributes': 'entityAttributes'
    }

    def __init__(self, nick_name=None, error_code=None, error_description=None, entity_attributes=None):
        """
        FailedBackupRestoreEntity - a model defined in Swagger
        """

        self._nick_name = None
        self._error_code = None
        self._error_description = None
        self._entity_attributes = None

        if nick_name is not None:
          self.nick_name = nick_name
        if error_code is not None:
          self.error_code = error_code
        if error_description is not None:
          self.error_description = error_description
        if entity_attributes is not None:
          self.entity_attributes = entity_attributes

    @property
    def nick_name(self):
        """
        Gets the nick_name of this FailedBackupRestoreEntity.
        Nick name of the entity for which restore failed

        :return: The nick_name of this FailedBackupRestoreEntity.
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """
        Sets the nick_name of this FailedBackupRestoreEntity.
        Nick name of the entity for which restore failed

        :param nick_name: The nick_name of this FailedBackupRestoreEntity.
        :type: str
        """

        self._nick_name = nick_name

    @property
    def error_code(self):
        """
        Gets the error_code of this FailedBackupRestoreEntity.
        Error code of the reason behind restore failure of the entity

        :return: The error_code of this FailedBackupRestoreEntity.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """
        Sets the error_code of this FailedBackupRestoreEntity.
        Error code of the reason behind restore failure of the entity

        :param error_code: The error_code of this FailedBackupRestoreEntity.
        :type: int
        """

        self._error_code = error_code

    @property
    def error_description(self):
        """
        Gets the error_description of this FailedBackupRestoreEntity.
        Reason behind the restore failure of the entity

        :return: The error_description of this FailedBackupRestoreEntity.
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """
        Sets the error_description of this FailedBackupRestoreEntity.
        Reason behind the restore failure of the entity

        :param error_description: The error_description of this FailedBackupRestoreEntity.
        :type: str
        """

        self._error_description = error_description

    @property
    def entity_attributes(self):
        """
        Gets the entity_attributes of this FailedBackupRestoreEntity.
        List of attributes related to an entity

        :return: The entity_attributes of this FailedBackupRestoreEntity.
        :rtype: list[BackupRestoreEntityAttribute]
        """
        return self._entity_attributes

    @entity_attributes.setter
    def entity_attributes(self, entity_attributes):
        """
        Sets the entity_attributes of this FailedBackupRestoreEntity.
        List of attributes related to an entity

        :param entity_attributes: The entity_attributes of this FailedBackupRestoreEntity.
        :type: list[BackupRestoreEntityAttribute]
        """

        self._entity_attributes = entity_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FailedBackupRestoreEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
