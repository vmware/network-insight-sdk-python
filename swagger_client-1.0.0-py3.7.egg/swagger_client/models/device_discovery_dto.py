# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceDiscoveryDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'network_ranges': 'list[str]',
        'seeds': 'list[str]',
        'seed_depth': 'int',
        'ignored_list': 'list[str]',
        'credential_profiles': 'list[str]',
        'proxy_id': 'str',
        'profile_id': 'str',
        'ssh_credentials': 'list[SSHCredentials]',
        'api_credentials': 'list[APICredentials]',
        'snmp_credentials': 'list[SNMPCredentials]',
        'schedule': 'Schedule'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'network_ranges': 'network_ranges',
        'seeds': 'seeds',
        'seed_depth': 'seed_depth',
        'ignored_list': 'ignored_list',
        'credential_profiles': 'credential_profiles',
        'proxy_id': 'proxy_id',
        'profile_id': 'profile_id',
        'ssh_credentials': 'ssh_credentials',
        'api_credentials': 'api_credentials',
        'snmp_credentials': 'snmp_credentials',
        'schedule': 'schedule'
    }

    def __init__(self, entity_id=None, name=None, network_ranges=None, seeds=None, seed_depth=None, ignored_list=None, credential_profiles=None, proxy_id=None, profile_id=None, ssh_credentials=None, api_credentials=None, snmp_credentials=None, schedule=None):
        """
        DeviceDiscoveryDto - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._network_ranges = None
        self._seeds = None
        self._seed_depth = None
        self._ignored_list = None
        self._credential_profiles = None
        self._proxy_id = None
        self._profile_id = None
        self._ssh_credentials = None
        self._api_credentials = None
        self._snmp_credentials = None
        self._schedule = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if network_ranges is not None:
          self.network_ranges = network_ranges
        if seeds is not None:
          self.seeds = seeds
        if seed_depth is not None:
          self.seed_depth = seed_depth
        if ignored_list is not None:
          self.ignored_list = ignored_list
        if credential_profiles is not None:
          self.credential_profiles = credential_profiles
        if proxy_id is not None:
          self.proxy_id = proxy_id
        if profile_id is not None:
          self.profile_id = profile_id
        if ssh_credentials is not None:
          self.ssh_credentials = ssh_credentials
        if api_credentials is not None:
          self.api_credentials = api_credentials
        if snmp_credentials is not None:
          self.snmp_credentials = snmp_credentials
        if schedule is not None:
          self.schedule = schedule

    @property
    def entity_id(self):
        """
        Gets the entity_id of this DeviceDiscoveryDto.
        Discovery Job Id

        :return: The entity_id of this DeviceDiscoveryDto.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this DeviceDiscoveryDto.
        Discovery Job Id

        :param entity_id: The entity_id of this DeviceDiscoveryDto.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this DeviceDiscoveryDto.
        Discovery Job Name

        :return: The name of this DeviceDiscoveryDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DeviceDiscoveryDto.
        Discovery Job Name

        :param name: The name of this DeviceDiscoveryDto.
        :type: str
        """

        self._name = name

    @property
    def network_ranges(self):
        """
        Gets the network_ranges of this DeviceDiscoveryDto.
        list of network or CIDR range for network discovery

        :return: The network_ranges of this DeviceDiscoveryDto.
        :rtype: list[str]
        """
        return self._network_ranges

    @network_ranges.setter
    def network_ranges(self, network_ranges):
        """
        Sets the network_ranges of this DeviceDiscoveryDto.
        list of network or CIDR range for network discovery

        :param network_ranges: The network_ranges of this DeviceDiscoveryDto.
        :type: list[str]
        """

        self._network_ranges = network_ranges

    @property
    def seeds(self):
        """
        Gets the seeds of this DeviceDiscoveryDto.
        list of seed device for network discovery

        :return: The seeds of this DeviceDiscoveryDto.
        :rtype: list[str]
        """
        return self._seeds

    @seeds.setter
    def seeds(self, seeds):
        """
        Sets the seeds of this DeviceDiscoveryDto.
        list of seed device for network discovery

        :param seeds: The seeds of this DeviceDiscoveryDto.
        :type: list[str]
        """

        self._seeds = seeds

    @property
    def seed_depth(self):
        """
        Gets the seed_depth of this DeviceDiscoveryDto.
        depth of seed discovery

        :return: The seed_depth of this DeviceDiscoveryDto.
        :rtype: int
        """
        return self._seed_depth

    @seed_depth.setter
    def seed_depth(self, seed_depth):
        """
        Sets the seed_depth of this DeviceDiscoveryDto.
        depth of seed discovery

        :param seed_depth: The seed_depth of this DeviceDiscoveryDto.
        :type: int
        """

        self._seed_depth = seed_depth

    @property
    def ignored_list(self):
        """
        Gets the ignored_list of this DeviceDiscoveryDto.
        list of ip/fqdn which needs to be ignored during discovery

        :return: The ignored_list of this DeviceDiscoveryDto.
        :rtype: list[str]
        """
        return self._ignored_list

    @ignored_list.setter
    def ignored_list(self, ignored_list):
        """
        Sets the ignored_list of this DeviceDiscoveryDto.
        list of ip/fqdn which needs to be ignored during discovery

        :param ignored_list: The ignored_list of this DeviceDiscoveryDto.
        :type: list[str]
        """

        self._ignored_list = ignored_list

    @property
    def credential_profiles(self):
        """
        Gets the credential_profiles of this DeviceDiscoveryDto.
        list of credential profile entity ids to be used during discovery

        :return: The credential_profiles of this DeviceDiscoveryDto.
        :rtype: list[str]
        """
        return self._credential_profiles

    @credential_profiles.setter
    def credential_profiles(self, credential_profiles):
        """
        Sets the credential_profiles of this DeviceDiscoveryDto.
        list of credential profile entity ids to be used during discovery

        :param credential_profiles: The credential_profiles of this DeviceDiscoveryDto.
        :type: list[str]
        """

        self._credential_profiles = credential_profiles

    @property
    def proxy_id(self):
        """
        Gets the proxy_id of this DeviceDiscoveryDto.
        modelKey of proxy node

        :return: The proxy_id of this DeviceDiscoveryDto.
        :rtype: str
        """
        return self._proxy_id

    @proxy_id.setter
    def proxy_id(self, proxy_id):
        """
        Sets the proxy_id of this DeviceDiscoveryDto.
        modelKey of proxy node

        :param proxy_id: The proxy_id of this DeviceDiscoveryDto.
        :type: str
        """

        self._proxy_id = proxy_id

    @property
    def profile_id(self):
        """
        Gets the profile_id of this DeviceDiscoveryDto.
        modelKey of discovery profile

        :return: The profile_id of this DeviceDiscoveryDto.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """
        Sets the profile_id of this DeviceDiscoveryDto.
        modelKey of discovery profile

        :param profile_id: The profile_id of this DeviceDiscoveryDto.
        :type: str
        """

        self._profile_id = profile_id

    @property
    def ssh_credentials(self):
        """
        Gets the ssh_credentials of this DeviceDiscoveryDto.
        List of SSH Credentials.

        :return: The ssh_credentials of this DeviceDiscoveryDto.
        :rtype: list[SSHCredentials]
        """
        return self._ssh_credentials

    @ssh_credentials.setter
    def ssh_credentials(self, ssh_credentials):
        """
        Sets the ssh_credentials of this DeviceDiscoveryDto.
        List of SSH Credentials.

        :param ssh_credentials: The ssh_credentials of this DeviceDiscoveryDto.
        :type: list[SSHCredentials]
        """

        self._ssh_credentials = ssh_credentials

    @property
    def api_credentials(self):
        """
        Gets the api_credentials of this DeviceDiscoveryDto.
        List of API Credentials.

        :return: The api_credentials of this DeviceDiscoveryDto.
        :rtype: list[APICredentials]
        """
        return self._api_credentials

    @api_credentials.setter
    def api_credentials(self, api_credentials):
        """
        Sets the api_credentials of this DeviceDiscoveryDto.
        List of API Credentials.

        :param api_credentials: The api_credentials of this DeviceDiscoveryDto.
        :type: list[APICredentials]
        """

        self._api_credentials = api_credentials

    @property
    def snmp_credentials(self):
        """
        Gets the snmp_credentials of this DeviceDiscoveryDto.
        List of SNMP Credentials.

        :return: The snmp_credentials of this DeviceDiscoveryDto.
        :rtype: list[SNMPCredentials]
        """
        return self._snmp_credentials

    @snmp_credentials.setter
    def snmp_credentials(self, snmp_credentials):
        """
        Sets the snmp_credentials of this DeviceDiscoveryDto.
        List of SNMP Credentials.

        :param snmp_credentials: The snmp_credentials of this DeviceDiscoveryDto.
        :type: list[SNMPCredentials]
        """

        self._snmp_credentials = snmp_credentials

    @property
    def schedule(self):
        """
        Gets the schedule of this DeviceDiscoveryDto.

        :return: The schedule of this DeviceDiscoveryDto.
        :rtype: Schedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this DeviceDiscoveryDto.

        :param schedule: The schedule of this DeviceDiscoveryDto.
        :type: Schedule
        """

        self._schedule = schedule

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceDiscoveryDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
