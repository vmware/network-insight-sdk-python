# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SyslogTarget(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_or_fqdn': 'str',
        'port': 'int',
        'protocol': 'str',
        'nick_name': 'str',
        'collector_id': 'str'
    }

    attribute_map = {
        'ip_or_fqdn': 'ip_or_fqdn',
        'port': 'port',
        'protocol': 'protocol',
        'nick_name': 'nick_name',
        'collector_id': 'collector_id'
    }

    def __init__(self, ip_or_fqdn=None, port=None, protocol=None, nick_name=None, collector_id=None):
        """
        SyslogTarget - a model defined in Swagger
        """

        self._ip_or_fqdn = None
        self._port = None
        self._protocol = None
        self._nick_name = None
        self._collector_id = None

        if ip_or_fqdn is not None:
          self.ip_or_fqdn = ip_or_fqdn
        if port is not None:
          self.port = port
        if protocol is not None:
          self.protocol = protocol
        if nick_name is not None:
          self.nick_name = nick_name
        if collector_id is not None:
          self.collector_id = collector_id

    @property
    def ip_or_fqdn(self):
        """
        Gets the ip_or_fqdn of this SyslogTarget.
        ip_or_fqdn

        :return: The ip_or_fqdn of this SyslogTarget.
        :rtype: str
        """
        return self._ip_or_fqdn

    @ip_or_fqdn.setter
    def ip_or_fqdn(self, ip_or_fqdn):
        """
        Sets the ip_or_fqdn of this SyslogTarget.
        ip_or_fqdn

        :param ip_or_fqdn: The ip_or_fqdn of this SyslogTarget.
        :type: str
        """

        self._ip_or_fqdn = ip_or_fqdn

    @property
    def port(self):
        """
        Gets the port of this SyslogTarget.
        port

        :return: The port of this SyslogTarget.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this SyslogTarget.
        port

        :param port: The port of this SyslogTarget.
        :type: int
        """

        self._port = port

    @property
    def protocol(self):
        """
        Gets the protocol of this SyslogTarget.
        Use only UDP protocol

        :return: The protocol of this SyslogTarget.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this SyslogTarget.
        Use only UDP protocol

        :param protocol: The protocol of this SyslogTarget.
        :type: str
        """

        self._protocol = protocol

    @property
    def nick_name(self):
        """
        Gets the nick_name of this SyslogTarget.
        Nickname of the syslog server

        :return: The nick_name of this SyslogTarget.
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """
        Sets the nick_name of this SyslogTarget.
        Nickname of the syslog server

        :param nick_name: The nick_name of this SyslogTarget.
        :type: str
        """

        self._nick_name = nick_name

    @property
    def collector_id(self):
        """
        Gets the collector_id of this SyslogTarget.
        id of the collector node. Applicable only in case of cloud offering

        :return: The collector_id of this SyslogTarget.
        :rtype: str
        """
        return self._collector_id

    @collector_id.setter
    def collector_id(self, collector_id):
        """
        Sets the collector_id of this SyslogTarget.
        id of the collector node. Applicable only in case of cloud offering

        :param collector_id: The collector_id of this SyslogTarget.
        :type: str
        """

        self._collector_id = collector_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SyslogTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
