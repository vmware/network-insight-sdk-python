# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HCXIPScope(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gateway': 'IpAddress',
        'prefix_length': 'int',
        'primary_dns': 'IpAddress',
        'secondary_dns': 'IpAddress',
        'dns_suffix': 'str',
        'ip_address_ranges': 'list[IpAddressRange]'
    }

    attribute_map = {
        'gateway': 'gateway',
        'prefix_length': 'prefix_length',
        'primary_dns': 'primary_DNS',
        'secondary_dns': 'secondary_DNS',
        'dns_suffix': 'dns_suffix',
        'ip_address_ranges': 'ip_address_ranges'
    }

    def __init__(self, gateway=None, prefix_length=None, primary_dns=None, secondary_dns=None, dns_suffix=None, ip_address_ranges=None):
        """
        HCXIPScope - a model defined in Swagger
        """

        self._gateway = None
        self._prefix_length = None
        self._primary_dns = None
        self._secondary_dns = None
        self._dns_suffix = None
        self._ip_address_ranges = None

        if gateway is not None:
          self.gateway = gateway
        if prefix_length is not None:
          self.prefix_length = prefix_length
        if primary_dns is not None:
          self.primary_dns = primary_dns
        if secondary_dns is not None:
          self.secondary_dns = secondary_dns
        if dns_suffix is not None:
          self.dns_suffix = dns_suffix
        if ip_address_ranges is not None:
          self.ip_address_ranges = ip_address_ranges

    @property
    def gateway(self):
        """
        Gets the gateway of this HCXIPScope.

        :return: The gateway of this HCXIPScope.
        :rtype: IpAddress
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this HCXIPScope.

        :param gateway: The gateway of this HCXIPScope.
        :type: IpAddress
        """

        self._gateway = gateway

    @property
    def prefix_length(self):
        """
        Gets the prefix_length of this HCXIPScope.

        :return: The prefix_length of this HCXIPScope.
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """
        Sets the prefix_length of this HCXIPScope.

        :param prefix_length: The prefix_length of this HCXIPScope.
        :type: int
        """

        self._prefix_length = prefix_length

    @property
    def primary_dns(self):
        """
        Gets the primary_dns of this HCXIPScope.

        :return: The primary_dns of this HCXIPScope.
        :rtype: IpAddress
        """
        return self._primary_dns

    @primary_dns.setter
    def primary_dns(self, primary_dns):
        """
        Sets the primary_dns of this HCXIPScope.

        :param primary_dns: The primary_dns of this HCXIPScope.
        :type: IpAddress
        """

        self._primary_dns = primary_dns

    @property
    def secondary_dns(self):
        """
        Gets the secondary_dns of this HCXIPScope.

        :return: The secondary_dns of this HCXIPScope.
        :rtype: IpAddress
        """
        return self._secondary_dns

    @secondary_dns.setter
    def secondary_dns(self, secondary_dns):
        """
        Sets the secondary_dns of this HCXIPScope.

        :param secondary_dns: The secondary_dns of this HCXIPScope.
        :type: IpAddress
        """

        self._secondary_dns = secondary_dns

    @property
    def dns_suffix(self):
        """
        Gets the dns_suffix of this HCXIPScope.

        :return: The dns_suffix of this HCXIPScope.
        :rtype: str
        """
        return self._dns_suffix

    @dns_suffix.setter
    def dns_suffix(self, dns_suffix):
        """
        Sets the dns_suffix of this HCXIPScope.

        :param dns_suffix: The dns_suffix of this HCXIPScope.
        :type: str
        """

        self._dns_suffix = dns_suffix

    @property
    def ip_address_ranges(self):
        """
        Gets the ip_address_ranges of this HCXIPScope.

        :return: The ip_address_ranges of this HCXIPScope.
        :rtype: list[IpAddressRange]
        """
        return self._ip_address_ranges

    @ip_address_ranges.setter
    def ip_address_ranges(self, ip_address_ranges):
        """
        Sets the ip_address_ranges of this HCXIPScope.

        :param ip_address_ranges: The ip_address_ranges of this HCXIPScope.
        :type: list[IpAddressRange]
        """

        self._ip_address_ranges = ip_address_ranges

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HCXIPScope):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
