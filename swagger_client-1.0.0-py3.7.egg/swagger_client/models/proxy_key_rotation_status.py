# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProxyKeyRotationStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'int',
        'status': 'str',
        'failed_collector_ids': 'list[str]'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'status': 'status',
        'failed_collector_ids': 'failedCollectorIds'
    }

    def __init__(self, customer_id=None, status=None, failed_collector_ids=None):
        """
        ProxyKeyRotationStatus - a model defined in Swagger
        """

        self._customer_id = None
        self._status = None
        self._failed_collector_ids = None

        if customer_id is not None:
          self.customer_id = customer_id
        if status is not None:
          self.status = status
        if failed_collector_ids is not None:
          self.failed_collector_ids = failed_collector_ids

    @property
    def customer_id(self):
        """
        Gets the customer_id of this ProxyKeyRotationStatus.
        Customer id

        :return: The customer_id of this ProxyKeyRotationStatus.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this ProxyKeyRotationStatus.
        Customer id

        :param customer_id: The customer_id of this ProxyKeyRotationStatus.
        :type: int
        """

        self._customer_id = customer_id

    @property
    def status(self):
        """
        Gets the status of this ProxyKeyRotationStatus.

        :return: The status of this ProxyKeyRotationStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ProxyKeyRotationStatus.

        :param status: The status of this ProxyKeyRotationStatus.
        :type: str
        """
        allowed_values = ["SUBMITTED", "IN_PROGRESS", "SUCCESS", "FAILED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def failed_collector_ids(self):
        """
        Gets the failed_collector_ids of this ProxyKeyRotationStatus.

        :return: The failed_collector_ids of this ProxyKeyRotationStatus.
        :rtype: list[str]
        """
        return self._failed_collector_ids

    @failed_collector_ids.setter
    def failed_collector_ids(self, failed_collector_ids):
        """
        Sets the failed_collector_ids of this ProxyKeyRotationStatus.

        :param failed_collector_ids: The failed_collector_ids of this ProxyKeyRotationStatus.
        :type: list[str]
        """

        self._failed_collector_ids = failed_collector_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProxyKeyRotationStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
