# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProxyKeyDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'int',
        'lifetime': 'str',
        'remaining_validity': 'str',
        'last_updated_at': 'int',
        'last_updated_by': 'str'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'lifetime': 'lifetime',
        'remaining_validity': 'remainingValidity',
        'last_updated_at': 'lastUpdatedAt',
        'last_updated_by': 'lastUpdatedBy'
    }

    def __init__(self, customer_id=None, lifetime=None, remaining_validity=None, last_updated_at=None, last_updated_by=None):
        """
        ProxyKeyDetails - a model defined in Swagger
        """

        self._customer_id = None
        self._lifetime = None
        self._remaining_validity = None
        self._last_updated_at = None
        self._last_updated_by = None

        if customer_id is not None:
          self.customer_id = customer_id
        if lifetime is not None:
          self.lifetime = lifetime
        if remaining_validity is not None:
          self.remaining_validity = remaining_validity
        if last_updated_at is not None:
          self.last_updated_at = last_updated_at
        if last_updated_by is not None:
          self.last_updated_by = last_updated_by

    @property
    def customer_id(self):
        """
        Gets the customer_id of this ProxyKeyDetails.
        Customer id

        :return: The customer_id of this ProxyKeyDetails.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this ProxyKeyDetails.
        Customer id

        :param customer_id: The customer_id of this ProxyKeyDetails.
        :type: int
        """

        self._customer_id = customer_id

    @property
    def lifetime(self):
        """
        Gets the lifetime of this ProxyKeyDetails.
        Lifetime (in days) of certificate set by the customer

        :return: The lifetime of this ProxyKeyDetails.
        :rtype: str
        """
        return self._lifetime

    @lifetime.setter
    def lifetime(self, lifetime):
        """
        Sets the lifetime of this ProxyKeyDetails.
        Lifetime (in days) of certificate set by the customer

        :param lifetime: The lifetime of this ProxyKeyDetails.
        :type: str
        """

        self._lifetime = lifetime

    @property
    def remaining_validity(self):
        """
        Gets the remaining_validity of this ProxyKeyDetails.
        Remaining number of days for which the certificate is valid

        :return: The remaining_validity of this ProxyKeyDetails.
        :rtype: str
        """
        return self._remaining_validity

    @remaining_validity.setter
    def remaining_validity(self, remaining_validity):
        """
        Sets the remaining_validity of this ProxyKeyDetails.
        Remaining number of days for which the certificate is valid

        :param remaining_validity: The remaining_validity of this ProxyKeyDetails.
        :type: str
        """

        self._remaining_validity = remaining_validity

    @property
    def last_updated_at(self):
        """
        Gets the last_updated_at of this ProxyKeyDetails.
        Time (in milli seconds) when the certificate was last updated

        :return: The last_updated_at of this ProxyKeyDetails.
        :rtype: int
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """
        Sets the last_updated_at of this ProxyKeyDetails.
        Time (in milli seconds) when the certificate was last updated

        :param last_updated_at: The last_updated_at of this ProxyKeyDetails.
        :type: int
        """

        self._last_updated_at = last_updated_at

    @property
    def last_updated_by(self):
        """
        Gets the last_updated_by of this ProxyKeyDetails.
        Username of the entity which triggered the last update of certificate

        :return: The last_updated_by of this ProxyKeyDetails.
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """
        Sets the last_updated_by of this ProxyKeyDetails.
        Username of the entity which triggered the last update of certificate

        :param last_updated_by: The last_updated_by of this ProxyKeyDetails.
        :type: str
        """

        self._last_updated_by = last_updated_by

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProxyKeyDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
