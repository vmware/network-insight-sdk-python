# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AWSDataSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'entity_type': 'DataSourceType',
        'ip': 'str',
        'fqdn': 'str',
        'proxy_id': 'str',
        'nickname': 'str',
        'enabled': 'bool',
        'notes': 'str',
        'certificate': 'str',
        'sha_thumbprint': 'str',
        'new_certificate': 'str',
        'new_sha_thumbprint': 'str',
        'credentials': 'AWSCredentials',
        'flows_enabled': 'bool',
        'add_linked_accounts': 'bool',
        'role_arn_suffix': 'str',
        'linked_role_arn': 'str',
        'data_source_hierarchy': 'str',
        'enable_aws_geo_restrictions': 'bool',
        'selected_regions': 'list[str]',
        'child_datasource_count': 'int',
        'child_datasources': 'list[DataSourceEntityId]',
        'web_proxy_id': 'str'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'entity_type': 'entity_type',
        'ip': 'ip',
        'fqdn': 'fqdn',
        'proxy_id': 'proxy_id',
        'nickname': 'nickname',
        'enabled': 'enabled',
        'notes': 'notes',
        'certificate': 'certificate',
        'sha_thumbprint': 'sha_thumbprint',
        'new_certificate': 'new_certificate',
        'new_sha_thumbprint': 'new_sha_thumbprint',
        'credentials': 'credentials',
        'flows_enabled': 'flows_enabled',
        'add_linked_accounts': 'add_linked_accounts',
        'role_arn_suffix': 'role_arn_suffix',
        'linked_role_arn': 'linked_role_arn',
        'data_source_hierarchy': 'data_source_hierarchy',
        'enable_aws_geo_restrictions': 'enable_aws_geo_restrictions',
        'selected_regions': 'selected_regions',
        'child_datasource_count': 'child_datasource_count',
        'child_datasources': 'child_datasources',
        'web_proxy_id': 'web_proxy_id'
    }

    def __init__(self, entity_id=None, entity_type=None, ip=None, fqdn=None, proxy_id=None, nickname=None, enabled=True, notes=None, certificate=None, sha_thumbprint=None, new_certificate=None, new_sha_thumbprint=None, credentials=None, flows_enabled=False, add_linked_accounts=False, role_arn_suffix=None, linked_role_arn=None, data_source_hierarchy=None, enable_aws_geo_restrictions=False, selected_regions=None, child_datasource_count=None, child_datasources=None, web_proxy_id=None):
        """
        AWSDataSource - a model defined in Swagger
        """

        self._entity_id = None
        self._entity_type = None
        self._ip = None
        self._fqdn = None
        self._proxy_id = None
        self._nickname = None
        self._enabled = None
        self._notes = None
        self._certificate = None
        self._sha_thumbprint = None
        self._new_certificate = None
        self._new_sha_thumbprint = None
        self._credentials = None
        self._flows_enabled = None
        self._add_linked_accounts = None
        self._role_arn_suffix = None
        self._linked_role_arn = None
        self._data_source_hierarchy = None
        self._enable_aws_geo_restrictions = None
        self._selected_regions = None
        self._child_datasource_count = None
        self._child_datasources = None
        self._web_proxy_id = None

        if entity_id is not None:
          self.entity_id = entity_id
        if entity_type is not None:
          self.entity_type = entity_type
        if ip is not None:
          self.ip = ip
        if fqdn is not None:
          self.fqdn = fqdn
        if proxy_id is not None:
          self.proxy_id = proxy_id
        if nickname is not None:
          self.nickname = nickname
        if enabled is not None:
          self.enabled = enabled
        if notes is not None:
          self.notes = notes
        if certificate is not None:
          self.certificate = certificate
        if sha_thumbprint is not None:
          self.sha_thumbprint = sha_thumbprint
        if new_certificate is not None:
          self.new_certificate = new_certificate
        if new_sha_thumbprint is not None:
          self.new_sha_thumbprint = new_sha_thumbprint
        if credentials is not None:
          self.credentials = credentials
        if flows_enabled is not None:
          self.flows_enabled = flows_enabled
        if add_linked_accounts is not None:
          self.add_linked_accounts = add_linked_accounts
        if role_arn_suffix is not None:
          self.role_arn_suffix = role_arn_suffix
        if linked_role_arn is not None:
          self.linked_role_arn = linked_role_arn
        if data_source_hierarchy is not None:
          self.data_source_hierarchy = data_source_hierarchy
        if enable_aws_geo_restrictions is not None:
          self.enable_aws_geo_restrictions = enable_aws_geo_restrictions
        if selected_regions is not None:
          self.selected_regions = selected_regions
        if child_datasource_count is not None:
          self.child_datasource_count = child_datasource_count
        if child_datasources is not None:
          self.child_datasources = child_datasources
        if web_proxy_id is not None:
          self.web_proxy_id = web_proxy_id

    @property
    def entity_id(self):
        """
        Gets the entity_id of this AWSDataSource.
        Internal ID of data source, to be used in subsequent API calls

        :return: The entity_id of this AWSDataSource.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this AWSDataSource.
        Internal ID of data source, to be used in subsequent API calls

        :param entity_id: The entity_id of this AWSDataSource.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """
        Gets the entity_type of this AWSDataSource.

        :return: The entity_type of this AWSDataSource.
        :rtype: DataSourceType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this AWSDataSource.

        :param entity_type: The entity_type of this AWSDataSource.
        :type: DataSourceType
        """

        self._entity_type = entity_type

    @property
    def ip(self):
        """
        Gets the ip of this AWSDataSource.
        IP address of data source (use either IP or FQDN, not both)

        :return: The ip of this AWSDataSource.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this AWSDataSource.
        IP address of data source (use either IP or FQDN, not both)

        :param ip: The ip of this AWSDataSource.
        :type: str
        """

        self._ip = ip

    @property
    def fqdn(self):
        """
        Gets the fqdn of this AWSDataSource.
        Hostname of data source (use either IP or FQDN, not both)

        :return: The fqdn of this AWSDataSource.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """
        Sets the fqdn of this AWSDataSource.
        Hostname of data source (use either IP or FQDN, not both)

        :param fqdn: The fqdn of this AWSDataSource.
        :type: str
        """

        self._fqdn = fqdn

    @property
    def proxy_id(self):
        """
        Gets the proxy_id of this AWSDataSource.
        ID of Collector VM which should register this vcenter

        :return: The proxy_id of this AWSDataSource.
        :rtype: str
        """
        return self._proxy_id

    @proxy_id.setter
    def proxy_id(self, proxy_id):
        """
        Sets the proxy_id of this AWSDataSource.
        ID of Collector VM which should register this vcenter

        :param proxy_id: The proxy_id of this AWSDataSource.
        :type: str
        """

        self._proxy_id = proxy_id

    @property
    def nickname(self):
        """
        Gets the nickname of this AWSDataSource.
        A friendly nickname for the data source

        :return: The nickname of this AWSDataSource.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """
        Sets the nickname of this AWSDataSource.
        A friendly nickname for the data source

        :param nickname: The nickname of this AWSDataSource.
        :type: str
        """

        self._nickname = nickname

    @property
    def enabled(self):
        """
        Gets the enabled of this AWSDataSource.
        Whether or not data collection is enabled

        :return: The enabled of this AWSDataSource.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this AWSDataSource.
        Whether or not data collection is enabled

        :param enabled: The enabled of this AWSDataSource.
        :type: bool
        """

        self._enabled = enabled

    @property
    def notes(self):
        """
        Gets the notes of this AWSDataSource.
        Room for notes or comments about the data source

        :return: The notes of this AWSDataSource.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this AWSDataSource.
        Room for notes or comments about the data source

        :param notes: The notes of this AWSDataSource.
        :type: str
        """

        self._notes = notes

    @property
    def certificate(self):
        """
        Gets the certificate of this AWSDataSource.
        Certificate of data source

        :return: The certificate of this AWSDataSource.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """
        Sets the certificate of this AWSDataSource.
        Certificate of data source

        :param certificate: The certificate of this AWSDataSource.
        :type: str
        """

        self._certificate = certificate

    @property
    def sha_thumbprint(self):
        """
        Gets the sha_thumbprint of this AWSDataSource.
        SHA thumbprint of data source

        :return: The sha_thumbprint of this AWSDataSource.
        :rtype: str
        """
        return self._sha_thumbprint

    @sha_thumbprint.setter
    def sha_thumbprint(self, sha_thumbprint):
        """
        Sets the sha_thumbprint of this AWSDataSource.
        SHA thumbprint of data source

        :param sha_thumbprint: The sha_thumbprint of this AWSDataSource.
        :type: str
        """

        self._sha_thumbprint = sha_thumbprint

    @property
    def new_certificate(self):
        """
        Gets the new_certificate of this AWSDataSource.
        New certificate of data source

        :return: The new_certificate of this AWSDataSource.
        :rtype: str
        """
        return self._new_certificate

    @new_certificate.setter
    def new_certificate(self, new_certificate):
        """
        Sets the new_certificate of this AWSDataSource.
        New certificate of data source

        :param new_certificate: The new_certificate of this AWSDataSource.
        :type: str
        """

        self._new_certificate = new_certificate

    @property
    def new_sha_thumbprint(self):
        """
        Gets the new_sha_thumbprint of this AWSDataSource.
        New SHA thumbprint of data source

        :return: The new_sha_thumbprint of this AWSDataSource.
        :rtype: str
        """
        return self._new_sha_thumbprint

    @new_sha_thumbprint.setter
    def new_sha_thumbprint(self, new_sha_thumbprint):
        """
        Sets the new_sha_thumbprint of this AWSDataSource.
        New SHA thumbprint of data source

        :param new_sha_thumbprint: The new_sha_thumbprint of this AWSDataSource.
        :type: str
        """

        self._new_sha_thumbprint = new_sha_thumbprint

    @property
    def credentials(self):
        """
        Gets the credentials of this AWSDataSource.

        :return: The credentials of this AWSDataSource.
        :rtype: AWSCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """
        Sets the credentials of this AWSDataSource.

        :param credentials: The credentials of this AWSDataSource.
        :type: AWSCredentials
        """

        self._credentials = credentials

    @property
    def flows_enabled(self):
        """
        Gets the flows_enabled of this AWSDataSource.
        Whether or not to collect flows from the VPC Flow Logs

        :return: The flows_enabled of this AWSDataSource.
        :rtype: bool
        """
        return self._flows_enabled

    @flows_enabled.setter
    def flows_enabled(self, flows_enabled):
        """
        Sets the flows_enabled of this AWSDataSource.
        Whether or not to collect flows from the VPC Flow Logs

        :param flows_enabled: The flows_enabled of this AWSDataSource.
        :type: bool
        """

        self._flows_enabled = flows_enabled

    @property
    def add_linked_accounts(self):
        """
        Gets the add_linked_accounts of this AWSDataSource.
        Automatically add linked accounts

        :return: The add_linked_accounts of this AWSDataSource.
        :rtype: bool
        """
        return self._add_linked_accounts

    @add_linked_accounts.setter
    def add_linked_accounts(self, add_linked_accounts):
        """
        Sets the add_linked_accounts of this AWSDataSource.
        Automatically add linked accounts

        :param add_linked_accounts: The add_linked_accounts of this AWSDataSource.
        :type: bool
        """

        self._add_linked_accounts = add_linked_accounts

    @property
    def role_arn_suffix(self):
        """
        Gets the role_arn_suffix of this AWSDataSource.

        :return: The role_arn_suffix of this AWSDataSource.
        :rtype: str
        """
        return self._role_arn_suffix

    @role_arn_suffix.setter
    def role_arn_suffix(self, role_arn_suffix):
        """
        Sets the role_arn_suffix of this AWSDataSource.

        :param role_arn_suffix: The role_arn_suffix of this AWSDataSource.
        :type: str
        """

        self._role_arn_suffix = role_arn_suffix

    @property
    def linked_role_arn(self):
        """
        Gets the linked_role_arn of this AWSDataSource.
        Should not be populated. Will be ignored if populated.

        :return: The linked_role_arn of this AWSDataSource.
        :rtype: str
        """
        return self._linked_role_arn

    @linked_role_arn.setter
    def linked_role_arn(self, linked_role_arn):
        """
        Sets the linked_role_arn of this AWSDataSource.
        Should not be populated. Will be ignored if populated.

        :param linked_role_arn: The linked_role_arn of this AWSDataSource.
        :type: str
        """

        self._linked_role_arn = linked_role_arn

    @property
    def data_source_hierarchy(self):
        """
        Gets the data_source_hierarchy of this AWSDataSource.
        Should not be populated. Will be ignored if populated.

        :return: The data_source_hierarchy of this AWSDataSource.
        :rtype: str
        """
        return self._data_source_hierarchy

    @data_source_hierarchy.setter
    def data_source_hierarchy(self, data_source_hierarchy):
        """
        Sets the data_source_hierarchy of this AWSDataSource.
        Should not be populated. Will be ignored if populated.

        :param data_source_hierarchy: The data_source_hierarchy of this AWSDataSource.
        :type: str
        """

        self._data_source_hierarchy = data_source_hierarchy

    @property
    def enable_aws_geo_restrictions(self):
        """
        Gets the enable_aws_geo_restrictions of this AWSDataSource.
        Limit collection to only regions specified in selected_regions

        :return: The enable_aws_geo_restrictions of this AWSDataSource.
        :rtype: bool
        """
        return self._enable_aws_geo_restrictions

    @enable_aws_geo_restrictions.setter
    def enable_aws_geo_restrictions(self, enable_aws_geo_restrictions):
        """
        Sets the enable_aws_geo_restrictions of this AWSDataSource.
        Limit collection to only regions specified in selected_regions

        :param enable_aws_geo_restrictions: The enable_aws_geo_restrictions of this AWSDataSource.
        :type: bool
        """

        self._enable_aws_geo_restrictions = enable_aws_geo_restrictions

    @property
    def selected_regions(self):
        """
        Gets the selected_regions of this AWSDataSource.

        :return: The selected_regions of this AWSDataSource.
        :rtype: list[str]
        """
        return self._selected_regions

    @selected_regions.setter
    def selected_regions(self, selected_regions):
        """
        Sets the selected_regions of this AWSDataSource.

        :param selected_regions: The selected_regions of this AWSDataSource.
        :type: list[str]
        """

        self._selected_regions = selected_regions

    @property
    def child_datasource_count(self):
        """
        Gets the child_datasource_count of this AWSDataSource.
        Should not be populated. Will be ignored if populated.

        :return: The child_datasource_count of this AWSDataSource.
        :rtype: int
        """
        return self._child_datasource_count

    @child_datasource_count.setter
    def child_datasource_count(self, child_datasource_count):
        """
        Sets the child_datasource_count of this AWSDataSource.
        Should not be populated. Will be ignored if populated.

        :param child_datasource_count: The child_datasource_count of this AWSDataSource.
        :type: int
        """

        self._child_datasource_count = child_datasource_count

    @property
    def child_datasources(self):
        """
        Gets the child_datasources of this AWSDataSource.
        Should not be populated. Will be ignored if populated.

        :return: The child_datasources of this AWSDataSource.
        :rtype: list[DataSourceEntityId]
        """
        return self._child_datasources

    @child_datasources.setter
    def child_datasources(self, child_datasources):
        """
        Sets the child_datasources of this AWSDataSource.
        Should not be populated. Will be ignored if populated.

        :param child_datasources: The child_datasources of this AWSDataSource.
        :type: list[DataSourceEntityId]
        """

        self._child_datasources = child_datasources

    @property
    def web_proxy_id(self):
        """
        Gets the web_proxy_id of this AWSDataSource.
        Identifier of web proxy to be used for connection. If not given or empty, any web proxy used earlier will be cleared

        :return: The web_proxy_id of this AWSDataSource.
        :rtype: str
        """
        return self._web_proxy_id

    @web_proxy_id.setter
    def web_proxy_id(self, web_proxy_id):
        """
        Sets the web_proxy_id of this AWSDataSource.
        Identifier of web proxy to be used for connection. If not given or empty, any web proxy used earlier will be cleared

        :param web_proxy_id: The web_proxy_id of this AWSDataSource.
        :type: str
        """

        self._web_proxy_id = web_proxy_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AWSDataSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
