# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NSXTTransportNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'entity_type': 'EntityType',
        'manager': 'Reference',
        'transport_zones': 'list[Reference]',
        'fabric_node': 'Reference',
        'node_type': 'str',
        'vsphere_distributed_switches': 'list[Reference]',
        'rteps': 'list[Reference]',
        'maintenance_mode': 'str',
        'nsxt_edge_cluster': 'Reference',
        'ip_addresses': 'list[IpAddress]',
        'vendor_id': 'str',
        'roll_up_status': 'str',
        'management_status': 'str',
        'control_status': 'str',
        'pnic_status': 'str',
        'tunnel_status': 'str',
        'deployment_type': 'str',
        'node_status_property': 'NodeStatusProperty',
        'device': 'Reference',
        'deployment_status': 'str',
        'ecmp': 'str',
        'tag_keys': 'list[str]',
        'tag_key_values': 'list[str]'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'entity_type': 'entity_type',
        'manager': 'manager',
        'transport_zones': 'transport_zones',
        'fabric_node': 'fabric_node',
        'node_type': 'node_type',
        'vsphere_distributed_switches': 'vsphere_distributed_switches',
        'rteps': 'rteps',
        'maintenance_mode': 'maintenance_mode',
        'nsxt_edge_cluster': 'nsxt_edge_cluster',
        'ip_addresses': 'ip_addresses',
        'vendor_id': 'vendor_id',
        'roll_up_status': 'roll_up_status',
        'management_status': 'management_status',
        'control_status': 'control_status',
        'pnic_status': 'pnic_status',
        'tunnel_status': 'tunnel_status',
        'deployment_type': 'deployment_type',
        'node_status_property': 'node_status_property',
        'device': 'device',
        'deployment_status': 'deployment_status',
        'ecmp': 'ecmp',
        'tag_keys': 'tag_keys',
        'tag_key_values': 'tag_key_values'
    }

    def __init__(self, entity_id=None, name=None, entity_type=None, manager=None, transport_zones=None, fabric_node=None, node_type=None, vsphere_distributed_switches=None, rteps=None, maintenance_mode=None, nsxt_edge_cluster=None, ip_addresses=None, vendor_id=None, roll_up_status=None, management_status=None, control_status=None, pnic_status=None, tunnel_status=None, deployment_type=None, node_status_property=None, device=None, deployment_status=None, ecmp=None, tag_keys=None, tag_key_values=None):
        """
        NSXTTransportNode - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._entity_type = None
        self._manager = None
        self._transport_zones = None
        self._fabric_node = None
        self._node_type = None
        self._vsphere_distributed_switches = None
        self._rteps = None
        self._maintenance_mode = None
        self._nsxt_edge_cluster = None
        self._ip_addresses = None
        self._vendor_id = None
        self._roll_up_status = None
        self._management_status = None
        self._control_status = None
        self._pnic_status = None
        self._tunnel_status = None
        self._deployment_type = None
        self._node_status_property = None
        self._device = None
        self._deployment_status = None
        self._ecmp = None
        self._tag_keys = None
        self._tag_key_values = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if entity_type is not None:
          self.entity_type = entity_type
        if manager is not None:
          self.manager = manager
        if transport_zones is not None:
          self.transport_zones = transport_zones
        if fabric_node is not None:
          self.fabric_node = fabric_node
        if node_type is not None:
          self.node_type = node_type
        if vsphere_distributed_switches is not None:
          self.vsphere_distributed_switches = vsphere_distributed_switches
        if rteps is not None:
          self.rteps = rteps
        if maintenance_mode is not None:
          self.maintenance_mode = maintenance_mode
        if nsxt_edge_cluster is not None:
          self.nsxt_edge_cluster = nsxt_edge_cluster
        if ip_addresses is not None:
          self.ip_addresses = ip_addresses
        if vendor_id is not None:
          self.vendor_id = vendor_id
        if roll_up_status is not None:
          self.roll_up_status = roll_up_status
        if management_status is not None:
          self.management_status = management_status
        if control_status is not None:
          self.control_status = control_status
        if pnic_status is not None:
          self.pnic_status = pnic_status
        if tunnel_status is not None:
          self.tunnel_status = tunnel_status
        if deployment_type is not None:
          self.deployment_type = deployment_type
        if node_status_property is not None:
          self.node_status_property = node_status_property
        if device is not None:
          self.device = device
        if deployment_status is not None:
          self.deployment_status = deployment_status
        if ecmp is not None:
          self.ecmp = ecmp
        if tag_keys is not None:
          self.tag_keys = tag_keys
        if tag_key_values is not None:
          self.tag_key_values = tag_key_values

    @property
    def entity_id(self):
        """
        Gets the entity_id of this NSXTTransportNode.
        Entity ID that can be references in detail API calls

        :return: The entity_id of this NSXTTransportNode.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this NSXTTransportNode.
        Entity ID that can be references in detail API calls

        :param entity_id: The entity_id of this NSXTTransportNode.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this NSXTTransportNode.
        Name of the object

        :return: The name of this NSXTTransportNode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NSXTTransportNode.
        Name of the object

        :param name: The name of this NSXTTransportNode.
        :type: str
        """

        self._name = name

    @property
    def entity_type(self):
        """
        Gets the entity_type of this NSXTTransportNode.

        :return: The entity_type of this NSXTTransportNode.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this NSXTTransportNode.

        :param entity_type: The entity_type of this NSXTTransportNode.
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def manager(self):
        """
        Gets the manager of this NSXTTransportNode.

        :return: The manager of this NSXTTransportNode.
        :rtype: Reference
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """
        Sets the manager of this NSXTTransportNode.

        :param manager: The manager of this NSXTTransportNode.
        :type: Reference
        """

        self._manager = manager

    @property
    def transport_zones(self):
        """
        Gets the transport_zones of this NSXTTransportNode.

        :return: The transport_zones of this NSXTTransportNode.
        :rtype: list[Reference]
        """
        return self._transport_zones

    @transport_zones.setter
    def transport_zones(self, transport_zones):
        """
        Sets the transport_zones of this NSXTTransportNode.

        :param transport_zones: The transport_zones of this NSXTTransportNode.
        :type: list[Reference]
        """

        self._transport_zones = transport_zones

    @property
    def fabric_node(self):
        """
        Gets the fabric_node of this NSXTTransportNode.

        :return: The fabric_node of this NSXTTransportNode.
        :rtype: Reference
        """
        return self._fabric_node

    @fabric_node.setter
    def fabric_node(self, fabric_node):
        """
        Sets the fabric_node of this NSXTTransportNode.

        :param fabric_node: The fabric_node of this NSXTTransportNode.
        :type: Reference
        """

        self._fabric_node = fabric_node

    @property
    def node_type(self):
        """
        Gets the node_type of this NSXTTransportNode.

        :return: The node_type of this NSXTTransportNode.
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """
        Sets the node_type of this NSXTTransportNode.

        :param node_type: The node_type of this NSXTTransportNode.
        :type: str
        """

        self._node_type = node_type

    @property
    def vsphere_distributed_switches(self):
        """
        Gets the vsphere_distributed_switches of this NSXTTransportNode.

        :return: The vsphere_distributed_switches of this NSXTTransportNode.
        :rtype: list[Reference]
        """
        return self._vsphere_distributed_switches

    @vsphere_distributed_switches.setter
    def vsphere_distributed_switches(self, vsphere_distributed_switches):
        """
        Sets the vsphere_distributed_switches of this NSXTTransportNode.

        :param vsphere_distributed_switches: The vsphere_distributed_switches of this NSXTTransportNode.
        :type: list[Reference]
        """

        self._vsphere_distributed_switches = vsphere_distributed_switches

    @property
    def rteps(self):
        """
        Gets the rteps of this NSXTTransportNode.

        :return: The rteps of this NSXTTransportNode.
        :rtype: list[Reference]
        """
        return self._rteps

    @rteps.setter
    def rteps(self, rteps):
        """
        Sets the rteps of this NSXTTransportNode.

        :param rteps: The rteps of this NSXTTransportNode.
        :type: list[Reference]
        """

        self._rteps = rteps

    @property
    def maintenance_mode(self):
        """
        Gets the maintenance_mode of this NSXTTransportNode.

        :return: The maintenance_mode of this NSXTTransportNode.
        :rtype: str
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """
        Sets the maintenance_mode of this NSXTTransportNode.

        :param maintenance_mode: The maintenance_mode of this NSXTTransportNode.
        :type: str
        """

        self._maintenance_mode = maintenance_mode

    @property
    def nsxt_edge_cluster(self):
        """
        Gets the nsxt_edge_cluster of this NSXTTransportNode.

        :return: The nsxt_edge_cluster of this NSXTTransportNode.
        :rtype: Reference
        """
        return self._nsxt_edge_cluster

    @nsxt_edge_cluster.setter
    def nsxt_edge_cluster(self, nsxt_edge_cluster):
        """
        Sets the nsxt_edge_cluster of this NSXTTransportNode.

        :param nsxt_edge_cluster: The nsxt_edge_cluster of this NSXTTransportNode.
        :type: Reference
        """

        self._nsxt_edge_cluster = nsxt_edge_cluster

    @property
    def ip_addresses(self):
        """
        Gets the ip_addresses of this NSXTTransportNode.

        :return: The ip_addresses of this NSXTTransportNode.
        :rtype: list[IpAddress]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """
        Sets the ip_addresses of this NSXTTransportNode.

        :param ip_addresses: The ip_addresses of this NSXTTransportNode.
        :type: list[IpAddress]
        """

        self._ip_addresses = ip_addresses

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this NSXTTransportNode.

        :return: The vendor_id of this NSXTTransportNode.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this NSXTTransportNode.

        :param vendor_id: The vendor_id of this NSXTTransportNode.
        :type: str
        """

        self._vendor_id = vendor_id

    @property
    def roll_up_status(self):
        """
        Gets the roll_up_status of this NSXTTransportNode.

        :return: The roll_up_status of this NSXTTransportNode.
        :rtype: str
        """
        return self._roll_up_status

    @roll_up_status.setter
    def roll_up_status(self, roll_up_status):
        """
        Sets the roll_up_status of this NSXTTransportNode.

        :param roll_up_status: The roll_up_status of this NSXTTransportNode.
        :type: str
        """

        self._roll_up_status = roll_up_status

    @property
    def management_status(self):
        """
        Gets the management_status of this NSXTTransportNode.

        :return: The management_status of this NSXTTransportNode.
        :rtype: str
        """
        return self._management_status

    @management_status.setter
    def management_status(self, management_status):
        """
        Sets the management_status of this NSXTTransportNode.

        :param management_status: The management_status of this NSXTTransportNode.
        :type: str
        """

        self._management_status = management_status

    @property
    def control_status(self):
        """
        Gets the control_status of this NSXTTransportNode.

        :return: The control_status of this NSXTTransportNode.
        :rtype: str
        """
        return self._control_status

    @control_status.setter
    def control_status(self, control_status):
        """
        Sets the control_status of this NSXTTransportNode.

        :param control_status: The control_status of this NSXTTransportNode.
        :type: str
        """

        self._control_status = control_status

    @property
    def pnic_status(self):
        """
        Gets the pnic_status of this NSXTTransportNode.

        :return: The pnic_status of this NSXTTransportNode.
        :rtype: str
        """
        return self._pnic_status

    @pnic_status.setter
    def pnic_status(self, pnic_status):
        """
        Sets the pnic_status of this NSXTTransportNode.

        :param pnic_status: The pnic_status of this NSXTTransportNode.
        :type: str
        """

        self._pnic_status = pnic_status

    @property
    def tunnel_status(self):
        """
        Gets the tunnel_status of this NSXTTransportNode.

        :return: The tunnel_status of this NSXTTransportNode.
        :rtype: str
        """
        return self._tunnel_status

    @tunnel_status.setter
    def tunnel_status(self, tunnel_status):
        """
        Sets the tunnel_status of this NSXTTransportNode.

        :param tunnel_status: The tunnel_status of this NSXTTransportNode.
        :type: str
        """

        self._tunnel_status = tunnel_status

    @property
    def deployment_type(self):
        """
        Gets the deployment_type of this NSXTTransportNode.

        :return: The deployment_type of this NSXTTransportNode.
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """
        Sets the deployment_type of this NSXTTransportNode.

        :param deployment_type: The deployment_type of this NSXTTransportNode.
        :type: str
        """

        self._deployment_type = deployment_type

    @property
    def node_status_property(self):
        """
        Gets the node_status_property of this NSXTTransportNode.

        :return: The node_status_property of this NSXTTransportNode.
        :rtype: NodeStatusProperty
        """
        return self._node_status_property

    @node_status_property.setter
    def node_status_property(self, node_status_property):
        """
        Sets the node_status_property of this NSXTTransportNode.

        :param node_status_property: The node_status_property of this NSXTTransportNode.
        :type: NodeStatusProperty
        """

        self._node_status_property = node_status_property

    @property
    def device(self):
        """
        Gets the device of this NSXTTransportNode.

        :return: The device of this NSXTTransportNode.
        :rtype: Reference
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this NSXTTransportNode.

        :param device: The device of this NSXTTransportNode.
        :type: Reference
        """

        self._device = device

    @property
    def deployment_status(self):
        """
        Gets the deployment_status of this NSXTTransportNode.

        :return: The deployment_status of this NSXTTransportNode.
        :rtype: str
        """
        return self._deployment_status

    @deployment_status.setter
    def deployment_status(self, deployment_status):
        """
        Sets the deployment_status of this NSXTTransportNode.

        :param deployment_status: The deployment_status of this NSXTTransportNode.
        :type: str
        """

        self._deployment_status = deployment_status

    @property
    def ecmp(self):
        """
        Gets the ecmp of this NSXTTransportNode.

        :return: The ecmp of this NSXTTransportNode.
        :rtype: str
        """
        return self._ecmp

    @ecmp.setter
    def ecmp(self, ecmp):
        """
        Sets the ecmp of this NSXTTransportNode.

        :param ecmp: The ecmp of this NSXTTransportNode.
        :type: str
        """

        self._ecmp = ecmp

    @property
    def tag_keys(self):
        """
        Gets the tag_keys of this NSXTTransportNode.

        :return: The tag_keys of this NSXTTransportNode.
        :rtype: list[str]
        """
        return self._tag_keys

    @tag_keys.setter
    def tag_keys(self, tag_keys):
        """
        Sets the tag_keys of this NSXTTransportNode.

        :param tag_keys: The tag_keys of this NSXTTransportNode.
        :type: list[str]
        """

        self._tag_keys = tag_keys

    @property
    def tag_key_values(self):
        """
        Gets the tag_key_values of this NSXTTransportNode.

        :return: The tag_key_values of this NSXTTransportNode.
        :rtype: list[str]
        """
        return self._tag_key_values

    @tag_key_values.setter
    def tag_key_values(self, tag_key_values):
        """
        Sets the tag_key_values of this NSXTTransportNode.

        :param tag_key_values: The tag_key_values of this NSXTTransportNode.
        :type: list[str]
        """

        self._tag_key_values = tag_key_values

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NSXTTransportNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
