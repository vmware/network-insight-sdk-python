# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ScheduleValue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recurrence_type': 'RecurrenceType',
        'time': 'str',
        'day_of_week': 'str',
        'day_of_month': 'str',
        'month': 'str',
        'year': 'str',
        'interval': 'int',
        'interval_type': 'IntervalType'
    }

    attribute_map = {
        'recurrence_type': 'recurrenceType',
        'time': 'time',
        'day_of_week': 'dayOfWeek',
        'day_of_month': 'dayOfMonth',
        'month': 'month',
        'year': 'year',
        'interval': 'interval',
        'interval_type': 'intervalType'
    }

    def __init__(self, recurrence_type=None, time=None, day_of_week=None, day_of_month=None, month=None, year=None, interval=None, interval_type=None):
        """
        ScheduleValue - a model defined in Swagger
        """

        self._recurrence_type = None
        self._time = None
        self._day_of_week = None
        self._day_of_month = None
        self._month = None
        self._year = None
        self._interval = None
        self._interval_type = None

        if recurrence_type is not None:
          self.recurrence_type = recurrence_type
        if time is not None:
          self.time = time
        if day_of_week is not None:
          self.day_of_week = day_of_week
        if day_of_month is not None:
          self.day_of_month = day_of_month
        if month is not None:
          self.month = month
        if year is not None:
          self.year = year
        if interval is not None:
          self.interval = interval
        if interval_type is not None:
          self.interval_type = interval_type

    @property
    def recurrence_type(self):
        """
        Gets the recurrence_type of this ScheduleValue.

        :return: The recurrence_type of this ScheduleValue.
        :rtype: RecurrenceType
        """
        return self._recurrence_type

    @recurrence_type.setter
    def recurrence_type(self, recurrence_type):
        """
        Sets the recurrence_type of this ScheduleValue.

        :param recurrence_type: The recurrence_type of this ScheduleValue.
        :type: RecurrenceType
        """

        self._recurrence_type = recurrence_type

    @property
    def time(self):
        """
        Gets the time of this ScheduleValue.
        Scheduled time (UTC) to be provided in the format Hours:Minutes (0-23:0-59)

        :return: The time of this ScheduleValue.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this ScheduleValue.
        Scheduled time (UTC) to be provided in the format Hours:Minutes (0-23:0-59)

        :param time: The time of this ScheduleValue.
        :type: str
        """

        self._time = time

    @property
    def day_of_week(self):
        """
        Gets the day_of_week of this ScheduleValue.
        DAY of the Week to be provided in the format  1-7 -> SUNDAY-SATURDAY

        :return: The day_of_week of this ScheduleValue.
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """
        Sets the day_of_week of this ScheduleValue.
        DAY of the Week to be provided in the format  1-7 -> SUNDAY-SATURDAY

        :param day_of_week: The day_of_week of this ScheduleValue.
        :type: str
        """

        self._day_of_week = day_of_week

    @property
    def day_of_month(self):
        """
        Gets the day_of_month of this ScheduleValue.
        Day of Month to be provided in the format 1-31

        :return: The day_of_month of this ScheduleValue.
        :rtype: str
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """
        Sets the day_of_month of this ScheduleValue.
        Day of Month to be provided in the format 1-31

        :param day_of_month: The day_of_month of this ScheduleValue.
        :type: str
        """

        self._day_of_month = day_of_month

    @property
    def month(self):
        """
        Gets the month of this ScheduleValue.
        Month to be provided in the format 1-12

        :return: The month of this ScheduleValue.
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """
        Sets the month of this ScheduleValue.
        Month to be provided in the format 1-12

        :param month: The month of this ScheduleValue.
        :type: str
        """

        self._month = month

    @property
    def year(self):
        """
        Gets the year of this ScheduleValue.
        Year to be provided in the format 2022

        :return: The year of this ScheduleValue.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """
        Sets the year of this ScheduleValue.
        Year to be provided in the format 2022

        :param year: The year of this ScheduleValue.
        :type: str
        """

        self._year = year

    @property
    def interval(self):
        """
        Gets the interval of this ScheduleValue.
        Interval at which CUSTOM RecurrenceType job to be run

        :return: The interval of this ScheduleValue.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """
        Sets the interval of this ScheduleValue.
        Interval at which CUSTOM RecurrenceType job to be run

        :param interval: The interval of this ScheduleValue.
        :type: int
        """

        self._interval = interval

    @property
    def interval_type(self):
        """
        Gets the interval_type of this ScheduleValue.

        :return: The interval_type of this ScheduleValue.
        :rtype: IntervalType
        """
        return self._interval_type

    @interval_type.setter
    def interval_type(self, interval_type):
        """
        Sets the interval_type of this ScheduleValue.

        :param interval_type: The interval_type of this ScheduleValue.
        :type: IntervalType
        """

        self._interval_type = interval_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ScheduleValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
