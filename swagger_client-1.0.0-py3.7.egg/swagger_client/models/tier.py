# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Tier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'entity_type': 'EntityType',
        'group_membership_criteria': 'list[GroupMembershipCriteria]',
        'application': 'Reference',
        'member_list': 'MemberList'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'entity_type': 'entity_type',
        'group_membership_criteria': 'group_membership_criteria',
        'application': 'application',
        'member_list': 'member_list'
    }

    def __init__(self, entity_id=None, name=None, entity_type=None, group_membership_criteria=None, application=None, member_list=None):
        """
        Tier - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._entity_type = None
        self._group_membership_criteria = None
        self._application = None
        self._member_list = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if entity_type is not None:
          self.entity_type = entity_type
        if group_membership_criteria is not None:
          self.group_membership_criteria = group_membership_criteria
        if application is not None:
          self.application = application
        if member_list is not None:
          self.member_list = member_list

    @property
    def entity_id(self):
        """
        Gets the entity_id of this Tier.
        Entity ID that can be references in detail API calls

        :return: The entity_id of this Tier.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this Tier.
        Entity ID that can be references in detail API calls

        :param entity_id: The entity_id of this Tier.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this Tier.
        Name of the object

        :return: The name of this Tier.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Tier.
        Name of the object

        :param name: The name of this Tier.
        :type: str
        """

        self._name = name

    @property
    def entity_type(self):
        """
        Gets the entity_type of this Tier.

        :return: The entity_type of this Tier.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this Tier.

        :param entity_type: The entity_type of this Tier.
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def group_membership_criteria(self):
        """
        Gets the group_membership_criteria of this Tier.

        :return: The group_membership_criteria of this Tier.
        :rtype: list[GroupMembershipCriteria]
        """
        return self._group_membership_criteria

    @group_membership_criteria.setter
    def group_membership_criteria(self, group_membership_criteria):
        """
        Sets the group_membership_criteria of this Tier.

        :param group_membership_criteria: The group_membership_criteria of this Tier.
        :type: list[GroupMembershipCriteria]
        """

        self._group_membership_criteria = group_membership_criteria

    @property
    def application(self):
        """
        Gets the application of this Tier.

        :return: The application of this Tier.
        :rtype: Reference
        """
        return self._application

    @application.setter
    def application(self, application):
        """
        Sets the application of this Tier.

        :param application: The application of this Tier.
        :type: Reference
        """

        self._application = application

    @property
    def member_list(self):
        """
        Gets the member_list of this Tier.

        :return: The member_list of this Tier.
        :rtype: MemberList
        """
        return self._member_list

    @member_list.setter
    def member_list(self, member_list):
        """
        Sets the member_list of this Tier.

        :param member_list: The member_list of this Tier.
        :type: MemberList
        """

        self._member_list = member_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Tier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
