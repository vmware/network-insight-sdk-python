# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BulkAddValidationError(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'row_no': 'str',
        'ip_or_fqdn': 'str',
        'column_name': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'row_no': 'row_no',
        'ip_or_fqdn': 'ip_or_fqdn',
        'column_name': 'column_name',
        'error_message': 'error_message'
    }

    def __init__(self, row_no=None, ip_or_fqdn=None, column_name=None, error_message=None):
        """
        BulkAddValidationError - a model defined in Swagger
        """

        self._row_no = None
        self._ip_or_fqdn = None
        self._column_name = None
        self._error_message = None

        if row_no is not None:
          self.row_no = row_no
        if ip_or_fqdn is not None:
          self.ip_or_fqdn = ip_or_fqdn
        if column_name is not None:
          self.column_name = column_name
        if error_message is not None:
          self.error_message = error_message

    @property
    def row_no(self):
        """
        Gets the row_no of this BulkAddValidationError.

        :return: The row_no of this BulkAddValidationError.
        :rtype: str
        """
        return self._row_no

    @row_no.setter
    def row_no(self, row_no):
        """
        Sets the row_no of this BulkAddValidationError.

        :param row_no: The row_no of this BulkAddValidationError.
        :type: str
        """

        self._row_no = row_no

    @property
    def ip_or_fqdn(self):
        """
        Gets the ip_or_fqdn of this BulkAddValidationError.

        :return: The ip_or_fqdn of this BulkAddValidationError.
        :rtype: str
        """
        return self._ip_or_fqdn

    @ip_or_fqdn.setter
    def ip_or_fqdn(self, ip_or_fqdn):
        """
        Sets the ip_or_fqdn of this BulkAddValidationError.

        :param ip_or_fqdn: The ip_or_fqdn of this BulkAddValidationError.
        :type: str
        """

        self._ip_or_fqdn = ip_or_fqdn

    @property
    def column_name(self):
        """
        Gets the column_name of this BulkAddValidationError.

        :return: The column_name of this BulkAddValidationError.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """
        Sets the column_name of this BulkAddValidationError.

        :param column_name: The column_name of this BulkAddValidationError.
        :type: str
        """

        self._column_name = column_name

    @property
    def error_message(self):
        """
        Gets the error_message of this BulkAddValidationError.

        :return: The error_message of this BulkAddValidationError.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this BulkAddValidationError.

        :param error_message: The error_message of this BulkAddValidationError.
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BulkAddValidationError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
