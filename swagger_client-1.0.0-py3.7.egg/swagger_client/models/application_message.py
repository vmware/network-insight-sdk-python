# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApplicationMessage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'specversion': 'str',
        'source': 'str',
        'message_group': 'str',
        'status': 'str',
        'deleted_at': 'int',
        'data': 'ApplicationMembersResponse'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'specversion': 'specversion',
        'source': 'source',
        'message_group': 'message_group',
        'status': 'status',
        'deleted_at': 'deleted_at',
        'data': 'data'
    }

    def __init__(self, id=None, type=None, specversion=None, source=None, message_group=None, status=None, deleted_at=None, data=None):
        """
        ApplicationMessage - a model defined in Swagger
        """

        self._id = None
        self._type = None
        self._specversion = None
        self._source = None
        self._message_group = None
        self._status = None
        self._deleted_at = None
        self._data = None

        if id is not None:
          self.id = id
        if type is not None:
          self.type = type
        if specversion is not None:
          self.specversion = specversion
        if source is not None:
          self.source = source
        if message_group is not None:
          self.message_group = message_group
        if status is not None:
          self.status = status
        if deleted_at is not None:
          self.deleted_at = deleted_at
        if data is not None:
          self.data = data

    @property
    def id(self):
        """
        Gets the id of this ApplicationMessage.

        :return: The id of this ApplicationMessage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ApplicationMessage.

        :param id: The id of this ApplicationMessage.
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this ApplicationMessage.

        :return: The type of this ApplicationMessage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ApplicationMessage.

        :param type: The type of this ApplicationMessage.
        :type: str
        """

        self._type = type

    @property
    def specversion(self):
        """
        Gets the specversion of this ApplicationMessage.

        :return: The specversion of this ApplicationMessage.
        :rtype: str
        """
        return self._specversion

    @specversion.setter
    def specversion(self, specversion):
        """
        Sets the specversion of this ApplicationMessage.

        :param specversion: The specversion of this ApplicationMessage.
        :type: str
        """

        self._specversion = specversion

    @property
    def source(self):
        """
        Gets the source of this ApplicationMessage.

        :return: The source of this ApplicationMessage.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this ApplicationMessage.

        :param source: The source of this ApplicationMessage.
        :type: str
        """

        self._source = source

    @property
    def message_group(self):
        """
        Gets the message_group of this ApplicationMessage.

        :return: The message_group of this ApplicationMessage.
        :rtype: str
        """
        return self._message_group

    @message_group.setter
    def message_group(self, message_group):
        """
        Sets the message_group of this ApplicationMessage.

        :param message_group: The message_group of this ApplicationMessage.
        :type: str
        """

        self._message_group = message_group

    @property
    def status(self):
        """
        Gets the status of this ApplicationMessage.

        :return: The status of this ApplicationMessage.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ApplicationMessage.

        :param status: The status of this ApplicationMessage.
        :type: str
        """
        allowed_values = ["OPEN", "CLOSE", "CREATE", "DELETE", "UPDATE", "INVENTORY", "HEARTBEAT", "OPEN_TRIMMED", "CLOSE_TRIMMED", "CREATE_TRIMMED", "DELETE_TRIMMED", "UPDATE_TRIMMED", "INVENTORY_TRIMMED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def deleted_at(self):
        """
        Gets the deleted_at of this ApplicationMessage.

        :return: The deleted_at of this ApplicationMessage.
        :rtype: int
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """
        Sets the deleted_at of this ApplicationMessage.

        :param deleted_at: The deleted_at of this ApplicationMessage.
        :type: int
        """

        self._deleted_at = deleted_at

    @property
    def data(self):
        """
        Gets the data of this ApplicationMessage.

        :return: The data of this ApplicationMessage.
        :rtype: ApplicationMembersResponse
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this ApplicationMessage.

        :param data: The data of this ApplicationMessage.
        :type: ApplicationMembersResponse
        """

        self._data = data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApplicationMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
