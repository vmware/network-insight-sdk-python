# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AppWithTiersRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'entity_id': 'str',
        'source_group_entity_id': 'list[str]',
        'enable_intent': 'bool',
        'tiers': 'list[TierRequest]'
    }

    attribute_map = {
        'name': 'name',
        'entity_id': 'entity_id',
        'source_group_entity_id': 'source_group_entity_id',
        'enable_intent': 'enable_intent',
        'tiers': 'tiers'
    }

    def __init__(self, name=None, entity_id=None, source_group_entity_id=None, enable_intent=True, tiers=None):
        """
        AppWithTiersRequest - a model defined in Swagger
        """

        self._name = None
        self._entity_id = None
        self._source_group_entity_id = None
        self._enable_intent = None
        self._tiers = None

        if name is not None:
          self.name = name
        if entity_id is not None:
          self.entity_id = entity_id
        if source_group_entity_id is not None:
          self.source_group_entity_id = source_group_entity_id
        if enable_intent is not None:
          self.enable_intent = enable_intent
        if tiers is not None:
          self.tiers = tiers

    @property
    def name(self):
        """
        Gets the name of this AppWithTiersRequest.

        :return: The name of this AppWithTiersRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AppWithTiersRequest.

        :param name: The name of this AppWithTiersRequest.
        :type: str
        """

        self._name = name

    @property
    def entity_id(self):
        """
        Gets the entity_id of this AppWithTiersRequest.

        :return: The entity_id of this AppWithTiersRequest.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this AppWithTiersRequest.

        :param entity_id: The entity_id of this AppWithTiersRequest.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def source_group_entity_id(self):
        """
        Gets the source_group_entity_id of this AppWithTiersRequest.
        Entity ID of corresponding discovered application. It's recommended to not merge tiers and use only one source group.

        :return: The source_group_entity_id of this AppWithTiersRequest.
        :rtype: list[str]
        """
        return self._source_group_entity_id

    @source_group_entity_id.setter
    def source_group_entity_id(self, source_group_entity_id):
        """
        Sets the source_group_entity_id of this AppWithTiersRequest.
        Entity ID of corresponding discovered application. It's recommended to not merge tiers and use only one source group.

        :param source_group_entity_id: The source_group_entity_id of this AppWithTiersRequest.
        :type: list[str]
        """

        self._source_group_entity_id = source_group_entity_id

    @property
    def enable_intent(self):
        """
        Gets the enable_intent of this AppWithTiersRequest.
        Enabling intent will enable 2 intents which will creates a dynamic threshold configuration that analyses \"Application flow health\" and \"Application flow utilization\" for all VMs belonging to the application at tier level and generates alerts if violation is detected for any of them based on their historic behavior.

        :return: The enable_intent of this AppWithTiersRequest.
        :rtype: bool
        """
        return self._enable_intent

    @enable_intent.setter
    def enable_intent(self, enable_intent):
        """
        Sets the enable_intent of this AppWithTiersRequest.
        Enabling intent will enable 2 intents which will creates a dynamic threshold configuration that analyses \"Application flow health\" and \"Application flow utilization\" for all VMs belonging to the application at tier level and generates alerts if violation is detected for any of them based on their historic behavior.

        :param enable_intent: The enable_intent of this AppWithTiersRequest.
        :type: bool
        """

        self._enable_intent = enable_intent

    @property
    def tiers(self):
        """
        Gets the tiers of this AppWithTiersRequest.

        :return: The tiers of this AppWithTiersRequest.
        :rtype: list[TierRequest]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """
        Sets the tiers of this AppWithTiersRequest.

        :param tiers: The tiers of this AppWithTiersRequest.
        :type: list[TierRequest]
        """

        self._tiers = tiers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AppWithTiersRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
