# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConfigDataFilter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'snmp': 'bool',
        'smtp': 'bool',
        'web_proxy': 'bool',
        'data_sources': 'bool',
        'events': 'bool',
        'syslog': 'bool',
        'ldap': 'bool',
        'vidm': 'bool',
        'user_data': 'bool',
        'physical_subnet_vlan': 'bool',
        'physical_ip_dns_mapping': 'bool',
        'system_configuration': 'bool',
        'east_west_ip': 'bool',
        'north_south_ip': 'bool',
        'data_management': 'bool',
        'online_update_status': 'bool',
        'ceip_status': 'bool',
        'audit_logs_pii_status': 'bool',
        'applications': 'bool',
        'analytics_outliers': 'bool',
        'analytics_thresholds': 'bool',
        'custom_dashboards': 'bool'
    }

    attribute_map = {
        'snmp': 'snmp',
        'smtp': 'smtp',
        'web_proxy': 'web_proxy',
        'data_sources': 'data_sources',
        'events': 'events',
        'syslog': 'syslog',
        'ldap': 'ldap',
        'vidm': 'vidm',
        'user_data': 'user_data',
        'physical_subnet_vlan': 'physical_subnet_vlan',
        'physical_ip_dns_mapping': 'physical_ip_dns_mapping',
        'system_configuration': 'system_configuration',
        'east_west_ip': 'east_west_ip',
        'north_south_ip': 'north_south_ip',
        'data_management': 'data_management',
        'online_update_status': 'online_update_status',
        'ceip_status': 'ceip_status',
        'audit_logs_pii_status': 'audit_logs_pii_status',
        'applications': 'applications',
        'analytics_outliers': 'analytics_outliers',
        'analytics_thresholds': 'analytics_thresholds',
        'custom_dashboards': 'custom_dashboards'
    }

    def __init__(self, snmp=True, smtp=True, web_proxy=True, data_sources=True, events=True, syslog=True, ldap=True, vidm=True, user_data=True, physical_subnet_vlan=True, physical_ip_dns_mapping=True, system_configuration=True, east_west_ip=True, north_south_ip=True, data_management=True, online_update_status=True, ceip_status=True, audit_logs_pii_status=True, applications=False, analytics_outliers=False, analytics_thresholds=False, custom_dashboards=False):
        """
        ConfigDataFilter - a model defined in Swagger
        """

        self._snmp = None
        self._smtp = None
        self._web_proxy = None
        self._data_sources = None
        self._events = None
        self._syslog = None
        self._ldap = None
        self._vidm = None
        self._user_data = None
        self._physical_subnet_vlan = None
        self._physical_ip_dns_mapping = None
        self._system_configuration = None
        self._east_west_ip = None
        self._north_south_ip = None
        self._data_management = None
        self._online_update_status = None
        self._ceip_status = None
        self._audit_logs_pii_status = None
        self._applications = None
        self._analytics_outliers = None
        self._analytics_thresholds = None
        self._custom_dashboards = None

        if snmp is not None:
          self.snmp = snmp
        if smtp is not None:
          self.smtp = smtp
        if web_proxy is not None:
          self.web_proxy = web_proxy
        if data_sources is not None:
          self.data_sources = data_sources
        if events is not None:
          self.events = events
        if syslog is not None:
          self.syslog = syslog
        if ldap is not None:
          self.ldap = ldap
        if vidm is not None:
          self.vidm = vidm
        if user_data is not None:
          self.user_data = user_data
        if physical_subnet_vlan is not None:
          self.physical_subnet_vlan = physical_subnet_vlan
        if physical_ip_dns_mapping is not None:
          self.physical_ip_dns_mapping = physical_ip_dns_mapping
        if system_configuration is not None:
          self.system_configuration = system_configuration
        if east_west_ip is not None:
          self.east_west_ip = east_west_ip
        if north_south_ip is not None:
          self.north_south_ip = north_south_ip
        if data_management is not None:
          self.data_management = data_management
        if online_update_status is not None:
          self.online_update_status = online_update_status
        if ceip_status is not None:
          self.ceip_status = ceip_status
        if audit_logs_pii_status is not None:
          self.audit_logs_pii_status = audit_logs_pii_status
        if applications is not None:
          self.applications = applications
        if analytics_outliers is not None:
          self.analytics_outliers = analytics_outliers
        if analytics_thresholds is not None:
          self.analytics_thresholds = analytics_thresholds
        if custom_dashboards is not None:
          self.custom_dashboards = custom_dashboards

    @property
    def snmp(self):
        """
        Gets the snmp of this ConfigDataFilter.

        :return: The snmp of this ConfigDataFilter.
        :rtype: bool
        """
        return self._snmp

    @snmp.setter
    def snmp(self, snmp):
        """
        Sets the snmp of this ConfigDataFilter.

        :param snmp: The snmp of this ConfigDataFilter.
        :type: bool
        """

        self._snmp = snmp

    @property
    def smtp(self):
        """
        Gets the smtp of this ConfigDataFilter.

        :return: The smtp of this ConfigDataFilter.
        :rtype: bool
        """
        return self._smtp

    @smtp.setter
    def smtp(self, smtp):
        """
        Sets the smtp of this ConfigDataFilter.

        :param smtp: The smtp of this ConfigDataFilter.
        :type: bool
        """

        self._smtp = smtp

    @property
    def web_proxy(self):
        """
        Gets the web_proxy of this ConfigDataFilter.

        :return: The web_proxy of this ConfigDataFilter.
        :rtype: bool
        """
        return self._web_proxy

    @web_proxy.setter
    def web_proxy(self, web_proxy):
        """
        Sets the web_proxy of this ConfigDataFilter.

        :param web_proxy: The web_proxy of this ConfigDataFilter.
        :type: bool
        """

        self._web_proxy = web_proxy

    @property
    def data_sources(self):
        """
        Gets the data_sources of this ConfigDataFilter.

        :return: The data_sources of this ConfigDataFilter.
        :rtype: bool
        """
        return self._data_sources

    @data_sources.setter
    def data_sources(self, data_sources):
        """
        Sets the data_sources of this ConfigDataFilter.

        :param data_sources: The data_sources of this ConfigDataFilter.
        :type: bool
        """

        self._data_sources = data_sources

    @property
    def events(self):
        """
        Gets the events of this ConfigDataFilter.

        :return: The events of this ConfigDataFilter.
        :rtype: bool
        """
        return self._events

    @events.setter
    def events(self, events):
        """
        Sets the events of this ConfigDataFilter.

        :param events: The events of this ConfigDataFilter.
        :type: bool
        """

        self._events = events

    @property
    def syslog(self):
        """
        Gets the syslog of this ConfigDataFilter.

        :return: The syslog of this ConfigDataFilter.
        :rtype: bool
        """
        return self._syslog

    @syslog.setter
    def syslog(self, syslog):
        """
        Sets the syslog of this ConfigDataFilter.

        :param syslog: The syslog of this ConfigDataFilter.
        :type: bool
        """

        self._syslog = syslog

    @property
    def ldap(self):
        """
        Gets the ldap of this ConfigDataFilter.

        :return: The ldap of this ConfigDataFilter.
        :rtype: bool
        """
        return self._ldap

    @ldap.setter
    def ldap(self, ldap):
        """
        Sets the ldap of this ConfigDataFilter.

        :param ldap: The ldap of this ConfigDataFilter.
        :type: bool
        """

        self._ldap = ldap

    @property
    def vidm(self):
        """
        Gets the vidm of this ConfigDataFilter.

        :return: The vidm of this ConfigDataFilter.
        :rtype: bool
        """
        return self._vidm

    @vidm.setter
    def vidm(self, vidm):
        """
        Sets the vidm of this ConfigDataFilter.

        :param vidm: The vidm of this ConfigDataFilter.
        :type: bool
        """

        self._vidm = vidm

    @property
    def user_data(self):
        """
        Gets the user_data of this ConfigDataFilter.

        :return: The user_data of this ConfigDataFilter.
        :rtype: bool
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """
        Sets the user_data of this ConfigDataFilter.

        :param user_data: The user_data of this ConfigDataFilter.
        :type: bool
        """

        self._user_data = user_data

    @property
    def physical_subnet_vlan(self):
        """
        Gets the physical_subnet_vlan of this ConfigDataFilter.

        :return: The physical_subnet_vlan of this ConfigDataFilter.
        :rtype: bool
        """
        return self._physical_subnet_vlan

    @physical_subnet_vlan.setter
    def physical_subnet_vlan(self, physical_subnet_vlan):
        """
        Sets the physical_subnet_vlan of this ConfigDataFilter.

        :param physical_subnet_vlan: The physical_subnet_vlan of this ConfigDataFilter.
        :type: bool
        """

        self._physical_subnet_vlan = physical_subnet_vlan

    @property
    def physical_ip_dns_mapping(self):
        """
        Gets the physical_ip_dns_mapping of this ConfigDataFilter.

        :return: The physical_ip_dns_mapping of this ConfigDataFilter.
        :rtype: bool
        """
        return self._physical_ip_dns_mapping

    @physical_ip_dns_mapping.setter
    def physical_ip_dns_mapping(self, physical_ip_dns_mapping):
        """
        Sets the physical_ip_dns_mapping of this ConfigDataFilter.

        :param physical_ip_dns_mapping: The physical_ip_dns_mapping of this ConfigDataFilter.
        :type: bool
        """

        self._physical_ip_dns_mapping = physical_ip_dns_mapping

    @property
    def system_configuration(self):
        """
        Gets the system_configuration of this ConfigDataFilter.

        :return: The system_configuration of this ConfigDataFilter.
        :rtype: bool
        """
        return self._system_configuration

    @system_configuration.setter
    def system_configuration(self, system_configuration):
        """
        Sets the system_configuration of this ConfigDataFilter.

        :param system_configuration: The system_configuration of this ConfigDataFilter.
        :type: bool
        """

        self._system_configuration = system_configuration

    @property
    def east_west_ip(self):
        """
        Gets the east_west_ip of this ConfigDataFilter.

        :return: The east_west_ip of this ConfigDataFilter.
        :rtype: bool
        """
        return self._east_west_ip

    @east_west_ip.setter
    def east_west_ip(self, east_west_ip):
        """
        Sets the east_west_ip of this ConfigDataFilter.

        :param east_west_ip: The east_west_ip of this ConfigDataFilter.
        :type: bool
        """

        self._east_west_ip = east_west_ip

    @property
    def north_south_ip(self):
        """
        Gets the north_south_ip of this ConfigDataFilter.

        :return: The north_south_ip of this ConfigDataFilter.
        :rtype: bool
        """
        return self._north_south_ip

    @north_south_ip.setter
    def north_south_ip(self, north_south_ip):
        """
        Sets the north_south_ip of this ConfigDataFilter.

        :param north_south_ip: The north_south_ip of this ConfigDataFilter.
        :type: bool
        """

        self._north_south_ip = north_south_ip

    @property
    def data_management(self):
        """
        Gets the data_management of this ConfigDataFilter.

        :return: The data_management of this ConfigDataFilter.
        :rtype: bool
        """
        return self._data_management

    @data_management.setter
    def data_management(self, data_management):
        """
        Sets the data_management of this ConfigDataFilter.

        :param data_management: The data_management of this ConfigDataFilter.
        :type: bool
        """

        self._data_management = data_management

    @property
    def online_update_status(self):
        """
        Gets the online_update_status of this ConfigDataFilter.

        :return: The online_update_status of this ConfigDataFilter.
        :rtype: bool
        """
        return self._online_update_status

    @online_update_status.setter
    def online_update_status(self, online_update_status):
        """
        Sets the online_update_status of this ConfigDataFilter.

        :param online_update_status: The online_update_status of this ConfigDataFilter.
        :type: bool
        """

        self._online_update_status = online_update_status

    @property
    def ceip_status(self):
        """
        Gets the ceip_status of this ConfigDataFilter.

        :return: The ceip_status of this ConfigDataFilter.
        :rtype: bool
        """
        return self._ceip_status

    @ceip_status.setter
    def ceip_status(self, ceip_status):
        """
        Sets the ceip_status of this ConfigDataFilter.

        :param ceip_status: The ceip_status of this ConfigDataFilter.
        :type: bool
        """

        self._ceip_status = ceip_status

    @property
    def audit_logs_pii_status(self):
        """
        Gets the audit_logs_pii_status of this ConfigDataFilter.

        :return: The audit_logs_pii_status of this ConfigDataFilter.
        :rtype: bool
        """
        return self._audit_logs_pii_status

    @audit_logs_pii_status.setter
    def audit_logs_pii_status(self, audit_logs_pii_status):
        """
        Sets the audit_logs_pii_status of this ConfigDataFilter.

        :param audit_logs_pii_status: The audit_logs_pii_status of this ConfigDataFilter.
        :type: bool
        """

        self._audit_logs_pii_status = audit_logs_pii_status

    @property
    def applications(self):
        """
        Gets the applications of this ConfigDataFilter.

        :return: The applications of this ConfigDataFilter.
        :rtype: bool
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """
        Sets the applications of this ConfigDataFilter.

        :param applications: The applications of this ConfigDataFilter.
        :type: bool
        """

        self._applications = applications

    @property
    def analytics_outliers(self):
        """
        Gets the analytics_outliers of this ConfigDataFilter.

        :return: The analytics_outliers of this ConfigDataFilter.
        :rtype: bool
        """
        return self._analytics_outliers

    @analytics_outliers.setter
    def analytics_outliers(self, analytics_outliers):
        """
        Sets the analytics_outliers of this ConfigDataFilter.

        :param analytics_outliers: The analytics_outliers of this ConfigDataFilter.
        :type: bool
        """

        self._analytics_outliers = analytics_outliers

    @property
    def analytics_thresholds(self):
        """
        Gets the analytics_thresholds of this ConfigDataFilter.

        :return: The analytics_thresholds of this ConfigDataFilter.
        :rtype: bool
        """
        return self._analytics_thresholds

    @analytics_thresholds.setter
    def analytics_thresholds(self, analytics_thresholds):
        """
        Sets the analytics_thresholds of this ConfigDataFilter.

        :param analytics_thresholds: The analytics_thresholds of this ConfigDataFilter.
        :type: bool
        """

        self._analytics_thresholds = analytics_thresholds

    @property
    def custom_dashboards(self):
        """
        Gets the custom_dashboards of this ConfigDataFilter.

        :return: The custom_dashboards of this ConfigDataFilter.
        :rtype: bool
        """
        return self._custom_dashboards

    @custom_dashboards.setter
    def custom_dashboards(self, custom_dashboards):
        """
        Sets the custom_dashboards of this ConfigDataFilter.

        :param custom_dashboards: The custom_dashboards of this ConfigDataFilter.
        :type: bool
        """

        self._custom_dashboards = custom_dashboards

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConfigDataFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
