# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IntentNotification(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'frequency': 'str',
        'enabled': 'bool',
        'receivers': 'list[str]',
        'schedule': 'list[IntentNotifySchedule]'
    }

    attribute_map = {
        'type': 'type',
        'frequency': 'frequency',
        'enabled': 'enabled',
        'receivers': 'receivers',
        'schedule': 'schedule'
    }

    def __init__(self, type=None, frequency=None, enabled=None, receivers=None, schedule=None):
        """
        IntentNotification - a model defined in Swagger
        """

        self._type = None
        self._frequency = None
        self._enabled = None
        self._receivers = None
        self._schedule = None

        if type is not None:
          self.type = type
        if frequency is not None:
          self.frequency = frequency
        if enabled is not None:
          self.enabled = enabled
        if receivers is not None:
          self.receivers = receivers
        if schedule is not None:
          self.schedule = schedule

    @property
    def type(self):
        """
        Gets the type of this IntentNotification.
        Intent type

        :return: The type of this IntentNotification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this IntentNotification.
        Intent type

        :param type: The type of this IntentNotification.
        :type: str
        """
        allowed_values = ["EMAIL", "SNMP_TRAP", "PUSH_NOTIFICATION"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def frequency(self):
        """
        Gets the frequency of this IntentNotification.
        Intent freq

        :return: The frequency of this IntentNotification.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """
        Sets the frequency of this IntentNotification.
        Intent freq

        :param frequency: The frequency of this IntentNotification.
        :type: str
        """
        allowed_values = ["IMMEDIATE", "DAILY"]
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def enabled(self):
        """
        Gets the enabled of this IntentNotification.

        :return: The enabled of this IntentNotification.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this IntentNotification.

        :param enabled: The enabled of this IntentNotification.
        :type: bool
        """

        self._enabled = enabled

    @property
    def receivers(self):
        """
        Gets the receivers of this IntentNotification.

        :return: The receivers of this IntentNotification.
        :rtype: list[str]
        """
        return self._receivers

    @receivers.setter
    def receivers(self, receivers):
        """
        Sets the receivers of this IntentNotification.

        :param receivers: The receivers of this IntentNotification.
        :type: list[str]
        """

        self._receivers = receivers

    @property
    def schedule(self):
        """
        Gets the schedule of this IntentNotification.

        :return: The schedule of this IntentNotification.
        :rtype: list[IntentNotifySchedule]
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this IntentNotification.

        :param schedule: The schedule of this IntentNotification.
        :type: list[IntentNotifySchedule]
        """

        self._schedule = schedule

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IntentNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
