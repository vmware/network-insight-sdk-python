# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RouterInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'entity_type': 'EntityType',
        'operational_status': 'str',
        'administrative_status': 'str',
        'internal_vrf': 'Reference',
        'duplex': 'str',
        'connected': 'bool',
        'physical_address': 'str',
        'vrf': 'Reference',
        'l2n': 'Reference',
        'ip_addresses': 'list[IpAddress]',
        'sub_interface': 'bool',
        'router_port_type': 'str',
        'u_rpf_mode': 'str',
        'manager': 'Reference'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'entity_type': 'entity_type',
        'operational_status': 'operationalStatus',
        'administrative_status': 'administrativeStatus',
        'internal_vrf': 'internalVrf',
        'duplex': 'duplex',
        'connected': 'connected',
        'physical_address': 'physicalAddress',
        'vrf': 'vrf',
        'l2n': 'l2n',
        'ip_addresses': 'ip_addresses',
        'sub_interface': 'subInterface',
        'router_port_type': 'routerPortType',
        'u_rpf_mode': 'uRPFMode',
        'manager': 'manager'
    }

    def __init__(self, entity_id=None, name=None, entity_type=None, operational_status=None, administrative_status=None, internal_vrf=None, duplex=None, connected=None, physical_address=None, vrf=None, l2n=None, ip_addresses=None, sub_interface=None, router_port_type=None, u_rpf_mode=None, manager=None):
        """
        RouterInterface - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._entity_type = None
        self._operational_status = None
        self._administrative_status = None
        self._internal_vrf = None
        self._duplex = None
        self._connected = None
        self._physical_address = None
        self._vrf = None
        self._l2n = None
        self._ip_addresses = None
        self._sub_interface = None
        self._router_port_type = None
        self._u_rpf_mode = None
        self._manager = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if entity_type is not None:
          self.entity_type = entity_type
        if operational_status is not None:
          self.operational_status = operational_status
        if administrative_status is not None:
          self.administrative_status = administrative_status
        if internal_vrf is not None:
          self.internal_vrf = internal_vrf
        if duplex is not None:
          self.duplex = duplex
        if connected is not None:
          self.connected = connected
        if physical_address is not None:
          self.physical_address = physical_address
        if vrf is not None:
          self.vrf = vrf
        if l2n is not None:
          self.l2n = l2n
        if ip_addresses is not None:
          self.ip_addresses = ip_addresses
        if sub_interface is not None:
          self.sub_interface = sub_interface
        if router_port_type is not None:
          self.router_port_type = router_port_type
        if u_rpf_mode is not None:
          self.u_rpf_mode = u_rpf_mode
        if manager is not None:
          self.manager = manager

    @property
    def entity_id(self):
        """
        Gets the entity_id of this RouterInterface.
        Entity ID that can be references in detail API calls

        :return: The entity_id of this RouterInterface.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this RouterInterface.
        Entity ID that can be references in detail API calls

        :param entity_id: The entity_id of this RouterInterface.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this RouterInterface.
        Name of the object

        :return: The name of this RouterInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RouterInterface.
        Name of the object

        :param name: The name of this RouterInterface.
        :type: str
        """

        self._name = name

    @property
    def entity_type(self):
        """
        Gets the entity_type of this RouterInterface.

        :return: The entity_type of this RouterInterface.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this RouterInterface.

        :param entity_type: The entity_type of this RouterInterface.
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def operational_status(self):
        """
        Gets the operational_status of this RouterInterface.
        Operational status

        :return: The operational_status of this RouterInterface.
        :rtype: str
        """
        return self._operational_status

    @operational_status.setter
    def operational_status(self, operational_status):
        """
        Sets the operational_status of this RouterInterface.
        Operational status

        :param operational_status: The operational_status of this RouterInterface.
        :type: str
        """

        self._operational_status = operational_status

    @property
    def administrative_status(self):
        """
        Gets the administrative_status of this RouterInterface.
        Administrative status

        :return: The administrative_status of this RouterInterface.
        :rtype: str
        """
        return self._administrative_status

    @administrative_status.setter
    def administrative_status(self, administrative_status):
        """
        Sets the administrative_status of this RouterInterface.
        Administrative status

        :param administrative_status: The administrative_status of this RouterInterface.
        :type: str
        """

        self._administrative_status = administrative_status

    @property
    def internal_vrf(self):
        """
        Gets the internal_vrf of this RouterInterface.

        :return: The internal_vrf of this RouterInterface.
        :rtype: Reference
        """
        return self._internal_vrf

    @internal_vrf.setter
    def internal_vrf(self, internal_vrf):
        """
        Sets the internal_vrf of this RouterInterface.

        :param internal_vrf: The internal_vrf of this RouterInterface.
        :type: Reference
        """

        self._internal_vrf = internal_vrf

    @property
    def duplex(self):
        """
        Gets the duplex of this RouterInterface.
        duplex

        :return: The duplex of this RouterInterface.
        :rtype: str
        """
        return self._duplex

    @duplex.setter
    def duplex(self, duplex):
        """
        Sets the duplex of this RouterInterface.
        duplex

        :param duplex: The duplex of this RouterInterface.
        :type: str
        """

        self._duplex = duplex

    @property
    def connected(self):
        """
        Gets the connected of this RouterInterface.
        connected

        :return: The connected of this RouterInterface.
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """
        Sets the connected of this RouterInterface.
        connected

        :param connected: The connected of this RouterInterface.
        :type: bool
        """

        self._connected = connected

    @property
    def physical_address(self):
        """
        Gets the physical_address of this RouterInterface.
        physicalAddress

        :return: The physical_address of this RouterInterface.
        :rtype: str
        """
        return self._physical_address

    @physical_address.setter
    def physical_address(self, physical_address):
        """
        Sets the physical_address of this RouterInterface.
        physicalAddress

        :param physical_address: The physical_address of this RouterInterface.
        :type: str
        """

        self._physical_address = physical_address

    @property
    def vrf(self):
        """
        Gets the vrf of this RouterInterface.

        :return: The vrf of this RouterInterface.
        :rtype: Reference
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """
        Sets the vrf of this RouterInterface.

        :param vrf: The vrf of this RouterInterface.
        :type: Reference
        """

        self._vrf = vrf

    @property
    def l2n(self):
        """
        Gets the l2n of this RouterInterface.

        :return: The l2n of this RouterInterface.
        :rtype: Reference
        """
        return self._l2n

    @l2n.setter
    def l2n(self, l2n):
        """
        Sets the l2n of this RouterInterface.

        :param l2n: The l2n of this RouterInterface.
        :type: Reference
        """

        self._l2n = l2n

    @property
    def ip_addresses(self):
        """
        Gets the ip_addresses of this RouterInterface.

        :return: The ip_addresses of this RouterInterface.
        :rtype: list[IpAddress]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """
        Sets the ip_addresses of this RouterInterface.

        :param ip_addresses: The ip_addresses of this RouterInterface.
        :type: list[IpAddress]
        """

        self._ip_addresses = ip_addresses

    @property
    def sub_interface(self):
        """
        Gets the sub_interface of this RouterInterface.
        Boolean flag to indicate Sub Interface.

        :return: The sub_interface of this RouterInterface.
        :rtype: bool
        """
        return self._sub_interface

    @sub_interface.setter
    def sub_interface(self, sub_interface):
        """
        Sets the sub_interface of this RouterInterface.
        Boolean flag to indicate Sub Interface.

        :param sub_interface: The sub_interface of this RouterInterface.
        :type: bool
        """

        self._sub_interface = sub_interface

    @property
    def router_port_type(self):
        """
        Gets the router_port_type of this RouterInterface.
        Router Port Type

        :return: The router_port_type of this RouterInterface.
        :rtype: str
        """
        return self._router_port_type

    @router_port_type.setter
    def router_port_type(self, router_port_type):
        """
        Sets the router_port_type of this RouterInterface.
        Router Port Type

        :param router_port_type: The router_port_type of this RouterInterface.
        :type: str
        """

        self._router_port_type = router_port_type

    @property
    def u_rpf_mode(self):
        """
        Gets the u_rpf_mode of this RouterInterface.
        uRPFMode

        :return: The u_rpf_mode of this RouterInterface.
        :rtype: str
        """
        return self._u_rpf_mode

    @u_rpf_mode.setter
    def u_rpf_mode(self, u_rpf_mode):
        """
        Sets the u_rpf_mode of this RouterInterface.
        uRPFMode

        :param u_rpf_mode: The u_rpf_mode of this RouterInterface.
        :type: str
        """

        self._u_rpf_mode = u_rpf_mode

    @property
    def manager(self):
        """
        Gets the manager of this RouterInterface.

        :return: The manager of this RouterInterface.
        :rtype: Reference
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """
        Sets the manager of this RouterInterface.

        :param manager: The manager of this RouterInterface.
        :type: Reference
        """

        self._manager = manager

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RouterInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
