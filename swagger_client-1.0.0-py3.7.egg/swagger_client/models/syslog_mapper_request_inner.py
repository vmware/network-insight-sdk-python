# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SyslogMapperRequestInner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'syslog_source': 'str',
        'collector_id': 'str',
        'syslog_ip': 'str'
    }

    attribute_map = {
        'syslog_source': 'syslog_source',
        'collector_id': 'collector_id',
        'syslog_ip': 'syslog_ip'
    }

    def __init__(self, syslog_source=None, collector_id=None, syslog_ip=None):
        """
        SyslogMapperRequestInner - a model defined in Swagger
        """

        self._syslog_source = None
        self._collector_id = None
        self._syslog_ip = None

        if syslog_source is not None:
          self.syslog_source = syslog_source
        if collector_id is not None:
          self.collector_id = collector_id
        if syslog_ip is not None:
          self.syslog_ip = syslog_ip

    @property
    def syslog_source(self):
        """
        Gets the syslog_source of this SyslogMapperRequestInner.
        syslog_source can be platform, collector, niEvents, auditLogs

        :return: The syslog_source of this SyslogMapperRequestInner.
        :rtype: str
        """
        return self._syslog_source

    @syslog_source.setter
    def syslog_source(self, syslog_source):
        """
        Sets the syslog_source of this SyslogMapperRequestInner.
        syslog_source can be platform, collector, niEvents, auditLogs

        :param syslog_source: The syslog_source of this SyslogMapperRequestInner.
        :type: str
        """

        self._syslog_source = syslog_source

    @property
    def collector_id(self):
        """
        Gets the collector_id of this SyslogMapperRequestInner.
        Id of the collector node.

        :return: The collector_id of this SyslogMapperRequestInner.
        :rtype: str
        """
        return self._collector_id

    @collector_id.setter
    def collector_id(self, collector_id):
        """
        Sets the collector_id of this SyslogMapperRequestInner.
        Id of the collector node.

        :param collector_id: The collector_id of this SyslogMapperRequestInner.
        :type: str
        """

        self._collector_id = collector_id

    @property
    def syslog_ip(self):
        """
        Gets the syslog_ip of this SyslogMapperRequestInner.
        ip address of the syslog server

        :return: The syslog_ip of this SyslogMapperRequestInner.
        :rtype: str
        """
        return self._syslog_ip

    @syslog_ip.setter
    def syslog_ip(self, syslog_ip):
        """
        Sets the syslog_ip of this SyslogMapperRequestInner.
        ip address of the syslog server

        :param syslog_ip: The syslog_ip of this SyslogMapperRequestInner.
        :type: str
        """

        self._syslog_ip = syslog_ip

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SyslogMapperRequestInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
