# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MetricResponseForEntityV2(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamps': 'list[int]',
        'values': 'list[float]',
        'entity_id': 'str'
    }

    attribute_map = {
        'timestamps': 'timestamps',
        'values': 'values',
        'entity_id': 'entity_id'
    }

    def __init__(self, timestamps=None, values=None, entity_id=None):
        """
        MetricResponseForEntityV2 - a model defined in Swagger
        """

        self._timestamps = None
        self._values = None
        self._entity_id = None

        if timestamps is not None:
          self.timestamps = timestamps
        if values is not None:
          self.values = values
        if entity_id is not None:
          self.entity_id = entity_id

    @property
    def timestamps(self):
        """
        Gets the timestamps of this MetricResponseForEntityV2.

        :return: The timestamps of this MetricResponseForEntityV2.
        :rtype: list[int]
        """
        return self._timestamps

    @timestamps.setter
    def timestamps(self, timestamps):
        """
        Sets the timestamps of this MetricResponseForEntityV2.

        :param timestamps: The timestamps of this MetricResponseForEntityV2.
        :type: list[int]
        """

        self._timestamps = timestamps

    @property
    def values(self):
        """
        Gets the values of this MetricResponseForEntityV2.

        :return: The values of this MetricResponseForEntityV2.
        :rtype: list[float]
        """
        return self._values

    @values.setter
    def values(self, values):
        """
        Sets the values of this MetricResponseForEntityV2.

        :param values: The values of this MetricResponseForEntityV2.
        :type: list[float]
        """

        self._values = values

    @property
    def entity_id(self):
        """
        Gets the entity_id of this MetricResponseForEntityV2.

        :return: The entity_id of this MetricResponseForEntityV2.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this MetricResponseForEntityV2.

        :param entity_id: The entity_id of this MetricResponseForEntityV2.
        :type: str
        """

        self._entity_id = entity_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MetricResponseForEntityV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
