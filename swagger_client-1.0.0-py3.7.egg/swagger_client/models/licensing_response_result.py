# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LicensingResponseResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'licenses': 'list[VRNILicense]',
        'license_usage': 'list[LicenseUsage]',
        'customer_id': 'int',
        'cpu_capacity': 'int',
        'ccu_capacity': 'int',
        'vm_capacity': 'int',
        'core_capacity': 'int',
        'edge_capacity': 'int',
        'service_tag': 'str',
        'expire_date': 'int',
        'enterprise': 'bool',
        'evaluation': 'bool',
        'num_of_enterprise_license': 'int',
        'num_of_valid_license': 'int',
        'num_of_valid_enterprise_license': 'int',
        'num_of_valid_sdwan_license': 'int',
        'num_of_valid_nav_license': 'int',
        'num_of_valid_advanced_license': 'int',
        'num_of_valid_robo_license': 'int',
        'num_of_active_license': 'int',
        'num_of_active_enterprise_license': 'int',
        'num_of_active_sdwan_license': 'int',
        'num_of_active_nav_license': 'int',
        'num_of_active_advanced_license': 'int',
        'num_of_active_robo_license': 'int',
        'used_sockets': 'int',
        'used_cores': 'int',
        'used_edges': 'int',
        'used_devices': 'int',
        'core_license_present': 'bool'
    }

    attribute_map = {
        'licenses': 'licenses',
        'license_usage': 'licenseUsage',
        'customer_id': 'customerId',
        'cpu_capacity': 'cpuCapacity',
        'ccu_capacity': 'ccuCapacity',
        'vm_capacity': 'vmCapacity',
        'core_capacity': 'coreCapacity',
        'edge_capacity': 'edgeCapacity',
        'service_tag': 'serviceTag',
        'expire_date': 'expireDate',
        'enterprise': 'enterprise',
        'evaluation': 'evaluation',
        'num_of_enterprise_license': 'numOfEnterpriseLicense',
        'num_of_valid_license': 'numOfValidLicense',
        'num_of_valid_enterprise_license': 'numOfValidEnterpriseLicense',
        'num_of_valid_sdwan_license': 'numOfValidSDWANLicense',
        'num_of_valid_nav_license': 'numOfValidNAVLicense',
        'num_of_valid_advanced_license': 'numOfValidAdvancedLicense',
        'num_of_valid_robo_license': 'numOfValidROBOLicense',
        'num_of_active_license': 'numOfActiveLicense',
        'num_of_active_enterprise_license': 'numOfActiveEnterpriseLicense',
        'num_of_active_sdwan_license': 'numOfActiveSDWANLicense',
        'num_of_active_nav_license': 'numOfActiveNAVLicense',
        'num_of_active_advanced_license': 'numOfActiveAdvancedLicense',
        'num_of_active_robo_license': 'numOfActiveROBOLicense',
        'used_sockets': 'usedSockets',
        'used_cores': 'usedCores',
        'used_edges': 'usedEdges',
        'used_devices': 'usedDevices',
        'core_license_present': 'coreLicensePresent'
    }

    def __init__(self, licenses=None, license_usage=None, customer_id=None, cpu_capacity=None, ccu_capacity=None, vm_capacity=None, core_capacity=None, edge_capacity=None, service_tag=None, expire_date=None, enterprise=None, evaluation=None, num_of_enterprise_license=None, num_of_valid_license=None, num_of_valid_enterprise_license=None, num_of_valid_sdwan_license=None, num_of_valid_nav_license=None, num_of_valid_advanced_license=None, num_of_valid_robo_license=None, num_of_active_license=None, num_of_active_enterprise_license=None, num_of_active_sdwan_license=None, num_of_active_nav_license=None, num_of_active_advanced_license=None, num_of_active_robo_license=None, used_sockets=None, used_cores=None, used_edges=None, used_devices=None, core_license_present=None):
        """
        LicensingResponseResult - a model defined in Swagger
        """

        self._licenses = None
        self._license_usage = None
        self._customer_id = None
        self._cpu_capacity = None
        self._ccu_capacity = None
        self._vm_capacity = None
        self._core_capacity = None
        self._edge_capacity = None
        self._service_tag = None
        self._expire_date = None
        self._enterprise = None
        self._evaluation = None
        self._num_of_enterprise_license = None
        self._num_of_valid_license = None
        self._num_of_valid_enterprise_license = None
        self._num_of_valid_sdwan_license = None
        self._num_of_valid_nav_license = None
        self._num_of_valid_advanced_license = None
        self._num_of_valid_robo_license = None
        self._num_of_active_license = None
        self._num_of_active_enterprise_license = None
        self._num_of_active_sdwan_license = None
        self._num_of_active_nav_license = None
        self._num_of_active_advanced_license = None
        self._num_of_active_robo_license = None
        self._used_sockets = None
        self._used_cores = None
        self._used_edges = None
        self._used_devices = None
        self._core_license_present = None

        if licenses is not None:
          self.licenses = licenses
        if license_usage is not None:
          self.license_usage = license_usage
        if customer_id is not None:
          self.customer_id = customer_id
        if cpu_capacity is not None:
          self.cpu_capacity = cpu_capacity
        if ccu_capacity is not None:
          self.ccu_capacity = ccu_capacity
        if vm_capacity is not None:
          self.vm_capacity = vm_capacity
        if core_capacity is not None:
          self.core_capacity = core_capacity
        if edge_capacity is not None:
          self.edge_capacity = edge_capacity
        if service_tag is not None:
          self.service_tag = service_tag
        if expire_date is not None:
          self.expire_date = expire_date
        if enterprise is not None:
          self.enterprise = enterprise
        if evaluation is not None:
          self.evaluation = evaluation
        if num_of_enterprise_license is not None:
          self.num_of_enterprise_license = num_of_enterprise_license
        if num_of_valid_license is not None:
          self.num_of_valid_license = num_of_valid_license
        if num_of_valid_enterprise_license is not None:
          self.num_of_valid_enterprise_license = num_of_valid_enterprise_license
        if num_of_valid_sdwan_license is not None:
          self.num_of_valid_sdwan_license = num_of_valid_sdwan_license
        if num_of_valid_nav_license is not None:
          self.num_of_valid_nav_license = num_of_valid_nav_license
        if num_of_valid_advanced_license is not None:
          self.num_of_valid_advanced_license = num_of_valid_advanced_license
        if num_of_valid_robo_license is not None:
          self.num_of_valid_robo_license = num_of_valid_robo_license
        if num_of_active_license is not None:
          self.num_of_active_license = num_of_active_license
        if num_of_active_enterprise_license is not None:
          self.num_of_active_enterprise_license = num_of_active_enterprise_license
        if num_of_active_sdwan_license is not None:
          self.num_of_active_sdwan_license = num_of_active_sdwan_license
        if num_of_active_nav_license is not None:
          self.num_of_active_nav_license = num_of_active_nav_license
        if num_of_active_advanced_license is not None:
          self.num_of_active_advanced_license = num_of_active_advanced_license
        if num_of_active_robo_license is not None:
          self.num_of_active_robo_license = num_of_active_robo_license
        if used_sockets is not None:
          self.used_sockets = used_sockets
        if used_cores is not None:
          self.used_cores = used_cores
        if used_edges is not None:
          self.used_edges = used_edges
        if used_devices is not None:
          self.used_devices = used_devices
        if core_license_present is not None:
          self.core_license_present = core_license_present

    @property
    def licenses(self):
        """
        Gets the licenses of this LicensingResponseResult.

        :return: The licenses of this LicensingResponseResult.
        :rtype: list[VRNILicense]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """
        Sets the licenses of this LicensingResponseResult.

        :param licenses: The licenses of this LicensingResponseResult.
        :type: list[VRNILicense]
        """

        self._licenses = licenses

    @property
    def license_usage(self):
        """
        Gets the license_usage of this LicensingResponseResult.

        :return: The license_usage of this LicensingResponseResult.
        :rtype: list[LicenseUsage]
        """
        return self._license_usage

    @license_usage.setter
    def license_usage(self, license_usage):
        """
        Sets the license_usage of this LicensingResponseResult.

        :param license_usage: The license_usage of this LicensingResponseResult.
        :type: list[LicenseUsage]
        """

        self._license_usage = license_usage

    @property
    def customer_id(self):
        """
        Gets the customer_id of this LicensingResponseResult.
        customer id

        :return: The customer_id of this LicensingResponseResult.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this LicensingResponseResult.
        customer id

        :param customer_id: The customer_id of this LicensingResponseResult.
        :type: int
        """

        self._customer_id = customer_id

    @property
    def cpu_capacity(self):
        """
        Gets the cpu_capacity of this LicensingResponseResult.
        cpu capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)

        :return: The cpu_capacity of this LicensingResponseResult.
        :rtype: int
        """
        return self._cpu_capacity

    @cpu_capacity.setter
    def cpu_capacity(self, cpu_capacity):
        """
        Sets the cpu_capacity of this LicensingResponseResult.
        cpu capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)

        :param cpu_capacity: The cpu_capacity of this LicensingResponseResult.
        :type: int
        """

        self._cpu_capacity = cpu_capacity

    @property
    def ccu_capacity(self):
        """
        Gets the ccu_capacity of this LicensingResponseResult.
        ccu capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)

        :return: The ccu_capacity of this LicensingResponseResult.
        :rtype: int
        """
        return self._ccu_capacity

    @ccu_capacity.setter
    def ccu_capacity(self, ccu_capacity):
        """
        Sets the ccu_capacity of this LicensingResponseResult.
        ccu capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)

        :param ccu_capacity: The ccu_capacity of this LicensingResponseResult.
        :type: int
        """

        self._ccu_capacity = ccu_capacity

    @property
    def vm_capacity(self):
        """
        Gets the vm_capacity of this LicensingResponseResult.
        VM capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)

        :return: The vm_capacity of this LicensingResponseResult.
        :rtype: int
        """
        return self._vm_capacity

    @vm_capacity.setter
    def vm_capacity(self, vm_capacity):
        """
        Sets the vm_capacity of this LicensingResponseResult.
        VM capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)

        :param vm_capacity: The vm_capacity of this LicensingResponseResult.
        :type: int
        """

        self._vm_capacity = vm_capacity

    @property
    def core_capacity(self):
        """
        Gets the core_capacity of this LicensingResponseResult.
        core capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)

        :return: The core_capacity of this LicensingResponseResult.
        :rtype: int
        """
        return self._core_capacity

    @core_capacity.setter
    def core_capacity(self, core_capacity):
        """
        Sets the core_capacity of this LicensingResponseResult.
        core capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)

        :param core_capacity: The core_capacity of this LicensingResponseResult.
        :type: int
        """

        self._core_capacity = core_capacity

    @property
    def edge_capacity(self):
        """
        Gets the edge_capacity of this LicensingResponseResult.
        edge capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)

        :return: The edge_capacity of this LicensingResponseResult.
        :rtype: int
        """
        return self._edge_capacity

    @edge_capacity.setter
    def edge_capacity(self, edge_capacity):
        """
        Sets the edge_capacity of this LicensingResponseResult.
        edge capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)

        :param edge_capacity: The edge_capacity of this LicensingResponseResult.
        :type: int
        """

        self._edge_capacity = edge_capacity

    @property
    def service_tag(self):
        """
        Gets the service_tag of this LicensingResponseResult.
        service tag

        :return: The service_tag of this LicensingResponseResult.
        :rtype: str
        """
        return self._service_tag

    @service_tag.setter
    def service_tag(self, service_tag):
        """
        Sets the service_tag of this LicensingResponseResult.
        service tag

        :param service_tag: The service_tag of this LicensingResponseResult.
        :type: str
        """

        self._service_tag = service_tag

    @property
    def expire_date(self):
        """
        Gets the expire_date of this LicensingResponseResult.
        Maximum of expiry date for current licenses, 0 if any non-expiry license is present. Invalid/already expired license is not considered here.

        :return: The expire_date of this LicensingResponseResult.
        :rtype: int
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """
        Sets the expire_date of this LicensingResponseResult.
        Maximum of expiry date for current licenses, 0 if any non-expiry license is present. Invalid/already expired license is not considered here.

        :param expire_date: The expire_date of this LicensingResponseResult.
        :type: int
        """

        self._expire_date = expire_date

    @property
    def enterprise(self):
        """
        Gets the enterprise of this LicensingResponseResult.
        true if non-expired ENTERPRISE license is available

        :return: The enterprise of this LicensingResponseResult.
        :rtype: bool
        """
        return self._enterprise

    @enterprise.setter
    def enterprise(self, enterprise):
        """
        Sets the enterprise of this LicensingResponseResult.
        true if non-expired ENTERPRISE license is available

        :param enterprise: The enterprise of this LicensingResponseResult.
        :type: bool
        """

        self._enterprise = enterprise

    @property
    def evaluation(self):
        """
        Gets the evaluation of this LicensingResponseResult.
        true if all licenses are evaluation license

        :return: The evaluation of this LicensingResponseResult.
        :rtype: bool
        """
        return self._evaluation

    @evaluation.setter
    def evaluation(self, evaluation):
        """
        Sets the evaluation of this LicensingResponseResult.
        true if all licenses are evaluation license

        :param evaluation: The evaluation of this LicensingResponseResult.
        :type: bool
        """

        self._evaluation = evaluation

    @property
    def num_of_enterprise_license(self):
        """
        Gets the num_of_enterprise_license of this LicensingResponseResult.
        number of total enterprise licenses available

        :return: The num_of_enterprise_license of this LicensingResponseResult.
        :rtype: int
        """
        return self._num_of_enterprise_license

    @num_of_enterprise_license.setter
    def num_of_enterprise_license(self, num_of_enterprise_license):
        """
        Sets the num_of_enterprise_license of this LicensingResponseResult.
        number of total enterprise licenses available

        :param num_of_enterprise_license: The num_of_enterprise_license of this LicensingResponseResult.
        :type: int
        """

        self._num_of_enterprise_license = num_of_enterprise_license

    @property
    def num_of_valid_license(self):
        """
        Gets the num_of_valid_license of this LicensingResponseResult.
        Total Number of valid licenses available. Active licenses from last major version which are only valid for grace period are not counted

        :return: The num_of_valid_license of this LicensingResponseResult.
        :rtype: int
        """
        return self._num_of_valid_license

    @num_of_valid_license.setter
    def num_of_valid_license(self, num_of_valid_license):
        """
        Sets the num_of_valid_license of this LicensingResponseResult.
        Total Number of valid licenses available. Active licenses from last major version which are only valid for grace period are not counted

        :param num_of_valid_license: The num_of_valid_license of this LicensingResponseResult.
        :type: int
        """

        self._num_of_valid_license = num_of_valid_license

    @property
    def num_of_valid_enterprise_license(self):
        """
        Gets the num_of_valid_enterprise_license of this LicensingResponseResult.
        Number of valid Enterprise licenses available. Active licenses from last major version which are only valid for grace period are not counted

        :return: The num_of_valid_enterprise_license of this LicensingResponseResult.
        :rtype: int
        """
        return self._num_of_valid_enterprise_license

    @num_of_valid_enterprise_license.setter
    def num_of_valid_enterprise_license(self, num_of_valid_enterprise_license):
        """
        Sets the num_of_valid_enterprise_license of this LicensingResponseResult.
        Number of valid Enterprise licenses available. Active licenses from last major version which are only valid for grace period are not counted

        :param num_of_valid_enterprise_license: The num_of_valid_enterprise_license of this LicensingResponseResult.
        :type: int
        """

        self._num_of_valid_enterprise_license = num_of_valid_enterprise_license

    @property
    def num_of_valid_sdwan_license(self):
        """
        Gets the num_of_valid_sdwan_license of this LicensingResponseResult.
        Number of valid SDWAN licenses available. Active licenses from last major version which are only valid for grace period are not counted

        :return: The num_of_valid_sdwan_license of this LicensingResponseResult.
        :rtype: int
        """
        return self._num_of_valid_sdwan_license

    @num_of_valid_sdwan_license.setter
    def num_of_valid_sdwan_license(self, num_of_valid_sdwan_license):
        """
        Sets the num_of_valid_sdwan_license of this LicensingResponseResult.
        Number of valid SDWAN licenses available. Active licenses from last major version which are only valid for grace period are not counted

        :param num_of_valid_sdwan_license: The num_of_valid_sdwan_license of this LicensingResponseResult.
        :type: int
        """

        self._num_of_valid_sdwan_license = num_of_valid_sdwan_license

    @property
    def num_of_valid_nav_license(self):
        """
        Gets the num_of_valid_nav_license of this LicensingResponseResult.
        Number of valid NAV licenses available. Active licenses from last major version which are only valid for grace period are not counted

        :return: The num_of_valid_nav_license of this LicensingResponseResult.
        :rtype: int
        """
        return self._num_of_valid_nav_license

    @num_of_valid_nav_license.setter
    def num_of_valid_nav_license(self, num_of_valid_nav_license):
        """
        Sets the num_of_valid_nav_license of this LicensingResponseResult.
        Number of valid NAV licenses available. Active licenses from last major version which are only valid for grace period are not counted

        :param num_of_valid_nav_license: The num_of_valid_nav_license of this LicensingResponseResult.
        :type: int
        """

        self._num_of_valid_nav_license = num_of_valid_nav_license

    @property
    def num_of_valid_advanced_license(self):
        """
        Gets the num_of_valid_advanced_license of this LicensingResponseResult.
        Number of valid Advanced licenses available. Active licenses from last major version which are only valid for grace period are not counted

        :return: The num_of_valid_advanced_license of this LicensingResponseResult.
        :rtype: int
        """
        return self._num_of_valid_advanced_license

    @num_of_valid_advanced_license.setter
    def num_of_valid_advanced_license(self, num_of_valid_advanced_license):
        """
        Sets the num_of_valid_advanced_license of this LicensingResponseResult.
        Number of valid Advanced licenses available. Active licenses from last major version which are only valid for grace period are not counted

        :param num_of_valid_advanced_license: The num_of_valid_advanced_license of this LicensingResponseResult.
        :type: int
        """

        self._num_of_valid_advanced_license = num_of_valid_advanced_license

    @property
    def num_of_valid_robo_license(self):
        """
        Gets the num_of_valid_robo_license of this LicensingResponseResult.
        Number of valid ROBO licenses available. Active licenses from last major version which are only valid for grace period are not counted

        :return: The num_of_valid_robo_license of this LicensingResponseResult.
        :rtype: int
        """
        return self._num_of_valid_robo_license

    @num_of_valid_robo_license.setter
    def num_of_valid_robo_license(self, num_of_valid_robo_license):
        """
        Sets the num_of_valid_robo_license of this LicensingResponseResult.
        Number of valid ROBO licenses available. Active licenses from last major version which are only valid for grace period are not counted

        :param num_of_valid_robo_license: The num_of_valid_robo_license of this LicensingResponseResult.
        :type: int
        """

        self._num_of_valid_robo_license = num_of_valid_robo_license

    @property
    def num_of_active_license(self):
        """
        Gets the num_of_active_license of this LicensingResponseResult.
        Total Number of active licenses (non-expired and licenses from last major version during grace period)

        :return: The num_of_active_license of this LicensingResponseResult.
        :rtype: int
        """
        return self._num_of_active_license

    @num_of_active_license.setter
    def num_of_active_license(self, num_of_active_license):
        """
        Sets the num_of_active_license of this LicensingResponseResult.
        Total Number of active licenses (non-expired and licenses from last major version during grace period)

        :param num_of_active_license: The num_of_active_license of this LicensingResponseResult.
        :type: int
        """

        self._num_of_active_license = num_of_active_license

    @property
    def num_of_active_enterprise_license(self):
        """
        Gets the num_of_active_enterprise_license of this LicensingResponseResult.
        Total Number of active Enterprise licenses (non-expired and licenses from last major version during grace period)

        :return: The num_of_active_enterprise_license of this LicensingResponseResult.
        :rtype: int
        """
        return self._num_of_active_enterprise_license

    @num_of_active_enterprise_license.setter
    def num_of_active_enterprise_license(self, num_of_active_enterprise_license):
        """
        Sets the num_of_active_enterprise_license of this LicensingResponseResult.
        Total Number of active Enterprise licenses (non-expired and licenses from last major version during grace period)

        :param num_of_active_enterprise_license: The num_of_active_enterprise_license of this LicensingResponseResult.
        :type: int
        """

        self._num_of_active_enterprise_license = num_of_active_enterprise_license

    @property
    def num_of_active_sdwan_license(self):
        """
        Gets the num_of_active_sdwan_license of this LicensingResponseResult.
        Total Number of active SDWAN licenses (non-expired and licenses from last major version during grace period)

        :return: The num_of_active_sdwan_license of this LicensingResponseResult.
        :rtype: int
        """
        return self._num_of_active_sdwan_license

    @num_of_active_sdwan_license.setter
    def num_of_active_sdwan_license(self, num_of_active_sdwan_license):
        """
        Sets the num_of_active_sdwan_license of this LicensingResponseResult.
        Total Number of active SDWAN licenses (non-expired and licenses from last major version during grace period)

        :param num_of_active_sdwan_license: The num_of_active_sdwan_license of this LicensingResponseResult.
        :type: int
        """

        self._num_of_active_sdwan_license = num_of_active_sdwan_license

    @property
    def num_of_active_nav_license(self):
        """
        Gets the num_of_active_nav_license of this LicensingResponseResult.
        Total Number of active NAV licenses (non-expired and licenses from last major version during grace period)

        :return: The num_of_active_nav_license of this LicensingResponseResult.
        :rtype: int
        """
        return self._num_of_active_nav_license

    @num_of_active_nav_license.setter
    def num_of_active_nav_license(self, num_of_active_nav_license):
        """
        Sets the num_of_active_nav_license of this LicensingResponseResult.
        Total Number of active NAV licenses (non-expired and licenses from last major version during grace period)

        :param num_of_active_nav_license: The num_of_active_nav_license of this LicensingResponseResult.
        :type: int
        """

        self._num_of_active_nav_license = num_of_active_nav_license

    @property
    def num_of_active_advanced_license(self):
        """
        Gets the num_of_active_advanced_license of this LicensingResponseResult.
        Total Number of active Advanced licenses (non-expired and licenses from last major version during grace period)

        :return: The num_of_active_advanced_license of this LicensingResponseResult.
        :rtype: int
        """
        return self._num_of_active_advanced_license

    @num_of_active_advanced_license.setter
    def num_of_active_advanced_license(self, num_of_active_advanced_license):
        """
        Sets the num_of_active_advanced_license of this LicensingResponseResult.
        Total Number of active Advanced licenses (non-expired and licenses from last major version during grace period)

        :param num_of_active_advanced_license: The num_of_active_advanced_license of this LicensingResponseResult.
        :type: int
        """

        self._num_of_active_advanced_license = num_of_active_advanced_license

    @property
    def num_of_active_robo_license(self):
        """
        Gets the num_of_active_robo_license of this LicensingResponseResult.
        Total Number of active ROBO licenses (non-expired and licenses from last major version during grace period)

        :return: The num_of_active_robo_license of this LicensingResponseResult.
        :rtype: int
        """
        return self._num_of_active_robo_license

    @num_of_active_robo_license.setter
    def num_of_active_robo_license(self, num_of_active_robo_license):
        """
        Sets the num_of_active_robo_license of this LicensingResponseResult.
        Total Number of active ROBO licenses (non-expired and licenses from last major version during grace period)

        :param num_of_active_robo_license: The num_of_active_robo_license of this LicensingResponseResult.
        :type: int
        """

        self._num_of_active_robo_license = num_of_active_robo_license

    @property
    def used_sockets(self):
        """
        Gets the used_sockets of this LicensingResponseResult.
        Count of used sockets

        :return: The used_sockets of this LicensingResponseResult.
        :rtype: int
        """
        return self._used_sockets

    @used_sockets.setter
    def used_sockets(self, used_sockets):
        """
        Sets the used_sockets of this LicensingResponseResult.
        Count of used sockets

        :param used_sockets: The used_sockets of this LicensingResponseResult.
        :type: int
        """

        self._used_sockets = used_sockets

    @property
    def used_cores(self):
        """
        Gets the used_cores of this LicensingResponseResult.
        Count of used cores

        :return: The used_cores of this LicensingResponseResult.
        :rtype: int
        """
        return self._used_cores

    @used_cores.setter
    def used_cores(self, used_cores):
        """
        Sets the used_cores of this LicensingResponseResult.
        Count of used cores

        :param used_cores: The used_cores of this LicensingResponseResult.
        :type: int
        """

        self._used_cores = used_cores

    @property
    def used_edges(self):
        """
        Gets the used_edges of this LicensingResponseResult.
        Count of used edges

        :return: The used_edges of this LicensingResponseResult.
        :rtype: int
        """
        return self._used_edges

    @used_edges.setter
    def used_edges(self, used_edges):
        """
        Sets the used_edges of this LicensingResponseResult.
        Count of used edges

        :param used_edges: The used_edges of this LicensingResponseResult.
        :type: int
        """

        self._used_edges = used_edges

    @property
    def used_devices(self):
        """
        Gets the used_devices of this LicensingResponseResult.
        Count of used devices

        :return: The used_devices of this LicensingResponseResult.
        :rtype: int
        """
        return self._used_devices

    @used_devices.setter
    def used_devices(self, used_devices):
        """
        Sets the used_devices of this LicensingResponseResult.
        Count of used devices

        :param used_devices: The used_devices of this LicensingResponseResult.
        :type: int
        """

        self._used_devices = used_devices

    @property
    def core_license_present(self):
        """
        Gets the core_license_present of this LicensingResponseResult.
        true if core license is present

        :return: The core_license_present of this LicensingResponseResult.
        :rtype: bool
        """
        return self._core_license_present

    @core_license_present.setter
    def core_license_present(self, core_license_present):
        """
        Sets the core_license_present of this LicensingResponseResult.
        true if core license is present

        :param core_license_present: The core_license_present of this LicensingResponseResult.
        :type: bool
        """

        self._core_license_present = core_license_present

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LicensingResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
