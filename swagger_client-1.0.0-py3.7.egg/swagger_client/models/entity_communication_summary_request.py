# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EntityCommunicationSummaryRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scope': 'EntityScope',
        'group_by': 'str',
        'time_range': 'TimeRange'
    }

    attribute_map = {
        'scope': 'scope',
        'group_by': 'group_by',
        'time_range': 'time_range'
    }

    def __init__(self, scope=None, group_by=None, time_range=None):
        """
        EntityCommunicationSummaryRequest - a model defined in Swagger
        """

        self._scope = None
        self._group_by = None
        self._time_range = None

        if scope is not None:
          self.scope = scope
        if group_by is not None:
          self.group_by = group_by
        if time_range is not None:
          self.time_range = time_range

    @property
    def scope(self):
        """
        Gets the scope of this EntityCommunicationSummaryRequest.

        :return: The scope of this EntityCommunicationSummaryRequest.
        :rtype: EntityScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this EntityCommunicationSummaryRequest.

        :param scope: The scope of this EntityCommunicationSummaryRequest.
        :type: EntityScope
        """

        self._scope = scope

    @property
    def group_by(self):
        """
        Gets the group_by of this EntityCommunicationSummaryRequest.

        :return: The group_by of this EntityCommunicationSummaryRequest.
        :rtype: str
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """
        Sets the group_by of this EntityCommunicationSummaryRequest.

        :param group_by: The group_by of this EntityCommunicationSummaryRequest.
        :type: str
        """

        self._group_by = group_by

    @property
    def time_range(self):
        """
        Gets the time_range of this EntityCommunicationSummaryRequest.

        :return: The time_range of this EntityCommunicationSummaryRequest.
        :rtype: TimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """
        Sets the time_range of this EntityCommunicationSummaryRequest.

        :param time_range: The time_range of this EntityCommunicationSummaryRequest.
        :type: TimeRange
        """

        self._time_range = time_range

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EntityCommunicationSummaryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
