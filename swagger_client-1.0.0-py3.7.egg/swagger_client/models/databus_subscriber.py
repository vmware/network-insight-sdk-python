# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DatabusSubscriber(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'message_group': 'str',
        'url': 'str',
        'filter_tags': 'list[DatabusFilterTag]'
    }

    attribute_map = {
        'id': 'id',
        'message_group': 'message_group',
        'url': 'url',
        'filter_tags': 'filter_tags'
    }

    def __init__(self, id=None, message_group=None, url=None, filter_tags=None):
        """
        DatabusSubscriber - a model defined in Swagger
        """

        self._id = None
        self._message_group = None
        self._url = None
        self._filter_tags = None

        if id is not None:
          self.id = id
        if message_group is not None:
          self.message_group = message_group
        if url is not None:
          self.url = url
        if filter_tags is not None:
          self.filter_tags = filter_tags

    @property
    def id(self):
        """
        Gets the id of this DatabusSubscriber.
        unique id assigned for the receiver by Operations for Networks. This is not required while creating the subscription

        :return: The id of this DatabusSubscriber.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DatabusSubscriber.
        unique id assigned for the receiver by Operations for Networks. This is not required while creating the subscription

        :param id: The id of this DatabusSubscriber.
        :type: str
        """

        self._id = id

    @property
    def message_group(self):
        """
        Gets the message_group of this DatabusSubscriber.
        Message-group name for receiving the data from. Message group of a subscription cannot be changed after creation. Supported message groups - application, flows, problems, metrics, vms, hosts, nics, switchports, vms-metrics, hosts-metrics, flows-metrics, nics-metrics, switchports-metrics

        :return: The message_group of this DatabusSubscriber.
        :rtype: str
        """
        return self._message_group

    @message_group.setter
    def message_group(self, message_group):
        """
        Sets the message_group of this DatabusSubscriber.
        Message-group name for receiving the data from. Message group of a subscription cannot be changed after creation. Supported message groups - application, flows, problems, metrics, vms, hosts, nics, switchports, vms-metrics, hosts-metrics, flows-metrics, nics-metrics, switchports-metrics

        :param message_group: The message_group of this DatabusSubscriber.
        :type: str
        """

        self._message_group = message_group

    @property
    def url(self):
        """
        Gets the url of this DatabusSubscriber.
        URL where the data will be posted to. All the messages from the message group will be posted to this url. If multiple receivers are present behind a load balancer, this can be the url of the load balancer. The url of the subscription can be changed after the creation of the subscription.

        :return: The url of this DatabusSubscriber.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this DatabusSubscriber.
        URL where the data will be posted to. All the messages from the message group will be posted to this url. If multiple receivers are present behind a load balancer, this can be the url of the load balancer. The url of the subscription can be changed after the creation of the subscription.

        :param url: The url of this DatabusSubscriber.
        :type: str
        """

        self._url = url

    @property
    def filter_tags(self):
        """
        Gets the filter_tags of this DatabusSubscriber.

        :return: The filter_tags of this DatabusSubscriber.
        :rtype: list[DatabusFilterTag]
        """
        return self._filter_tags

    @filter_tags.setter
    def filter_tags(self, filter_tags):
        """
        Sets the filter_tags of this DatabusSubscriber.

        :param filter_tags: The filter_tags of this DatabusSubscriber.
        :type: list[DatabusFilterTag]
        """

        self._filter_tags = filter_tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DatabusSubscriber):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
