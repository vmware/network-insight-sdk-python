# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DvsIpfixRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_all': 'bool',
        'disable_all': 'bool',
        'enable_for_dvs': 'str',
        'disable_for_dvs': 'str'
    }

    attribute_map = {
        'enable_all': 'enable_all',
        'disable_all': 'disable_all',
        'enable_for_dvs': 'enable_for_dvs',
        'disable_for_dvs': 'disable_for_dvs'
    }

    def __init__(self, enable_all=False, disable_all=False, enable_for_dvs=None, disable_for_dvs=None):
        """
        DvsIpfixRequest - a model defined in Swagger
        """

        self._enable_all = None
        self._disable_all = None
        self._enable_for_dvs = None
        self._disable_for_dvs = None

        if enable_all is not None:
          self.enable_all = enable_all
        if disable_all is not None:
          self.disable_all = disable_all
        if enable_for_dvs is not None:
          self.enable_for_dvs = enable_for_dvs
        if disable_for_dvs is not None:
          self.disable_for_dvs = disable_for_dvs

    @property
    def enable_all(self):
        """
        Gets the enable_all of this DvsIpfixRequest.
        Enable flow collection for All DVS.

        :return: The enable_all of this DvsIpfixRequest.
        :rtype: bool
        """
        return self._enable_all

    @enable_all.setter
    def enable_all(self, enable_all):
        """
        Sets the enable_all of this DvsIpfixRequest.
        Enable flow collection for All DVS.

        :param enable_all: The enable_all of this DvsIpfixRequest.
        :type: bool
        """

        self._enable_all = enable_all

    @property
    def disable_all(self):
        """
        Gets the disable_all of this DvsIpfixRequest.
        Disable flow collection for All DVS.

        :return: The disable_all of this DvsIpfixRequest.
        :rtype: bool
        """
        return self._disable_all

    @disable_all.setter
    def disable_all(self, disable_all):
        """
        Sets the disable_all of this DvsIpfixRequest.
        Disable flow collection for All DVS.

        :param disable_all: The disable_all of this DvsIpfixRequest.
        :type: bool
        """

        self._disable_all = disable_all

    @property
    def enable_for_dvs(self):
        """
        Gets the enable_for_dvs of this DvsIpfixRequest.
        Comma separated values of all the dvs objects for which ipfix should be enabled.

        :return: The enable_for_dvs of this DvsIpfixRequest.
        :rtype: str
        """
        return self._enable_for_dvs

    @enable_for_dvs.setter
    def enable_for_dvs(self, enable_for_dvs):
        """
        Sets the enable_for_dvs of this DvsIpfixRequest.
        Comma separated values of all the dvs objects for which ipfix should be enabled.

        :param enable_for_dvs: The enable_for_dvs of this DvsIpfixRequest.
        :type: str
        """

        self._enable_for_dvs = enable_for_dvs

    @property
    def disable_for_dvs(self):
        """
        Gets the disable_for_dvs of this DvsIpfixRequest.
        Comma separated values of all the dvs objects for wihch ipfix should be disabled.

        :return: The disable_for_dvs of this DvsIpfixRequest.
        :rtype: str
        """
        return self._disable_for_dvs

    @disable_for_dvs.setter
    def disable_for_dvs(self, disable_for_dvs):
        """
        Sets the disable_for_dvs of this DvsIpfixRequest.
        Comma separated values of all the dvs objects for wihch ipfix should be disabled.

        :param disable_for_dvs: The disable_for_dvs of this DvsIpfixRequest.
        :type: str
        """

        self._disable_for_dvs = disable_for_dvs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DvsIpfixRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
