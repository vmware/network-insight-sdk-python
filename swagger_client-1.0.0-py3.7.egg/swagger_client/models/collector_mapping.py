# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CollectorMapping(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_collector': 'str',
        'mappings': 'list[ObjectMapping]'
    }

    attribute_map = {
        'default_collector': 'default_collector',
        'mappings': 'mappings'
    }

    def __init__(self, default_collector=None, mappings=None):
        """
        CollectorMapping - a model defined in Swagger
        """

        self._default_collector = None
        self._mappings = None

        if default_collector is not None:
          self.default_collector = default_collector
        if mappings is not None:
          self.mappings = mappings

    @property
    def default_collector(self):
        """
        Gets the default_collector of this CollectorMapping.
        Default collector_VM ip-address for mapping data sources, if no other collector mapping provided explicitly

        :return: The default_collector of this CollectorMapping.
        :rtype: str
        """
        return self._default_collector

    @default_collector.setter
    def default_collector(self, default_collector):
        """
        Sets the default_collector of this CollectorMapping.
        Default collector_VM ip-address for mapping data sources, if no other collector mapping provided explicitly

        :param default_collector: The default_collector of this CollectorMapping.
        :type: str
        """

        self._default_collector = default_collector

    @property
    def mappings(self):
        """
        Gets the mappings of this CollectorMapping.

        :return: The mappings of this CollectorMapping.
        :rtype: list[ObjectMapping]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """
        Sets the mappings of this CollectorMapping.

        :param mappings: The mappings of this CollectorMapping.
        :type: list[ObjectMapping]
        """

        self._mappings = mappings

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CollectorMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
