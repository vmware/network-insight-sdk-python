# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VMCSDDCGROUP(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'entity_type': 'EntityType',
        'group_id': 'str',
        'org_id': 'str',
        'org_name': 'str',
        'provider_type': 'str',
        'deployment_type': 'str',
        'state': 'str',
        'l3_connectors': 'list[Reference]',
        'sddcs': 'list[Reference]',
        'vpcs': 'list[Reference]',
        'direct_connect_gateways': 'list[Reference]'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'entity_type': 'entity_type',
        'group_id': 'group_id',
        'org_id': 'org_id',
        'org_name': 'org_name',
        'provider_type': 'provider_type',
        'deployment_type': 'deployment_type',
        'state': 'state',
        'l3_connectors': 'l3_connectors',
        'sddcs': 'sddcs',
        'vpcs': 'vpcs',
        'direct_connect_gateways': 'direct_connect_gateways'
    }

    def __init__(self, entity_id=None, name=None, entity_type=None, group_id=None, org_id=None, org_name=None, provider_type=None, deployment_type=None, state=None, l3_connectors=None, sddcs=None, vpcs=None, direct_connect_gateways=None):
        """
        VMCSDDCGROUP - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._entity_type = None
        self._group_id = None
        self._org_id = None
        self._org_name = None
        self._provider_type = None
        self._deployment_type = None
        self._state = None
        self._l3_connectors = None
        self._sddcs = None
        self._vpcs = None
        self._direct_connect_gateways = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if entity_type is not None:
          self.entity_type = entity_type
        if group_id is not None:
          self.group_id = group_id
        if org_id is not None:
          self.org_id = org_id
        if org_name is not None:
          self.org_name = org_name
        if provider_type is not None:
          self.provider_type = provider_type
        if deployment_type is not None:
          self.deployment_type = deployment_type
        if state is not None:
          self.state = state
        if l3_connectors is not None:
          self.l3_connectors = l3_connectors
        if sddcs is not None:
          self.sddcs = sddcs
        if vpcs is not None:
          self.vpcs = vpcs
        if direct_connect_gateways is not None:
          self.direct_connect_gateways = direct_connect_gateways

    @property
    def entity_id(self):
        """
        Gets the entity_id of this VMCSDDCGROUP.
        Entity ID that can be references in detail API calls

        :return: The entity_id of this VMCSDDCGROUP.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this VMCSDDCGROUP.
        Entity ID that can be references in detail API calls

        :param entity_id: The entity_id of this VMCSDDCGROUP.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this VMCSDDCGROUP.
        Name of the object

        :return: The name of this VMCSDDCGROUP.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VMCSDDCGROUP.
        Name of the object

        :param name: The name of this VMCSDDCGROUP.
        :type: str
        """

        self._name = name

    @property
    def entity_type(self):
        """
        Gets the entity_type of this VMCSDDCGROUP.

        :return: The entity_type of this VMCSDDCGROUP.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this VMCSDDCGROUP.

        :param entity_type: The entity_type of this VMCSDDCGROUP.
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def group_id(self):
        """
        Gets the group_id of this VMCSDDCGROUP.

        :return: The group_id of this VMCSDDCGROUP.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this VMCSDDCGROUP.

        :param group_id: The group_id of this VMCSDDCGROUP.
        :type: str
        """

        self._group_id = group_id

    @property
    def org_id(self):
        """
        Gets the org_id of this VMCSDDCGROUP.

        :return: The org_id of this VMCSDDCGROUP.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """
        Sets the org_id of this VMCSDDCGROUP.

        :param org_id: The org_id of this VMCSDDCGROUP.
        :type: str
        """

        self._org_id = org_id

    @property
    def org_name(self):
        """
        Gets the org_name of this VMCSDDCGROUP.

        :return: The org_name of this VMCSDDCGROUP.
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """
        Sets the org_name of this VMCSDDCGROUP.

        :param org_name: The org_name of this VMCSDDCGROUP.
        :type: str
        """

        self._org_name = org_name

    @property
    def provider_type(self):
        """
        Gets the provider_type of this VMCSDDCGROUP.

        :return: The provider_type of this VMCSDDCGROUP.
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """
        Sets the provider_type of this VMCSDDCGROUP.

        :param provider_type: The provider_type of this VMCSDDCGROUP.
        :type: str
        """

        self._provider_type = provider_type

    @property
    def deployment_type(self):
        """
        Gets the deployment_type of this VMCSDDCGROUP.

        :return: The deployment_type of this VMCSDDCGROUP.
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """
        Sets the deployment_type of this VMCSDDCGROUP.

        :param deployment_type: The deployment_type of this VMCSDDCGROUP.
        :type: str
        """

        self._deployment_type = deployment_type

    @property
    def state(self):
        """
        Gets the state of this VMCSDDCGROUP.

        :return: The state of this VMCSDDCGROUP.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this VMCSDDCGROUP.

        :param state: The state of this VMCSDDCGROUP.
        :type: str
        """

        self._state = state

    @property
    def l3_connectors(self):
        """
        Gets the l3_connectors of this VMCSDDCGROUP.

        :return: The l3_connectors of this VMCSDDCGROUP.
        :rtype: list[Reference]
        """
        return self._l3_connectors

    @l3_connectors.setter
    def l3_connectors(self, l3_connectors):
        """
        Sets the l3_connectors of this VMCSDDCGROUP.

        :param l3_connectors: The l3_connectors of this VMCSDDCGROUP.
        :type: list[Reference]
        """

        self._l3_connectors = l3_connectors

    @property
    def sddcs(self):
        """
        Gets the sddcs of this VMCSDDCGROUP.

        :return: The sddcs of this VMCSDDCGROUP.
        :rtype: list[Reference]
        """
        return self._sddcs

    @sddcs.setter
    def sddcs(self, sddcs):
        """
        Sets the sddcs of this VMCSDDCGROUP.

        :param sddcs: The sddcs of this VMCSDDCGROUP.
        :type: list[Reference]
        """

        self._sddcs = sddcs

    @property
    def vpcs(self):
        """
        Gets the vpcs of this VMCSDDCGROUP.

        :return: The vpcs of this VMCSDDCGROUP.
        :rtype: list[Reference]
        """
        return self._vpcs

    @vpcs.setter
    def vpcs(self, vpcs):
        """
        Sets the vpcs of this VMCSDDCGROUP.

        :param vpcs: The vpcs of this VMCSDDCGROUP.
        :type: list[Reference]
        """

        self._vpcs = vpcs

    @property
    def direct_connect_gateways(self):
        """
        Gets the direct_connect_gateways of this VMCSDDCGROUP.

        :return: The direct_connect_gateways of this VMCSDDCGROUP.
        :rtype: list[Reference]
        """
        return self._direct_connect_gateways

    @direct_connect_gateways.setter
    def direct_connect_gateways(self, direct_connect_gateways):
        """
        Sets the direct_connect_gateways of this VMCSDDCGROUP.

        :param direct_connect_gateways: The direct_connect_gateways of this VMCSDDCGROUP.
        :type: list[Reference]
        """

        self._direct_connect_gateways = direct_connect_gateways

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VMCSDDCGROUP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
