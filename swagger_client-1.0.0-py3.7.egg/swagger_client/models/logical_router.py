# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LogicalRouter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'entity_type': 'EntityType',
        'sub_types': 'list[int]',
        'manager': 'Reference',
        'neighbor_vrfs': 'list[Reference]',
        'default_gateway_vrfs': 'list[Reference]',
        'default_next_hop_router_interfaces': 'list[Reference]',
        'next_hop_gateways': 'list[str]',
        'ospf': 'str',
        'scope_type': 'str',
        'nsx': 'list[Reference]',
        'status': 'str',
        'layer3_domain': 'Reference',
        'nat_enabled': 'bool',
        'edge_state': 'str',
        'child_vrfs': 'list[Reference]',
        'parent_vrf': 'Reference',
        'nat_domain': 'Reference',
        'vni': 'int',
        'operation_mode': 'str',
        'directly_connected_network': 'list[Reference]',
        'directly_connected_gateway': 'list[Reference]',
        'enforcement_point_uuid': 'str'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'entity_type': 'entity_type',
        'sub_types': 'sub_types',
        'manager': 'manager',
        'neighbor_vrfs': 'neighbor_vrfs',
        'default_gateway_vrfs': 'default_gateway_vrfs',
        'default_next_hop_router_interfaces': 'default_next_hop_router_interfaces',
        'next_hop_gateways': 'next_hop_gateways',
        'ospf': 'ospf',
        'scope_type': 'scope_type',
        'nsx': 'nsx',
        'status': 'status',
        'layer3_domain': 'layer3_domain',
        'nat_enabled': 'nat_enabled',
        'edge_state': 'edge_state',
        'child_vrfs': 'child_vrfs',
        'parent_vrf': 'parent_vrf',
        'nat_domain': 'nat_domain',
        'vni': 'vni',
        'operation_mode': 'operation_mode',
        'directly_connected_network': 'directly_connected_network',
        'directly_connected_gateway': 'directly_connected_gateway',
        'enforcement_point_uuid': 'enforcement_point_uuid'
    }

    def __init__(self, entity_id=None, name=None, entity_type=None, sub_types=None, manager=None, neighbor_vrfs=None, default_gateway_vrfs=None, default_next_hop_router_interfaces=None, next_hop_gateways=None, ospf=None, scope_type=None, nsx=None, status=None, layer3_domain=None, nat_enabled=None, edge_state=None, child_vrfs=None, parent_vrf=None, nat_domain=None, vni=None, operation_mode=None, directly_connected_network=None, directly_connected_gateway=None, enforcement_point_uuid=None):
        """
        LogicalRouter - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._entity_type = None
        self._sub_types = None
        self._manager = None
        self._neighbor_vrfs = None
        self._default_gateway_vrfs = None
        self._default_next_hop_router_interfaces = None
        self._next_hop_gateways = None
        self._ospf = None
        self._scope_type = None
        self._nsx = None
        self._status = None
        self._layer3_domain = None
        self._nat_enabled = None
        self._edge_state = None
        self._child_vrfs = None
        self._parent_vrf = None
        self._nat_domain = None
        self._vni = None
        self._operation_mode = None
        self._directly_connected_network = None
        self._directly_connected_gateway = None
        self._enforcement_point_uuid = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if entity_type is not None:
          self.entity_type = entity_type
        if sub_types is not None:
          self.sub_types = sub_types
        if manager is not None:
          self.manager = manager
        if neighbor_vrfs is not None:
          self.neighbor_vrfs = neighbor_vrfs
        if default_gateway_vrfs is not None:
          self.default_gateway_vrfs = default_gateway_vrfs
        if default_next_hop_router_interfaces is not None:
          self.default_next_hop_router_interfaces = default_next_hop_router_interfaces
        if next_hop_gateways is not None:
          self.next_hop_gateways = next_hop_gateways
        if ospf is not None:
          self.ospf = ospf
        if scope_type is not None:
          self.scope_type = scope_type
        if nsx is not None:
          self.nsx = nsx
        if status is not None:
          self.status = status
        if layer3_domain is not None:
          self.layer3_domain = layer3_domain
        if nat_enabled is not None:
          self.nat_enabled = nat_enabled
        if edge_state is not None:
          self.edge_state = edge_state
        if child_vrfs is not None:
          self.child_vrfs = child_vrfs
        if parent_vrf is not None:
          self.parent_vrf = parent_vrf
        if nat_domain is not None:
          self.nat_domain = nat_domain
        if vni is not None:
          self.vni = vni
        if operation_mode is not None:
          self.operation_mode = operation_mode
        if directly_connected_network is not None:
          self.directly_connected_network = directly_connected_network
        if directly_connected_gateway is not None:
          self.directly_connected_gateway = directly_connected_gateway
        if enforcement_point_uuid is not None:
          self.enforcement_point_uuid = enforcement_point_uuid

    @property
    def entity_id(self):
        """
        Gets the entity_id of this LogicalRouter.
        Entity ID that can be references in detail API calls

        :return: The entity_id of this LogicalRouter.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this LogicalRouter.
        Entity ID that can be references in detail API calls

        :param entity_id: The entity_id of this LogicalRouter.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this LogicalRouter.
        Name of the object

        :return: The name of this LogicalRouter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LogicalRouter.
        Name of the object

        :param name: The name of this LogicalRouter.
        :type: str
        """

        self._name = name

    @property
    def entity_type(self):
        """
        Gets the entity_type of this LogicalRouter.

        :return: The entity_type of this LogicalRouter.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this LogicalRouter.

        :param entity_type: The entity_type of this LogicalRouter.
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def sub_types(self):
        """
        Gets the sub_types of this LogicalRouter.

        :return: The sub_types of this LogicalRouter.
        :rtype: list[int]
        """
        return self._sub_types

    @sub_types.setter
    def sub_types(self, sub_types):
        """
        Sets the sub_types of this LogicalRouter.

        :param sub_types: The sub_types of this LogicalRouter.
        :type: list[int]
        """

        self._sub_types = sub_types

    @property
    def manager(self):
        """
        Gets the manager of this LogicalRouter.

        :return: The manager of this LogicalRouter.
        :rtype: Reference
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """
        Sets the manager of this LogicalRouter.

        :param manager: The manager of this LogicalRouter.
        :type: Reference
        """

        self._manager = manager

    @property
    def neighbor_vrfs(self):
        """
        Gets the neighbor_vrfs of this LogicalRouter.

        :return: The neighbor_vrfs of this LogicalRouter.
        :rtype: list[Reference]
        """
        return self._neighbor_vrfs

    @neighbor_vrfs.setter
    def neighbor_vrfs(self, neighbor_vrfs):
        """
        Sets the neighbor_vrfs of this LogicalRouter.

        :param neighbor_vrfs: The neighbor_vrfs of this LogicalRouter.
        :type: list[Reference]
        """

        self._neighbor_vrfs = neighbor_vrfs

    @property
    def default_gateway_vrfs(self):
        """
        Gets the default_gateway_vrfs of this LogicalRouter.

        :return: The default_gateway_vrfs of this LogicalRouter.
        :rtype: list[Reference]
        """
        return self._default_gateway_vrfs

    @default_gateway_vrfs.setter
    def default_gateway_vrfs(self, default_gateway_vrfs):
        """
        Sets the default_gateway_vrfs of this LogicalRouter.

        :param default_gateway_vrfs: The default_gateway_vrfs of this LogicalRouter.
        :type: list[Reference]
        """

        self._default_gateway_vrfs = default_gateway_vrfs

    @property
    def default_next_hop_router_interfaces(self):
        """
        Gets the default_next_hop_router_interfaces of this LogicalRouter.

        :return: The default_next_hop_router_interfaces of this LogicalRouter.
        :rtype: list[Reference]
        """
        return self._default_next_hop_router_interfaces

    @default_next_hop_router_interfaces.setter
    def default_next_hop_router_interfaces(self, default_next_hop_router_interfaces):
        """
        Sets the default_next_hop_router_interfaces of this LogicalRouter.

        :param default_next_hop_router_interfaces: The default_next_hop_router_interfaces of this LogicalRouter.
        :type: list[Reference]
        """

        self._default_next_hop_router_interfaces = default_next_hop_router_interfaces

    @property
    def next_hop_gateways(self):
        """
        Gets the next_hop_gateways of this LogicalRouter.

        :return: The next_hop_gateways of this LogicalRouter.
        :rtype: list[str]
        """
        return self._next_hop_gateways

    @next_hop_gateways.setter
    def next_hop_gateways(self, next_hop_gateways):
        """
        Sets the next_hop_gateways of this LogicalRouter.

        :param next_hop_gateways: The next_hop_gateways of this LogicalRouter.
        :type: list[str]
        """

        self._next_hop_gateways = next_hop_gateways

    @property
    def ospf(self):
        """
        Gets the ospf of this LogicalRouter.

        :return: The ospf of this LogicalRouter.
        :rtype: str
        """
        return self._ospf

    @ospf.setter
    def ospf(self, ospf):
        """
        Sets the ospf of this LogicalRouter.

        :param ospf: The ospf of this LogicalRouter.
        :type: str
        """

        self._ospf = ospf

    @property
    def scope_type(self):
        """
        Gets the scope_type of this LogicalRouter.

        :return: The scope_type of this LogicalRouter.
        :rtype: str
        """
        return self._scope_type

    @scope_type.setter
    def scope_type(self, scope_type):
        """
        Sets the scope_type of this LogicalRouter.

        :param scope_type: The scope_type of this LogicalRouter.
        :type: str
        """

        self._scope_type = scope_type

    @property
    def nsx(self):
        """
        Gets the nsx of this LogicalRouter.

        :return: The nsx of this LogicalRouter.
        :rtype: list[Reference]
        """
        return self._nsx

    @nsx.setter
    def nsx(self, nsx):
        """
        Sets the nsx of this LogicalRouter.

        :param nsx: The nsx of this LogicalRouter.
        :type: list[Reference]
        """

        self._nsx = nsx

    @property
    def status(self):
        """
        Gets the status of this LogicalRouter.

        :return: The status of this LogicalRouter.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this LogicalRouter.

        :param status: The status of this LogicalRouter.
        :type: str
        """

        self._status = status

    @property
    def layer3_domain(self):
        """
        Gets the layer3_domain of this LogicalRouter.

        :return: The layer3_domain of this LogicalRouter.
        :rtype: Reference
        """
        return self._layer3_domain

    @layer3_domain.setter
    def layer3_domain(self, layer3_domain):
        """
        Sets the layer3_domain of this LogicalRouter.

        :param layer3_domain: The layer3_domain of this LogicalRouter.
        :type: Reference
        """

        self._layer3_domain = layer3_domain

    @property
    def nat_enabled(self):
        """
        Gets the nat_enabled of this LogicalRouter.

        :return: The nat_enabled of this LogicalRouter.
        :rtype: bool
        """
        return self._nat_enabled

    @nat_enabled.setter
    def nat_enabled(self, nat_enabled):
        """
        Sets the nat_enabled of this LogicalRouter.

        :param nat_enabled: The nat_enabled of this LogicalRouter.
        :type: bool
        """

        self._nat_enabled = nat_enabled

    @property
    def edge_state(self):
        """
        Gets the edge_state of this LogicalRouter.

        :return: The edge_state of this LogicalRouter.
        :rtype: str
        """
        return self._edge_state

    @edge_state.setter
    def edge_state(self, edge_state):
        """
        Sets the edge_state of this LogicalRouter.

        :param edge_state: The edge_state of this LogicalRouter.
        :type: str
        """

        self._edge_state = edge_state

    @property
    def child_vrfs(self):
        """
        Gets the child_vrfs of this LogicalRouter.

        :return: The child_vrfs of this LogicalRouter.
        :rtype: list[Reference]
        """
        return self._child_vrfs

    @child_vrfs.setter
    def child_vrfs(self, child_vrfs):
        """
        Sets the child_vrfs of this LogicalRouter.

        :param child_vrfs: The child_vrfs of this LogicalRouter.
        :type: list[Reference]
        """

        self._child_vrfs = child_vrfs

    @property
    def parent_vrf(self):
        """
        Gets the parent_vrf of this LogicalRouter.

        :return: The parent_vrf of this LogicalRouter.
        :rtype: Reference
        """
        return self._parent_vrf

    @parent_vrf.setter
    def parent_vrf(self, parent_vrf):
        """
        Sets the parent_vrf of this LogicalRouter.

        :param parent_vrf: The parent_vrf of this LogicalRouter.
        :type: Reference
        """

        self._parent_vrf = parent_vrf

    @property
    def nat_domain(self):
        """
        Gets the nat_domain of this LogicalRouter.

        :return: The nat_domain of this LogicalRouter.
        :rtype: Reference
        """
        return self._nat_domain

    @nat_domain.setter
    def nat_domain(self, nat_domain):
        """
        Sets the nat_domain of this LogicalRouter.

        :param nat_domain: The nat_domain of this LogicalRouter.
        :type: Reference
        """

        self._nat_domain = nat_domain

    @property
    def vni(self):
        """
        Gets the vni of this LogicalRouter.

        :return: The vni of this LogicalRouter.
        :rtype: int
        """
        return self._vni

    @vni.setter
    def vni(self, vni):
        """
        Sets the vni of this LogicalRouter.

        :param vni: The vni of this LogicalRouter.
        :type: int
        """

        self._vni = vni

    @property
    def operation_mode(self):
        """
        Gets the operation_mode of this LogicalRouter.

        :return: The operation_mode of this LogicalRouter.
        :rtype: str
        """
        return self._operation_mode

    @operation_mode.setter
    def operation_mode(self, operation_mode):
        """
        Sets the operation_mode of this LogicalRouter.

        :param operation_mode: The operation_mode of this LogicalRouter.
        :type: str
        """

        self._operation_mode = operation_mode

    @property
    def directly_connected_network(self):
        """
        Gets the directly_connected_network of this LogicalRouter.

        :return: The directly_connected_network of this LogicalRouter.
        :rtype: list[Reference]
        """
        return self._directly_connected_network

    @directly_connected_network.setter
    def directly_connected_network(self, directly_connected_network):
        """
        Sets the directly_connected_network of this LogicalRouter.

        :param directly_connected_network: The directly_connected_network of this LogicalRouter.
        :type: list[Reference]
        """

        self._directly_connected_network = directly_connected_network

    @property
    def directly_connected_gateway(self):
        """
        Gets the directly_connected_gateway of this LogicalRouter.

        :return: The directly_connected_gateway of this LogicalRouter.
        :rtype: list[Reference]
        """
        return self._directly_connected_gateway

    @directly_connected_gateway.setter
    def directly_connected_gateway(self, directly_connected_gateway):
        """
        Sets the directly_connected_gateway of this LogicalRouter.

        :param directly_connected_gateway: The directly_connected_gateway of this LogicalRouter.
        :type: list[Reference]
        """

        self._directly_connected_gateway = directly_connected_gateway

    @property
    def enforcement_point_uuid(self):
        """
        Gets the enforcement_point_uuid of this LogicalRouter.
        Enforcement Point Unique ID of Logical Router

        :return: The enforcement_point_uuid of this LogicalRouter.
        :rtype: str
        """
        return self._enforcement_point_uuid

    @enforcement_point_uuid.setter
    def enforcement_point_uuid(self, enforcement_point_uuid):
        """
        Sets the enforcement_point_uuid of this LogicalRouter.
        Enforcement Point Unique ID of Logical Router

        :param enforcement_point_uuid: The enforcement_point_uuid of this LogicalRouter.
        :type: str
        """

        self._enforcement_point_uuid = enforcement_point_uuid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LogicalRouter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
