# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProxyResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'proxy_id': 'str',
        'nick_name': 'str',
        'target_ip': 'str',
        'target_port': 'int',
        'connected_entities': 'int',
        'proxy_type': 'str',
        'auth_type': 'str',
        'use_credentials': 'bool',
        'user_name': 'str',
        'is_modifiable': 'bool'
    }

    attribute_map = {
        'proxy_id': 'proxy_id',
        'nick_name': 'nick_name',
        'target_ip': 'target_ip',
        'target_port': 'target_port',
        'connected_entities': 'connected_entities',
        'proxy_type': 'proxy_type',
        'auth_type': 'auth_type',
        'use_credentials': 'use_credentials',
        'user_name': 'user_name',
        'is_modifiable': 'is_modifiable'
    }

    def __init__(self, proxy_id=None, nick_name=None, target_ip=None, target_port=None, connected_entities=None, proxy_type=None, auth_type=None, use_credentials=None, user_name=None, is_modifiable=None):
        """
        ProxyResponse - a model defined in Swagger
        """

        self._proxy_id = None
        self._nick_name = None
        self._target_ip = None
        self._target_port = None
        self._connected_entities = None
        self._proxy_type = None
        self._auth_type = None
        self._use_credentials = None
        self._user_name = None
        self._is_modifiable = None

        if proxy_id is not None:
          self.proxy_id = proxy_id
        if nick_name is not None:
          self.nick_name = nick_name
        if target_ip is not None:
          self.target_ip = target_ip
        if target_port is not None:
          self.target_port = target_port
        if connected_entities is not None:
          self.connected_entities = connected_entities
        if proxy_type is not None:
          self.proxy_type = proxy_type
        if auth_type is not None:
          self.auth_type = auth_type
        if use_credentials is not None:
          self.use_credentials = use_credentials
        if user_name is not None:
          self.user_name = user_name
        if is_modifiable is not None:
          self.is_modifiable = is_modifiable

    @property
    def proxy_id(self):
        """
        Gets the proxy_id of this ProxyResponse.
        Entity Identifier for a web proxy server

        :return: The proxy_id of this ProxyResponse.
        :rtype: str
        """
        return self._proxy_id

    @proxy_id.setter
    def proxy_id(self, proxy_id):
        """
        Sets the proxy_id of this ProxyResponse.
        Entity Identifier for a web proxy server

        :param proxy_id: The proxy_id of this ProxyResponse.
        :type: str
        """

        self._proxy_id = proxy_id

    @property
    def nick_name(self):
        """
        Gets the nick_name of this ProxyResponse.
        Descriptor or identifier for particular web proxy.

        :return: The nick_name of this ProxyResponse.
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """
        Sets the nick_name of this ProxyResponse.
        Descriptor or identifier for particular web proxy.

        :param nick_name: The nick_name of this ProxyResponse.
        :type: str
        """

        self._nick_name = nick_name

    @property
    def target_ip(self):
        """
        Gets the target_ip of this ProxyResponse.
        IP address of web Proxy server

        :return: The target_ip of this ProxyResponse.
        :rtype: str
        """
        return self._target_ip

    @target_ip.setter
    def target_ip(self, target_ip):
        """
        Sets the target_ip of this ProxyResponse.
        IP address of web Proxy server

        :param target_ip: The target_ip of this ProxyResponse.
        :type: str
        """

        self._target_ip = target_ip

    @property
    def target_port(self):
        """
        Gets the target_port of this ProxyResponse.
        Port number of web Proxy server

        :return: The target_port of this ProxyResponse.
        :rtype: int
        """
        return self._target_port

    @target_port.setter
    def target_port(self, target_port):
        """
        Sets the target_port of this ProxyResponse.
        Port number of web Proxy server

        :param target_port: The target_port of this ProxyResponse.
        :type: int
        """

        self._target_port = target_port

    @property
    def connected_entities(self):
        """
        Gets the connected_entities of this ProxyResponse.
        Number of connected entities to a web proxy

        :return: The connected_entities of this ProxyResponse.
        :rtype: int
        """
        return self._connected_entities

    @connected_entities.setter
    def connected_entities(self, connected_entities):
        """
        Sets the connected_entities of this ProxyResponse.
        Number of connected entities to a web proxy

        :param connected_entities: The connected_entities of this ProxyResponse.
        :type: int
        """

        self._connected_entities = connected_entities

    @property
    def proxy_type(self):
        """
        Gets the proxy_type of this ProxyResponse.
        Type of web proxy

        :return: The proxy_type of this ProxyResponse.
        :rtype: str
        """
        return self._proxy_type

    @proxy_type.setter
    def proxy_type(self, proxy_type):
        """
        Sets the proxy_type of this ProxyResponse.
        Type of web proxy

        :param proxy_type: The proxy_type of this ProxyResponse.
        :type: str
        """

        self._proxy_type = proxy_type

    @property
    def auth_type(self):
        """
        Gets the auth_type of this ProxyResponse.
        Type of authentication

        :return: The auth_type of this ProxyResponse.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """
        Sets the auth_type of this ProxyResponse.
        Type of authentication

        :param auth_type: The auth_type of this ProxyResponse.
        :type: str
        """

        self._auth_type = auth_type

    @property
    def use_credentials(self):
        """
        Gets the use_credentials of this ProxyResponse.
        Whether credentials were used earlier when web proxy was configured

        :return: The use_credentials of this ProxyResponse.
        :rtype: bool
        """
        return self._use_credentials

    @use_credentials.setter
    def use_credentials(self, use_credentials):
        """
        Sets the use_credentials of this ProxyResponse.
        Whether credentials were used earlier when web proxy was configured

        :param use_credentials: The use_credentials of this ProxyResponse.
        :type: bool
        """

        self._use_credentials = use_credentials

    @property
    def user_name(self):
        """
        Gets the user_name of this ProxyResponse.
        Username of the authenticated web proxy

        :return: The user_name of this ProxyResponse.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this ProxyResponse.
        Username of the authenticated web proxy

        :param user_name: The user_name of this ProxyResponse.
        :type: str
        """

        self._user_name = user_name

    @property
    def is_modifiable(self):
        """
        Gets the is_modifiable of this ProxyResponse.
        Can the web proxy be edited or deleted from the UI

        :return: The is_modifiable of this ProxyResponse.
        :rtype: bool
        """
        return self._is_modifiable

    @is_modifiable.setter
    def is_modifiable(self, is_modifiable):
        """
        Sets the is_modifiable of this ProxyResponse.
        Can the web proxy be edited or deleted from the UI

        :param is_modifiable: The is_modifiable of this ProxyResponse.
        :type: bool
        """

        self._is_modifiable = is_modifiable

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProxyResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
