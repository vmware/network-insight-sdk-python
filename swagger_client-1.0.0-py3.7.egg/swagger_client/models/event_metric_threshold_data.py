# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EventMetricThresholdData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'threshold_upper_bound': 'int',
        'threshold_lower_bound': 'int',
        'violation_value': 'int',
        'metric': 'str',
        'violation_time_stamp': 'int'
    }

    attribute_map = {
        'threshold_upper_bound': 'threshold_upper_bound',
        'threshold_lower_bound': 'threshold_lower_bound',
        'violation_value': 'violation_value',
        'metric': 'metric',
        'violation_time_stamp': 'violation_time_stamp'
    }

    def __init__(self, threshold_upper_bound=None, threshold_lower_bound=None, violation_value=None, metric=None, violation_time_stamp=None):
        """
        EventMetricThresholdData - a model defined in Swagger
        """

        self._threshold_upper_bound = None
        self._threshold_lower_bound = None
        self._violation_value = None
        self._metric = None
        self._violation_time_stamp = None

        if threshold_upper_bound is not None:
          self.threshold_upper_bound = threshold_upper_bound
        if threshold_lower_bound is not None:
          self.threshold_lower_bound = threshold_lower_bound
        if violation_value is not None:
          self.violation_value = violation_value
        if metric is not None:
          self.metric = metric
        if violation_time_stamp is not None:
          self.violation_time_stamp = violation_time_stamp

    @property
    def threshold_upper_bound(self):
        """
        Gets the threshold_upper_bound of this EventMetricThresholdData.
        Threshold Upper Bound

        :return: The threshold_upper_bound of this EventMetricThresholdData.
        :rtype: int
        """
        return self._threshold_upper_bound

    @threshold_upper_bound.setter
    def threshold_upper_bound(self, threshold_upper_bound):
        """
        Sets the threshold_upper_bound of this EventMetricThresholdData.
        Threshold Upper Bound

        :param threshold_upper_bound: The threshold_upper_bound of this EventMetricThresholdData.
        :type: int
        """

        self._threshold_upper_bound = threshold_upper_bound

    @property
    def threshold_lower_bound(self):
        """
        Gets the threshold_lower_bound of this EventMetricThresholdData.
        Threshold Lower Bound

        :return: The threshold_lower_bound of this EventMetricThresholdData.
        :rtype: int
        """
        return self._threshold_lower_bound

    @threshold_lower_bound.setter
    def threshold_lower_bound(self, threshold_lower_bound):
        """
        Sets the threshold_lower_bound of this EventMetricThresholdData.
        Threshold Lower Bound

        :param threshold_lower_bound: The threshold_lower_bound of this EventMetricThresholdData.
        :type: int
        """

        self._threshold_lower_bound = threshold_lower_bound

    @property
    def violation_value(self):
        """
        Gets the violation_value of this EventMetricThresholdData.
        Violation Value

        :return: The violation_value of this EventMetricThresholdData.
        :rtype: int
        """
        return self._violation_value

    @violation_value.setter
    def violation_value(self, violation_value):
        """
        Sets the violation_value of this EventMetricThresholdData.
        Violation Value

        :param violation_value: The violation_value of this EventMetricThresholdData.
        :type: int
        """

        self._violation_value = violation_value

    @property
    def metric(self):
        """
        Gets the metric of this EventMetricThresholdData.
        Metric Name

        :return: The metric of this EventMetricThresholdData.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """
        Sets the metric of this EventMetricThresholdData.
        Metric Name

        :param metric: The metric of this EventMetricThresholdData.
        :type: str
        """

        self._metric = metric

    @property
    def violation_time_stamp(self):
        """
        Gets the violation_time_stamp of this EventMetricThresholdData.
        Violation Time Stamp in milliseconds

        :return: The violation_time_stamp of this EventMetricThresholdData.
        :rtype: int
        """
        return self._violation_time_stamp

    @violation_time_stamp.setter
    def violation_time_stamp(self, violation_time_stamp):
        """
        Sets the violation_time_stamp of this EventMetricThresholdData.
        Violation Time Stamp in milliseconds

        :param violation_time_stamp: The violation_time_stamp of this EventMetricThresholdData.
        :type: int
        """

        self._violation_time_stamp = violation_time_stamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EventMetricThresholdData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
