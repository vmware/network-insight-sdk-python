# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FilterRuleMemberObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'membership_type': 'str',
        'object_type': 'int',
        'entities': 'list[FilterRuleMemberEntity]',
        'query': 'str'
    }

    attribute_map = {
        'membership_type': 'membershipType',
        'object_type': 'objectType',
        'entities': 'entities',
        'query': 'query'
    }

    def __init__(self, membership_type=None, object_type=None, entities=None, query=None):
        """
        FilterRuleMemberObject - a model defined in Swagger
        """

        self._membership_type = None
        self._object_type = None
        self._entities = None
        self._query = None

        if membership_type is not None:
          self.membership_type = membership_type
        if object_type is not None:
          self.object_type = object_type
        if entities is not None:
          self.entities = entities
        if query is not None:
          self.query = query

    @property
    def membership_type(self):
        """
        Gets the membership_type of this FilterRuleMemberObject.
        Intent type

        :return: The membership_type of this FilterRuleMemberObject.
        :rtype: str
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """
        Sets the membership_type of this FilterRuleMemberObject.
        Intent type

        :param membership_type: The membership_type of this FilterRuleMemberObject.
        :type: str
        """
        allowed_values = ["QUERY_TYPE", "KEYS_TYPE"]
        if membership_type not in allowed_values:
            raise ValueError(
                "Invalid value for `membership_type` ({0}), must be one of {1}"
                .format(membership_type, allowed_values)
            )

        self._membership_type = membership_type

    @property
    def object_type(self):
        """
        Gets the object_type of this FilterRuleMemberObject.
        filter rule entity type

        :return: The object_type of this FilterRuleMemberObject.
        :rtype: int
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this FilterRuleMemberObject.
        filter rule entity type

        :param object_type: The object_type of this FilterRuleMemberObject.
        :type: int
        """

        self._object_type = object_type

    @property
    def entities(self):
        """
        Gets the entities of this FilterRuleMemberObject.

        :return: The entities of this FilterRuleMemberObject.
        :rtype: list[FilterRuleMemberEntity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """
        Sets the entities of this FilterRuleMemberObject.

        :param entities: The entities of this FilterRuleMemberObject.
        :type: list[FilterRuleMemberEntity]
        """

        self._entities = entities

    @property
    def query(self):
        """
        Gets the query of this FilterRuleMemberObject.
        filter rule query

        :return: The query of this FilterRuleMemberObject.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this FilterRuleMemberObject.
        filter rule query

        :param query: The query of this FilterRuleMemberObject.
        :type: str
        """

        self._query = query

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FilterRuleMemberObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
