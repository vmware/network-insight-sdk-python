# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VirtualDisk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'entity_type': 'EntityType',
        'manager': 'Reference',
        'capacity': 'int',
        'virtual_machine': 'Reference',
        'disk_format': 'str',
        'thin_provisioned': 'bool',
        'datastore': 'Reference',
        'filename': 'str'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'entity_type': 'entity_type',
        'manager': 'manager',
        'capacity': 'capacity',
        'virtual_machine': 'virtual_machine',
        'disk_format': 'disk_format',
        'thin_provisioned': 'thin_provisioned',
        'datastore': 'datastore',
        'filename': 'filename'
    }

    def __init__(self, entity_id=None, name=None, entity_type=None, manager=None, capacity=None, virtual_machine=None, disk_format=None, thin_provisioned=None, datastore=None, filename=None):
        """
        VirtualDisk - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._entity_type = None
        self._manager = None
        self._capacity = None
        self._virtual_machine = None
        self._disk_format = None
        self._thin_provisioned = None
        self._datastore = None
        self._filename = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if entity_type is not None:
          self.entity_type = entity_type
        if manager is not None:
          self.manager = manager
        if capacity is not None:
          self.capacity = capacity
        if virtual_machine is not None:
          self.virtual_machine = virtual_machine
        if disk_format is not None:
          self.disk_format = disk_format
        if thin_provisioned is not None:
          self.thin_provisioned = thin_provisioned
        if datastore is not None:
          self.datastore = datastore
        if filename is not None:
          self.filename = filename

    @property
    def entity_id(self):
        """
        Gets the entity_id of this VirtualDisk.
        Entity ID that can be references in detail API calls

        :return: The entity_id of this VirtualDisk.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this VirtualDisk.
        Entity ID that can be references in detail API calls

        :param entity_id: The entity_id of this VirtualDisk.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this VirtualDisk.
        Name of the object

        :return: The name of this VirtualDisk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VirtualDisk.
        Name of the object

        :param name: The name of this VirtualDisk.
        :type: str
        """

        self._name = name

    @property
    def entity_type(self):
        """
        Gets the entity_type of this VirtualDisk.

        :return: The entity_type of this VirtualDisk.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this VirtualDisk.

        :param entity_type: The entity_type of this VirtualDisk.
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def manager(self):
        """
        Gets the manager of this VirtualDisk.

        :return: The manager of this VirtualDisk.
        :rtype: Reference
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """
        Sets the manager of this VirtualDisk.

        :param manager: The manager of this VirtualDisk.
        :type: Reference
        """

        self._manager = manager

    @property
    def capacity(self):
        """
        Gets the capacity of this VirtualDisk.

        :return: The capacity of this VirtualDisk.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """
        Sets the capacity of this VirtualDisk.

        :param capacity: The capacity of this VirtualDisk.
        :type: int
        """

        self._capacity = capacity

    @property
    def virtual_machine(self):
        """
        Gets the virtual_machine of this VirtualDisk.

        :return: The virtual_machine of this VirtualDisk.
        :rtype: Reference
        """
        return self._virtual_machine

    @virtual_machine.setter
    def virtual_machine(self, virtual_machine):
        """
        Sets the virtual_machine of this VirtualDisk.

        :param virtual_machine: The virtual_machine of this VirtualDisk.
        :type: Reference
        """

        self._virtual_machine = virtual_machine

    @property
    def disk_format(self):
        """
        Gets the disk_format of this VirtualDisk.

        :return: The disk_format of this VirtualDisk.
        :rtype: str
        """
        return self._disk_format

    @disk_format.setter
    def disk_format(self, disk_format):
        """
        Sets the disk_format of this VirtualDisk.

        :param disk_format: The disk_format of this VirtualDisk.
        :type: str
        """
        allowed_values = ["invalidFormat", "nativeFormat", "redoLogFormat", "seSparseFormat"]
        if disk_format not in allowed_values:
            raise ValueError(
                "Invalid value for `disk_format` ({0}), must be one of {1}"
                .format(disk_format, allowed_values)
            )

        self._disk_format = disk_format

    @property
    def thin_provisioned(self):
        """
        Gets the thin_provisioned of this VirtualDisk.

        :return: The thin_provisioned of this VirtualDisk.
        :rtype: bool
        """
        return self._thin_provisioned

    @thin_provisioned.setter
    def thin_provisioned(self, thin_provisioned):
        """
        Sets the thin_provisioned of this VirtualDisk.

        :param thin_provisioned: The thin_provisioned of this VirtualDisk.
        :type: bool
        """

        self._thin_provisioned = thin_provisioned

    @property
    def datastore(self):
        """
        Gets the datastore of this VirtualDisk.

        :return: The datastore of this VirtualDisk.
        :rtype: Reference
        """
        return self._datastore

    @datastore.setter
    def datastore(self, datastore):
        """
        Sets the datastore of this VirtualDisk.

        :param datastore: The datastore of this VirtualDisk.
        :type: Reference
        """

        self._datastore = datastore

    @property
    def filename(self):
        """
        Gets the filename of this VirtualDisk.

        :return: The filename of this VirtualDisk.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """
        Sets the filename of this VirtualDisk.

        :param filename: The filename of this VirtualDisk.
        :type: str
        """

        self._filename = filename

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VirtualDisk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
