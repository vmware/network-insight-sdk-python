# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class KubernetesNamespace(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'entity_type': 'EntityType',
        'kubernetes_cluster': 'Reference',
        'manager': 'Reference',
        'status': 'str',
        'l2_networks': 'list[Reference]',
        'vendor_id': 'str',
        'labels': 'list[str]',
        'creation_timestamp': 'str',
        'annotations': 'list[str]'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'entity_type': 'entity_type',
        'kubernetes_cluster': 'kubernetes_cluster',
        'manager': 'manager',
        'status': 'status',
        'l2_networks': 'l2_networks',
        'vendor_id': 'vendor_id',
        'labels': 'labels',
        'creation_timestamp': 'creation_timestamp',
        'annotations': 'annotations'
    }

    def __init__(self, entity_id=None, name=None, entity_type=None, kubernetes_cluster=None, manager=None, status=None, l2_networks=None, vendor_id=None, labels=None, creation_timestamp=None, annotations=None):
        """
        KubernetesNamespace - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._entity_type = None
        self._kubernetes_cluster = None
        self._manager = None
        self._status = None
        self._l2_networks = None
        self._vendor_id = None
        self._labels = None
        self._creation_timestamp = None
        self._annotations = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if entity_type is not None:
          self.entity_type = entity_type
        if kubernetes_cluster is not None:
          self.kubernetes_cluster = kubernetes_cluster
        if manager is not None:
          self.manager = manager
        if status is not None:
          self.status = status
        if l2_networks is not None:
          self.l2_networks = l2_networks
        if vendor_id is not None:
          self.vendor_id = vendor_id
        if labels is not None:
          self.labels = labels
        if creation_timestamp is not None:
          self.creation_timestamp = creation_timestamp
        if annotations is not None:
          self.annotations = annotations

    @property
    def entity_id(self):
        """
        Gets the entity_id of this KubernetesNamespace.
        Entity ID that can be references in detail API calls

        :return: The entity_id of this KubernetesNamespace.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this KubernetesNamespace.
        Entity ID that can be references in detail API calls

        :param entity_id: The entity_id of this KubernetesNamespace.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this KubernetesNamespace.
        Name of the object

        :return: The name of this KubernetesNamespace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this KubernetesNamespace.
        Name of the object

        :param name: The name of this KubernetesNamespace.
        :type: str
        """

        self._name = name

    @property
    def entity_type(self):
        """
        Gets the entity_type of this KubernetesNamespace.

        :return: The entity_type of this KubernetesNamespace.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this KubernetesNamespace.

        :param entity_type: The entity_type of this KubernetesNamespace.
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def kubernetes_cluster(self):
        """
        Gets the kubernetes_cluster of this KubernetesNamespace.

        :return: The kubernetes_cluster of this KubernetesNamespace.
        :rtype: Reference
        """
        return self._kubernetes_cluster

    @kubernetes_cluster.setter
    def kubernetes_cluster(self, kubernetes_cluster):
        """
        Sets the kubernetes_cluster of this KubernetesNamespace.

        :param kubernetes_cluster: The kubernetes_cluster of this KubernetesNamespace.
        :type: Reference
        """

        self._kubernetes_cluster = kubernetes_cluster

    @property
    def manager(self):
        """
        Gets the manager of this KubernetesNamespace.

        :return: The manager of this KubernetesNamespace.
        :rtype: Reference
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """
        Sets the manager of this KubernetesNamespace.

        :param manager: The manager of this KubernetesNamespace.
        :type: Reference
        """

        self._manager = manager

    @property
    def status(self):
        """
        Gets the status of this KubernetesNamespace.

        :return: The status of this KubernetesNamespace.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this KubernetesNamespace.

        :param status: The status of this KubernetesNamespace.
        :type: str
        """

        self._status = status

    @property
    def l2_networks(self):
        """
        Gets the l2_networks of this KubernetesNamespace.

        :return: The l2_networks of this KubernetesNamespace.
        :rtype: list[Reference]
        """
        return self._l2_networks

    @l2_networks.setter
    def l2_networks(self, l2_networks):
        """
        Sets the l2_networks of this KubernetesNamespace.

        :param l2_networks: The l2_networks of this KubernetesNamespace.
        :type: list[Reference]
        """

        self._l2_networks = l2_networks

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this KubernetesNamespace.

        :return: The vendor_id of this KubernetesNamespace.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this KubernetesNamespace.

        :param vendor_id: The vendor_id of this KubernetesNamespace.
        :type: str
        """

        self._vendor_id = vendor_id

    @property
    def labels(self):
        """
        Gets the labels of this KubernetesNamespace.

        :return: The labels of this KubernetesNamespace.
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this KubernetesNamespace.

        :param labels: The labels of this KubernetesNamespace.
        :type: list[str]
        """

        self._labels = labels

    @property
    def creation_timestamp(self):
        """
        Gets the creation_timestamp of this KubernetesNamespace.

        :return: The creation_timestamp of this KubernetesNamespace.
        :rtype: str
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """
        Sets the creation_timestamp of this KubernetesNamespace.

        :param creation_timestamp: The creation_timestamp of this KubernetesNamespace.
        :type: str
        """

        self._creation_timestamp = creation_timestamp

    @property
    def annotations(self):
        """
        Gets the annotations of this KubernetesNamespace.

        :return: The annotations of this KubernetesNamespace.
        :rtype: list[str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """
        Sets the annotations of this KubernetesNamespace.

        :param annotations: The annotations of this KubernetesNamespace.
        :type: list[str]
        """

        self._annotations = annotations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, KubernetesNamespace):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
