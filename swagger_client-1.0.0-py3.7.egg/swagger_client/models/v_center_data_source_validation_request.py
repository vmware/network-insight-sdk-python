# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VCenterDataSourceValidationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip': 'str',
        'fqdn': 'str',
        'proxy_id': 'str',
        'credentials': 'PasswordCredentials',
        'ipfix_enabled': 'bool'
    }

    attribute_map = {
        'ip': 'ip',
        'fqdn': 'fqdn',
        'proxy_id': 'proxy_id',
        'credentials': 'credentials',
        'ipfix_enabled': 'ipfix_enabled'
    }

    def __init__(self, ip=None, fqdn=None, proxy_id=None, credentials=None, ipfix_enabled=False):
        """
        VCenterDataSourceValidationRequest - a model defined in Swagger
        """

        self._ip = None
        self._fqdn = None
        self._proxy_id = None
        self._credentials = None
        self._ipfix_enabled = None

        if ip is not None:
          self.ip = ip
        if fqdn is not None:
          self.fqdn = fqdn
        self.proxy_id = proxy_id
        if credentials is not None:
          self.credentials = credentials
        if ipfix_enabled is not None:
          self.ipfix_enabled = ipfix_enabled

    @property
    def ip(self):
        """
        Gets the ip of this VCenterDataSourceValidationRequest.
        IP address of data source (use either IP or FQDN, not both)

        :return: The ip of this VCenterDataSourceValidationRequest.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this VCenterDataSourceValidationRequest.
        IP address of data source (use either IP or FQDN, not both)

        :param ip: The ip of this VCenterDataSourceValidationRequest.
        :type: str
        """

        self._ip = ip

    @property
    def fqdn(self):
        """
        Gets the fqdn of this VCenterDataSourceValidationRequest.
        Hostname of data source (use either IP or FQDN, not both)

        :return: The fqdn of this VCenterDataSourceValidationRequest.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """
        Sets the fqdn of this VCenterDataSourceValidationRequest.
        Hostname of data source (use either IP or FQDN, not both)

        :param fqdn: The fqdn of this VCenterDataSourceValidationRequest.
        :type: str
        """

        self._fqdn = fqdn

    @property
    def proxy_id(self):
        """
        Gets the proxy_id of this VCenterDataSourceValidationRequest.
        ID of Collector VM which should register this vcenter

        :return: The proxy_id of this VCenterDataSourceValidationRequest.
        :rtype: str
        """
        return self._proxy_id

    @proxy_id.setter
    def proxy_id(self, proxy_id):
        """
        Sets the proxy_id of this VCenterDataSourceValidationRequest.
        ID of Collector VM which should register this vcenter

        :param proxy_id: The proxy_id of this VCenterDataSourceValidationRequest.
        :type: str
        """
        if proxy_id is None:
            raise ValueError("Invalid value for `proxy_id`, must not be `None`")

        self._proxy_id = proxy_id

    @property
    def credentials(self):
        """
        Gets the credentials of this VCenterDataSourceValidationRequest.

        :return: The credentials of this VCenterDataSourceValidationRequest.
        :rtype: PasswordCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """
        Sets the credentials of this VCenterDataSourceValidationRequest.

        :param credentials: The credentials of this VCenterDataSourceValidationRequest.
        :type: PasswordCredentials
        """

        self._credentials = credentials

    @property
    def ipfix_enabled(self):
        """
        Gets the ipfix_enabled of this VCenterDataSourceValidationRequest.
        Whether or not to configure vCenter to send IPFIX to Operations for Networks

        :return: The ipfix_enabled of this VCenterDataSourceValidationRequest.
        :rtype: bool
        """
        return self._ipfix_enabled

    @ipfix_enabled.setter
    def ipfix_enabled(self, ipfix_enabled):
        """
        Sets the ipfix_enabled of this VCenterDataSourceValidationRequest.
        Whether or not to configure vCenter to send IPFIX to Operations for Networks

        :param ipfix_enabled: The ipfix_enabled of this VCenterDataSourceValidationRequest.
        :type: bool
        """

        self._ipfix_enabled = ipfix_enabled

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VCenterDataSourceValidationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
