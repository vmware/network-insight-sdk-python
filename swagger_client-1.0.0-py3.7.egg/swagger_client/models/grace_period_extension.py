# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GracePeriodExtension(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_enabled': 'bool',
        'from_time_stamp': 'int',
        'to_time_stamp': 'int'
    }

    attribute_map = {
        'is_enabled': 'isEnabled',
        'from_time_stamp': 'fromTimeStamp',
        'to_time_stamp': 'toTimeStamp'
    }

    def __init__(self, is_enabled=None, from_time_stamp=None, to_time_stamp=None):
        """
        GracePeriodExtension - a model defined in Swagger
        """

        self._is_enabled = None
        self._from_time_stamp = None
        self._to_time_stamp = None

        if is_enabled is not None:
          self.is_enabled = is_enabled
        if from_time_stamp is not None:
          self.from_time_stamp = from_time_stamp
        if to_time_stamp is not None:
          self.to_time_stamp = to_time_stamp

    @property
    def is_enabled(self):
        """
        Gets the is_enabled of this GracePeriodExtension.
        isEnabled

        :return: The is_enabled of this GracePeriodExtension.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """
        Sets the is_enabled of this GracePeriodExtension.
        isEnabled

        :param is_enabled: The is_enabled of this GracePeriodExtension.
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def from_time_stamp(self):
        """
        Gets the from_time_stamp of this GracePeriodExtension.
        fromTimeStamp

        :return: The from_time_stamp of this GracePeriodExtension.
        :rtype: int
        """
        return self._from_time_stamp

    @from_time_stamp.setter
    def from_time_stamp(self, from_time_stamp):
        """
        Sets the from_time_stamp of this GracePeriodExtension.
        fromTimeStamp

        :param from_time_stamp: The from_time_stamp of this GracePeriodExtension.
        :type: int
        """

        self._from_time_stamp = from_time_stamp

    @property
    def to_time_stamp(self):
        """
        Gets the to_time_stamp of this GracePeriodExtension.
        toTimeStamp

        :return: The to_time_stamp of this GracePeriodExtension.
        :rtype: int
        """
        return self._to_time_stamp

    @to_time_stamp.setter
    def to_time_stamp(self, to_time_stamp):
        """
        Sets the to_time_stamp of this GracePeriodExtension.
        toTimeStamp

        :param to_time_stamp: The to_time_stamp of this GracePeriodExtension.
        :type: int
        """

        self._to_time_stamp = to_time_stamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GracePeriodExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
