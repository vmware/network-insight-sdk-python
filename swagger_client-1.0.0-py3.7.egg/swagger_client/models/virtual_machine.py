# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VirtualMachine(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'entity_type': 'EntityType',
        'ip_addresses': 'list[IpAddress]',
        'default_gateway': 'str',
        'default_gateways': 'list[str]',
        'vnics': 'list[Reference]',
        'security_groups': 'list[Reference]',
        'source_firewall_rules': 'list[RuleSet]',
        'destination_firewall_rules': 'list[RuleSet]',
        'ip_sets': 'list[Reference]',
        'tag_keys': 'list[str]',
        'tag_key_values': 'list[str]',
        'tag_values': 'list[str]',
        'vm_uuid': 'str',
        'manager_uuid': 'str',
        'cluster': 'Reference',
        'resource_pool': 'Reference',
        'security_tags': 'list[Reference]',
        'layer2_networks': 'list[Reference]',
        'host': 'Reference',
        'vlans': 'list[Vlan]',
        'vendor_id': 'str',
        'vcenter_manager': 'Reference',
        'folders': 'list[Reference]',
        'datastores': 'list[Reference]',
        'datacenter': 'Reference',
        'nsx_manager': 'Reference',
        'source_inversion_rules': 'list[RuleSet]',
        'destination_inversion_rules': 'list[RuleSet]',
        'cpu_count': 'int',
        'memory': 'int',
        'os_full_name': 'str',
        'hcx_info': 'HCXInfo'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'entity_type': 'entity_type',
        'ip_addresses': 'ip_addresses',
        'default_gateway': 'default_gateway',
        'default_gateways': 'default_gateways',
        'vnics': 'vnics',
        'security_groups': 'security_groups',
        'source_firewall_rules': 'source_firewall_rules',
        'destination_firewall_rules': 'destination_firewall_rules',
        'ip_sets': 'ip_sets',
        'tag_keys': 'tag_keys',
        'tag_key_values': 'tag_key_values',
        'tag_values': 'tag_values',
        'vm_uuid': 'vm_UUID',
        'manager_uuid': 'manager_uuid',
        'cluster': 'cluster',
        'resource_pool': 'resource_pool',
        'security_tags': 'security_tags',
        'layer2_networks': 'layer2_networks',
        'host': 'host',
        'vlans': 'vlans',
        'vendor_id': 'vendor_id',
        'vcenter_manager': 'vcenter_manager',
        'folders': 'folders',
        'datastores': 'datastores',
        'datacenter': 'datacenter',
        'nsx_manager': 'nsx_manager',
        'source_inversion_rules': 'source_inversion_rules',
        'destination_inversion_rules': 'destination_inversion_rules',
        'cpu_count': 'cpu_count',
        'memory': 'memory',
        'os_full_name': 'os_full_name',
        'hcx_info': 'hcx_info'
    }

    def __init__(self, entity_id=None, name=None, entity_type=None, ip_addresses=None, default_gateway=None, default_gateways=None, vnics=None, security_groups=None, source_firewall_rules=None, destination_firewall_rules=None, ip_sets=None, tag_keys=None, tag_key_values=None, tag_values=None, vm_uuid=None, manager_uuid=None, cluster=None, resource_pool=None, security_tags=None, layer2_networks=None, host=None, vlans=None, vendor_id=None, vcenter_manager=None, folders=None, datastores=None, datacenter=None, nsx_manager=None, source_inversion_rules=None, destination_inversion_rules=None, cpu_count=None, memory=None, os_full_name=None, hcx_info=None):
        """
        VirtualMachine - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._entity_type = None
        self._ip_addresses = None
        self._default_gateway = None
        self._default_gateways = None
        self._vnics = None
        self._security_groups = None
        self._source_firewall_rules = None
        self._destination_firewall_rules = None
        self._ip_sets = None
        self._tag_keys = None
        self._tag_key_values = None
        self._tag_values = None
        self._vm_uuid = None
        self._manager_uuid = None
        self._cluster = None
        self._resource_pool = None
        self._security_tags = None
        self._layer2_networks = None
        self._host = None
        self._vlans = None
        self._vendor_id = None
        self._vcenter_manager = None
        self._folders = None
        self._datastores = None
        self._datacenter = None
        self._nsx_manager = None
        self._source_inversion_rules = None
        self._destination_inversion_rules = None
        self._cpu_count = None
        self._memory = None
        self._os_full_name = None
        self._hcx_info = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if entity_type is not None:
          self.entity_type = entity_type
        if ip_addresses is not None:
          self.ip_addresses = ip_addresses
        if default_gateway is not None:
          self.default_gateway = default_gateway
        if default_gateways is not None:
          self.default_gateways = default_gateways
        if vnics is not None:
          self.vnics = vnics
        if security_groups is not None:
          self.security_groups = security_groups
        if source_firewall_rules is not None:
          self.source_firewall_rules = source_firewall_rules
        if destination_firewall_rules is not None:
          self.destination_firewall_rules = destination_firewall_rules
        if ip_sets is not None:
          self.ip_sets = ip_sets
        if tag_keys is not None:
          self.tag_keys = tag_keys
        if tag_key_values is not None:
          self.tag_key_values = tag_key_values
        if tag_values is not None:
          self.tag_values = tag_values
        if vm_uuid is not None:
          self.vm_uuid = vm_uuid
        if manager_uuid is not None:
          self.manager_uuid = manager_uuid
        if cluster is not None:
          self.cluster = cluster
        if resource_pool is not None:
          self.resource_pool = resource_pool
        if security_tags is not None:
          self.security_tags = security_tags
        if layer2_networks is not None:
          self.layer2_networks = layer2_networks
        if host is not None:
          self.host = host
        if vlans is not None:
          self.vlans = vlans
        if vendor_id is not None:
          self.vendor_id = vendor_id
        if vcenter_manager is not None:
          self.vcenter_manager = vcenter_manager
        if folders is not None:
          self.folders = folders
        if datastores is not None:
          self.datastores = datastores
        if datacenter is not None:
          self.datacenter = datacenter
        if nsx_manager is not None:
          self.nsx_manager = nsx_manager
        if source_inversion_rules is not None:
          self.source_inversion_rules = source_inversion_rules
        if destination_inversion_rules is not None:
          self.destination_inversion_rules = destination_inversion_rules
        if cpu_count is not None:
          self.cpu_count = cpu_count
        if memory is not None:
          self.memory = memory
        if os_full_name is not None:
          self.os_full_name = os_full_name
        if hcx_info is not None:
          self.hcx_info = hcx_info

    @property
    def entity_id(self):
        """
        Gets the entity_id of this VirtualMachine.
        Entity ID that can be references in detail API calls

        :return: The entity_id of this VirtualMachine.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this VirtualMachine.
        Entity ID that can be references in detail API calls

        :param entity_id: The entity_id of this VirtualMachine.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this VirtualMachine.
        Name of the object

        :return: The name of this VirtualMachine.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VirtualMachine.
        Name of the object

        :param name: The name of this VirtualMachine.
        :type: str
        """

        self._name = name

    @property
    def entity_type(self):
        """
        Gets the entity_type of this VirtualMachine.

        :return: The entity_type of this VirtualMachine.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this VirtualMachine.

        :param entity_type: The entity_type of this VirtualMachine.
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def ip_addresses(self):
        """
        Gets the ip_addresses of this VirtualMachine.

        :return: The ip_addresses of this VirtualMachine.
        :rtype: list[IpAddress]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """
        Sets the ip_addresses of this VirtualMachine.

        :param ip_addresses: The ip_addresses of this VirtualMachine.
        :type: list[IpAddress]
        """

        self._ip_addresses = ip_addresses

    @property
    def default_gateway(self):
        """
        Gets the default_gateway of this VirtualMachine.
        This field is deprecated and only contains IPv4 default gateway of the VM, please use default_gateways.

        :return: The default_gateway of this VirtualMachine.
        :rtype: str
        """
        return self._default_gateway

    @default_gateway.setter
    def default_gateway(self, default_gateway):
        """
        Sets the default_gateway of this VirtualMachine.
        This field is deprecated and only contains IPv4 default gateway of the VM, please use default_gateways.

        :param default_gateway: The default_gateway of this VirtualMachine.
        :type: str
        """

        self._default_gateway = default_gateway

    @property
    def default_gateways(self):
        """
        Gets the default_gateways of this VirtualMachine.
        Default gateways of the VM

        :return: The default_gateways of this VirtualMachine.
        :rtype: list[str]
        """
        return self._default_gateways

    @default_gateways.setter
    def default_gateways(self, default_gateways):
        """
        Sets the default_gateways of this VirtualMachine.
        Default gateways of the VM

        :param default_gateways: The default_gateways of this VirtualMachine.
        :type: list[str]
        """

        self._default_gateways = default_gateways

    @property
    def vnics(self):
        """
        Gets the vnics of this VirtualMachine.

        :return: The vnics of this VirtualMachine.
        :rtype: list[Reference]
        """
        return self._vnics

    @vnics.setter
    def vnics(self, vnics):
        """
        Sets the vnics of this VirtualMachine.

        :param vnics: The vnics of this VirtualMachine.
        :type: list[Reference]
        """

        self._vnics = vnics

    @property
    def security_groups(self):
        """
        Gets the security_groups of this VirtualMachine.

        :return: The security_groups of this VirtualMachine.
        :rtype: list[Reference]
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """
        Sets the security_groups of this VirtualMachine.

        :param security_groups: The security_groups of this VirtualMachine.
        :type: list[Reference]
        """

        self._security_groups = security_groups

    @property
    def source_firewall_rules(self):
        """
        Gets the source_firewall_rules of this VirtualMachine.

        :return: The source_firewall_rules of this VirtualMachine.
        :rtype: list[RuleSet]
        """
        return self._source_firewall_rules

    @source_firewall_rules.setter
    def source_firewall_rules(self, source_firewall_rules):
        """
        Sets the source_firewall_rules of this VirtualMachine.

        :param source_firewall_rules: The source_firewall_rules of this VirtualMachine.
        :type: list[RuleSet]
        """

        self._source_firewall_rules = source_firewall_rules

    @property
    def destination_firewall_rules(self):
        """
        Gets the destination_firewall_rules of this VirtualMachine.

        :return: The destination_firewall_rules of this VirtualMachine.
        :rtype: list[RuleSet]
        """
        return self._destination_firewall_rules

    @destination_firewall_rules.setter
    def destination_firewall_rules(self, destination_firewall_rules):
        """
        Sets the destination_firewall_rules of this VirtualMachine.

        :param destination_firewall_rules: The destination_firewall_rules of this VirtualMachine.
        :type: list[RuleSet]
        """

        self._destination_firewall_rules = destination_firewall_rules

    @property
    def ip_sets(self):
        """
        Gets the ip_sets of this VirtualMachine.

        :return: The ip_sets of this VirtualMachine.
        :rtype: list[Reference]
        """
        return self._ip_sets

    @ip_sets.setter
    def ip_sets(self, ip_sets):
        """
        Sets the ip_sets of this VirtualMachine.

        :param ip_sets: The ip_sets of this VirtualMachine.
        :type: list[Reference]
        """

        self._ip_sets = ip_sets

    @property
    def tag_keys(self):
        """
        Gets the tag_keys of this VirtualMachine.

        :return: The tag_keys of this VirtualMachine.
        :rtype: list[str]
        """
        return self._tag_keys

    @tag_keys.setter
    def tag_keys(self, tag_keys):
        """
        Sets the tag_keys of this VirtualMachine.

        :param tag_keys: The tag_keys of this VirtualMachine.
        :type: list[str]
        """

        self._tag_keys = tag_keys

    @property
    def tag_key_values(self):
        """
        Gets the tag_key_values of this VirtualMachine.

        :return: The tag_key_values of this VirtualMachine.
        :rtype: list[str]
        """
        return self._tag_key_values

    @tag_key_values.setter
    def tag_key_values(self, tag_key_values):
        """
        Sets the tag_key_values of this VirtualMachine.

        :param tag_key_values: The tag_key_values of this VirtualMachine.
        :type: list[str]
        """

        self._tag_key_values = tag_key_values

    @property
    def tag_values(self):
        """
        Gets the tag_values of this VirtualMachine.

        :return: The tag_values of this VirtualMachine.
        :rtype: list[str]
        """
        return self._tag_values

    @tag_values.setter
    def tag_values(self, tag_values):
        """
        Sets the tag_values of this VirtualMachine.

        :param tag_values: The tag_values of this VirtualMachine.
        :type: list[str]
        """

        self._tag_values = tag_values

    @property
    def vm_uuid(self):
        """
        Gets the vm_uuid of this VirtualMachine.
        UUID of the VM

        :return: The vm_uuid of this VirtualMachine.
        :rtype: str
        """
        return self._vm_uuid

    @vm_uuid.setter
    def vm_uuid(self, vm_uuid):
        """
        Sets the vm_uuid of this VirtualMachine.
        UUID of the VM

        :param vm_uuid: The vm_uuid of this VirtualMachine.
        :type: str
        """

        self._vm_uuid = vm_uuid

    @property
    def manager_uuid(self):
        """
        Gets the manager_uuid of this VirtualMachine.
        UUID of the Manager

        :return: The manager_uuid of this VirtualMachine.
        :rtype: str
        """
        return self._manager_uuid

    @manager_uuid.setter
    def manager_uuid(self, manager_uuid):
        """
        Sets the manager_uuid of this VirtualMachine.
        UUID of the Manager

        :param manager_uuid: The manager_uuid of this VirtualMachine.
        :type: str
        """

        self._manager_uuid = manager_uuid

    @property
    def cluster(self):
        """
        Gets the cluster of this VirtualMachine.

        :return: The cluster of this VirtualMachine.
        :rtype: Reference
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """
        Sets the cluster of this VirtualMachine.

        :param cluster: The cluster of this VirtualMachine.
        :type: Reference
        """

        self._cluster = cluster

    @property
    def resource_pool(self):
        """
        Gets the resource_pool of this VirtualMachine.

        :return: The resource_pool of this VirtualMachine.
        :rtype: Reference
        """
        return self._resource_pool

    @resource_pool.setter
    def resource_pool(self, resource_pool):
        """
        Sets the resource_pool of this VirtualMachine.

        :param resource_pool: The resource_pool of this VirtualMachine.
        :type: Reference
        """

        self._resource_pool = resource_pool

    @property
    def security_tags(self):
        """
        Gets the security_tags of this VirtualMachine.

        :return: The security_tags of this VirtualMachine.
        :rtype: list[Reference]
        """
        return self._security_tags

    @security_tags.setter
    def security_tags(self, security_tags):
        """
        Sets the security_tags of this VirtualMachine.

        :param security_tags: The security_tags of this VirtualMachine.
        :type: list[Reference]
        """

        self._security_tags = security_tags

    @property
    def layer2_networks(self):
        """
        Gets the layer2_networks of this VirtualMachine.

        :return: The layer2_networks of this VirtualMachine.
        :rtype: list[Reference]
        """
        return self._layer2_networks

    @layer2_networks.setter
    def layer2_networks(self, layer2_networks):
        """
        Sets the layer2_networks of this VirtualMachine.

        :param layer2_networks: The layer2_networks of this VirtualMachine.
        :type: list[Reference]
        """

        self._layer2_networks = layer2_networks

    @property
    def host(self):
        """
        Gets the host of this VirtualMachine.

        :return: The host of this VirtualMachine.
        :rtype: Reference
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this VirtualMachine.

        :param host: The host of this VirtualMachine.
        :type: Reference
        """

        self._host = host

    @property
    def vlans(self):
        """
        Gets the vlans of this VirtualMachine.

        :return: The vlans of this VirtualMachine.
        :rtype: list[Vlan]
        """
        return self._vlans

    @vlans.setter
    def vlans(self, vlans):
        """
        Sets the vlans of this VirtualMachine.

        :param vlans: The vlans of this VirtualMachine.
        :type: list[Vlan]
        """

        self._vlans = vlans

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this VirtualMachine.

        :return: The vendor_id of this VirtualMachine.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this VirtualMachine.

        :param vendor_id: The vendor_id of this VirtualMachine.
        :type: str
        """

        self._vendor_id = vendor_id

    @property
    def vcenter_manager(self):
        """
        Gets the vcenter_manager of this VirtualMachine.

        :return: The vcenter_manager of this VirtualMachine.
        :rtype: Reference
        """
        return self._vcenter_manager

    @vcenter_manager.setter
    def vcenter_manager(self, vcenter_manager):
        """
        Sets the vcenter_manager of this VirtualMachine.

        :param vcenter_manager: The vcenter_manager of this VirtualMachine.
        :type: Reference
        """

        self._vcenter_manager = vcenter_manager

    @property
    def folders(self):
        """
        Gets the folders of this VirtualMachine.

        :return: The folders of this VirtualMachine.
        :rtype: list[Reference]
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """
        Sets the folders of this VirtualMachine.

        :param folders: The folders of this VirtualMachine.
        :type: list[Reference]
        """

        self._folders = folders

    @property
    def datastores(self):
        """
        Gets the datastores of this VirtualMachine.

        :return: The datastores of this VirtualMachine.
        :rtype: list[Reference]
        """
        return self._datastores

    @datastores.setter
    def datastores(self, datastores):
        """
        Sets the datastores of this VirtualMachine.

        :param datastores: The datastores of this VirtualMachine.
        :type: list[Reference]
        """

        self._datastores = datastores

    @property
    def datacenter(self):
        """
        Gets the datacenter of this VirtualMachine.

        :return: The datacenter of this VirtualMachine.
        :rtype: Reference
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """
        Sets the datacenter of this VirtualMachine.

        :param datacenter: The datacenter of this VirtualMachine.
        :type: Reference
        """

        self._datacenter = datacenter

    @property
    def nsx_manager(self):
        """
        Gets the nsx_manager of this VirtualMachine.

        :return: The nsx_manager of this VirtualMachine.
        :rtype: Reference
        """
        return self._nsx_manager

    @nsx_manager.setter
    def nsx_manager(self, nsx_manager):
        """
        Sets the nsx_manager of this VirtualMachine.

        :param nsx_manager: The nsx_manager of this VirtualMachine.
        :type: Reference
        """

        self._nsx_manager = nsx_manager

    @property
    def source_inversion_rules(self):
        """
        Gets the source_inversion_rules of this VirtualMachine.

        :return: The source_inversion_rules of this VirtualMachine.
        :rtype: list[RuleSet]
        """
        return self._source_inversion_rules

    @source_inversion_rules.setter
    def source_inversion_rules(self, source_inversion_rules):
        """
        Sets the source_inversion_rules of this VirtualMachine.

        :param source_inversion_rules: The source_inversion_rules of this VirtualMachine.
        :type: list[RuleSet]
        """

        self._source_inversion_rules = source_inversion_rules

    @property
    def destination_inversion_rules(self):
        """
        Gets the destination_inversion_rules of this VirtualMachine.

        :return: The destination_inversion_rules of this VirtualMachine.
        :rtype: list[RuleSet]
        """
        return self._destination_inversion_rules

    @destination_inversion_rules.setter
    def destination_inversion_rules(self, destination_inversion_rules):
        """
        Sets the destination_inversion_rules of this VirtualMachine.

        :param destination_inversion_rules: The destination_inversion_rules of this VirtualMachine.
        :type: list[RuleSet]
        """

        self._destination_inversion_rules = destination_inversion_rules

    @property
    def cpu_count(self):
        """
        Gets the cpu_count of this VirtualMachine.
        Number of vCPUs this VM has

        :return: The cpu_count of this VirtualMachine.
        :rtype: int
        """
        return self._cpu_count

    @cpu_count.setter
    def cpu_count(self, cpu_count):
        """
        Sets the cpu_count of this VirtualMachine.
        Number of vCPUs this VM has

        :param cpu_count: The cpu_count of this VirtualMachine.
        :type: int
        """

        self._cpu_count = cpu_count

    @property
    def memory(self):
        """
        Gets the memory of this VirtualMachine.
        Amount of memory this VM has in MB.

        :return: The memory of this VirtualMachine.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """
        Sets the memory of this VirtualMachine.
        Amount of memory this VM has in MB.

        :param memory: The memory of this VirtualMachine.
        :type: int
        """

        self._memory = memory

    @property
    def os_full_name(self):
        """
        Gets the os_full_name of this VirtualMachine.
        The Operating System running on this VM

        :return: The os_full_name of this VirtualMachine.
        :rtype: str
        """
        return self._os_full_name

    @os_full_name.setter
    def os_full_name(self, os_full_name):
        """
        Sets the os_full_name of this VirtualMachine.
        The Operating System running on this VM

        :param os_full_name: The os_full_name of this VirtualMachine.
        :type: str
        """

        self._os_full_name = os_full_name

    @property
    def hcx_info(self):
        """
        Gets the hcx_info of this VirtualMachine.

        :return: The hcx_info of this VirtualMachine.
        :rtype: HCXInfo
        """
        return self._hcx_info

    @hcx_info.setter
    def hcx_info(self, hcx_info):
        """
        Sets the hcx_info of this VirtualMachine.

        :param hcx_info: The hcx_info of this VirtualMachine.
        :type: HCXInfo
        """

        self._hcx_info = hcx_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VirtualMachine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
