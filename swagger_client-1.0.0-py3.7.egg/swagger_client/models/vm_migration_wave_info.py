# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VmMigrationWaveInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'entity_name': 'str',
        'mw_name': 'str',
        'mw_id': 'str',
        'group_entity_id': 'str',
        'group_entity_name': 'str'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'entity_name': 'entity_name',
        'mw_name': 'mw_name',
        'mw_id': 'mw_id',
        'group_entity_id': 'group_entity_id',
        'group_entity_name': 'group_entity_name'
    }

    def __init__(self, entity_id=None, entity_name=None, mw_name=None, mw_id=None, group_entity_id=None, group_entity_name=None):
        """
        VmMigrationWaveInfo - a model defined in Swagger
        """

        self._entity_id = None
        self._entity_name = None
        self._mw_name = None
        self._mw_id = None
        self._group_entity_id = None
        self._group_entity_name = None

        if entity_id is not None:
          self.entity_id = entity_id
        if entity_name is not None:
          self.entity_name = entity_name
        if mw_name is not None:
          self.mw_name = mw_name
        if mw_id is not None:
          self.mw_id = mw_id
        if group_entity_id is not None:
          self.group_entity_id = group_entity_id
        if group_entity_name is not None:
          self.group_entity_name = group_entity_name

    @property
    def entity_id(self):
        """
        Gets the entity_id of this VmMigrationWaveInfo.

        :return: The entity_id of this VmMigrationWaveInfo.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this VmMigrationWaveInfo.

        :param entity_id: The entity_id of this VmMigrationWaveInfo.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def entity_name(self):
        """
        Gets the entity_name of this VmMigrationWaveInfo.

        :return: The entity_name of this VmMigrationWaveInfo.
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """
        Sets the entity_name of this VmMigrationWaveInfo.

        :param entity_name: The entity_name of this VmMigrationWaveInfo.
        :type: str
        """

        self._entity_name = entity_name

    @property
    def mw_name(self):
        """
        Gets the mw_name of this VmMigrationWaveInfo.

        :return: The mw_name of this VmMigrationWaveInfo.
        :rtype: str
        """
        return self._mw_name

    @mw_name.setter
    def mw_name(self, mw_name):
        """
        Sets the mw_name of this VmMigrationWaveInfo.

        :param mw_name: The mw_name of this VmMigrationWaveInfo.
        :type: str
        """

        self._mw_name = mw_name

    @property
    def mw_id(self):
        """
        Gets the mw_id of this VmMigrationWaveInfo.

        :return: The mw_id of this VmMigrationWaveInfo.
        :rtype: str
        """
        return self._mw_id

    @mw_id.setter
    def mw_id(self, mw_id):
        """
        Sets the mw_id of this VmMigrationWaveInfo.

        :param mw_id: The mw_id of this VmMigrationWaveInfo.
        :type: str
        """

        self._mw_id = mw_id

    @property
    def group_entity_id(self):
        """
        Gets the group_entity_id of this VmMigrationWaveInfo.

        :return: The group_entity_id of this VmMigrationWaveInfo.
        :rtype: str
        """
        return self._group_entity_id

    @group_entity_id.setter
    def group_entity_id(self, group_entity_id):
        """
        Sets the group_entity_id of this VmMigrationWaveInfo.

        :param group_entity_id: The group_entity_id of this VmMigrationWaveInfo.
        :type: str
        """

        self._group_entity_id = group_entity_id

    @property
    def group_entity_name(self):
        """
        Gets the group_entity_name of this VmMigrationWaveInfo.

        :return: The group_entity_name of this VmMigrationWaveInfo.
        :rtype: str
        """
        return self._group_entity_name

    @group_entity_name.setter
    def group_entity_name(self, group_entity_name):
        """
        Sets the group_entity_name of this VmMigrationWaveInfo.

        :param group_entity_name: The group_entity_name of this VmMigrationWaveInfo.
        :type: str
        """

        self._group_entity_name = group_entity_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VmMigrationWaveInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
