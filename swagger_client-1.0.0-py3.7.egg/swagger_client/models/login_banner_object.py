# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LoginBannerObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_enabled': 'bool',
        'login_message_banner': 'str',
        'user_consent_title': 'str',
        'user_consent_description': 'str'
    }

    attribute_map = {
        'is_enabled': 'is_enabled',
        'login_message_banner': 'login_message_banner',
        'user_consent_title': 'user_consent_title',
        'user_consent_description': 'user_consent_description'
    }

    def __init__(self, is_enabled=None, login_message_banner=None, user_consent_title=None, user_consent_description=None):
        """
        LoginBannerObject - a model defined in Swagger
        """

        self._is_enabled = None
        self._login_message_banner = None
        self._user_consent_title = None
        self._user_consent_description = None

        if is_enabled is not None:
          self.is_enabled = is_enabled
        if login_message_banner is not None:
          self.login_message_banner = login_message_banner
        if user_consent_title is not None:
          self.user_consent_title = user_consent_title
        if user_consent_description is not None:
          self.user_consent_description = user_consent_description

    @property
    def is_enabled(self):
        """
        Gets the is_enabled of this LoginBannerObject.
        Boolean flag to indicate login banner is enabled/disabled.

        :return: The is_enabled of this LoginBannerObject.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """
        Sets the is_enabled of this LoginBannerObject.
        Boolean flag to indicate login banner is enabled/disabled.

        :param is_enabled: The is_enabled of this LoginBannerObject.
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def login_message_banner(self):
        """
        Gets the login_message_banner of this LoginBannerObject.
        A summary of this message along with a link to view it in its entirety will be displayed on the login page. It could be maximum 2,000 characters long with a mix of special characters, alphabets, and numbers.

        :return: The login_message_banner of this LoginBannerObject.
        :rtype: str
        """
        return self._login_message_banner

    @login_message_banner.setter
    def login_message_banner(self, login_message_banner):
        """
        Sets the login_message_banner of this LoginBannerObject.
        A summary of this message along with a link to view it in its entirety will be displayed on the login page. It could be maximum 2,000 characters long with a mix of special characters, alphabets, and numbers.

        :param login_message_banner: The login_message_banner of this LoginBannerObject.
        :type: str
        """

        self._login_message_banner = login_message_banner

    @property
    def user_consent_title(self):
        """
        Gets the user_consent_title of this LoginBannerObject.
        User consent form title

        :return: The user_consent_title of this LoginBannerObject.
        :rtype: str
        """
        return self._user_consent_title

    @user_consent_title.setter
    def user_consent_title(self, user_consent_title):
        """
        Sets the user_consent_title of this LoginBannerObject.
        User consent form title

        :param user_consent_title: The user_consent_title of this LoginBannerObject.
        :type: str
        """

        self._user_consent_title = user_consent_title

    @property
    def user_consent_description(self):
        """
        Gets the user_consent_description of this LoginBannerObject.
        User consent form description. Users will have to accept the consent form before proceeding to login. The contents of user consent description will be displayed on the login page. It could be maximum 2,000 characters long with a mix of special characters, alphabets, and numbers.

        :return: The user_consent_description of this LoginBannerObject.
        :rtype: str
        """
        return self._user_consent_description

    @user_consent_description.setter
    def user_consent_description(self, user_consent_description):
        """
        Sets the user_consent_description of this LoginBannerObject.
        User consent form description. Users will have to accept the consent form before proceeding to login. The contents of user consent description will be displayed on the login page. It could be maximum 2,000 characters long with a mix of special characters, alphabets, and numbers.

        :param user_consent_description: The user_consent_description of this LoginBannerObject.
        :type: str
        """

        self._user_consent_description = user_consent_description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LoginBannerObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
