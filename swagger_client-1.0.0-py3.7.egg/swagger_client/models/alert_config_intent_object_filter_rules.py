# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AlertConfigIntentObjectFilterRules(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_valid': 'str',
        'filter_type': 'str',
        'rules': 'list[FilterMembershipObject]'
    }

    attribute_map = {
        'is_valid': 'isValid',
        'filter_type': 'filterType',
        'rules': 'rules'
    }

    def __init__(self, is_valid=None, filter_type=None, rules=None):
        """
        AlertConfigIntentObjectFilterRules - a model defined in Swagger
        """

        self._is_valid = None
        self._filter_type = None
        self._rules = None

        if is_valid is not None:
          self.is_valid = is_valid
        if filter_type is not None:
          self.filter_type = filter_type
        if rules is not None:
          self.rules = rules

    @property
    def is_valid(self):
        """
        Gets the is_valid of this AlertConfigIntentObjectFilterRules.

        :return: The is_valid of this AlertConfigIntentObjectFilterRules.
        :rtype: str
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """
        Sets the is_valid of this AlertConfigIntentObjectFilterRules.

        :param is_valid: The is_valid of this AlertConfigIntentObjectFilterRules.
        :type: str
        """

        self._is_valid = is_valid

    @property
    def filter_type(self):
        """
        Gets the filter_type of this AlertConfigIntentObjectFilterRules.
        Entities to include/exclude

        :return: The filter_type of this AlertConfigIntentObjectFilterRules.
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """
        Sets the filter_type of this AlertConfigIntentObjectFilterRules.
        Entities to include/exclude

        :param filter_type: The filter_type of this AlertConfigIntentObjectFilterRules.
        :type: str
        """
        allowed_values = ["INCLUSION", "EXCLUSION"]
        if filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_type` ({0}), must be one of {1}"
                .format(filter_type, allowed_values)
            )

        self._filter_type = filter_type

    @property
    def rules(self):
        """
        Gets the rules of this AlertConfigIntentObjectFilterRules.

        :return: The rules of this AlertConfigIntentObjectFilterRules.
        :rtype: list[FilterMembershipObject]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """
        Sets the rules of this AlertConfigIntentObjectFilterRules.

        :param rules: The rules of this AlertConfigIntentObjectFilterRules.
        :type: list[FilterMembershipObject]
        """

        self._rules = rules

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AlertConfigIntentObjectFilterRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
