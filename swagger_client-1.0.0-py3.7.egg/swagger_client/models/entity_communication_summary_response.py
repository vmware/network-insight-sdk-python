# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EntityCommunicationSummaryResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'src_entity_id': 'str',
        'src_entity_type': 'str',
        'dst_entity_id': 'str',
        'dst_entity_type': 'str',
        'flow_properties': 'list[FlowPropertiesResponse]',
        'network_properties': 'list[NetworkPropertiesResponse]'
    }

    attribute_map = {
        'src_entity_id': 'src_entity_id',
        'src_entity_type': 'src_entity_type',
        'dst_entity_id': 'dst_entity_id',
        'dst_entity_type': 'dst_entity_type',
        'flow_properties': 'flow_properties',
        'network_properties': 'network_properties'
    }

    def __init__(self, src_entity_id=None, src_entity_type=None, dst_entity_id=None, dst_entity_type=None, flow_properties=None, network_properties=None):
        """
        EntityCommunicationSummaryResponse - a model defined in Swagger
        """

        self._src_entity_id = None
        self._src_entity_type = None
        self._dst_entity_id = None
        self._dst_entity_type = None
        self._flow_properties = None
        self._network_properties = None

        if src_entity_id is not None:
          self.src_entity_id = src_entity_id
        if src_entity_type is not None:
          self.src_entity_type = src_entity_type
        if dst_entity_id is not None:
          self.dst_entity_id = dst_entity_id
        if dst_entity_type is not None:
          self.dst_entity_type = dst_entity_type
        if flow_properties is not None:
          self.flow_properties = flow_properties
        if network_properties is not None:
          self.network_properties = network_properties

    @property
    def src_entity_id(self):
        """
        Gets the src_entity_id of this EntityCommunicationSummaryResponse.

        :return: The src_entity_id of this EntityCommunicationSummaryResponse.
        :rtype: str
        """
        return self._src_entity_id

    @src_entity_id.setter
    def src_entity_id(self, src_entity_id):
        """
        Sets the src_entity_id of this EntityCommunicationSummaryResponse.

        :param src_entity_id: The src_entity_id of this EntityCommunicationSummaryResponse.
        :type: str
        """

        self._src_entity_id = src_entity_id

    @property
    def src_entity_type(self):
        """
        Gets the src_entity_type of this EntityCommunicationSummaryResponse.

        :return: The src_entity_type of this EntityCommunicationSummaryResponse.
        :rtype: str
        """
        return self._src_entity_type

    @src_entity_type.setter
    def src_entity_type(self, src_entity_type):
        """
        Sets the src_entity_type of this EntityCommunicationSummaryResponse.

        :param src_entity_type: The src_entity_type of this EntityCommunicationSummaryResponse.
        :type: str
        """

        self._src_entity_type = src_entity_type

    @property
    def dst_entity_id(self):
        """
        Gets the dst_entity_id of this EntityCommunicationSummaryResponse.

        :return: The dst_entity_id of this EntityCommunicationSummaryResponse.
        :rtype: str
        """
        return self._dst_entity_id

    @dst_entity_id.setter
    def dst_entity_id(self, dst_entity_id):
        """
        Sets the dst_entity_id of this EntityCommunicationSummaryResponse.

        :param dst_entity_id: The dst_entity_id of this EntityCommunicationSummaryResponse.
        :type: str
        """

        self._dst_entity_id = dst_entity_id

    @property
    def dst_entity_type(self):
        """
        Gets the dst_entity_type of this EntityCommunicationSummaryResponse.

        :return: The dst_entity_type of this EntityCommunicationSummaryResponse.
        :rtype: str
        """
        return self._dst_entity_type

    @dst_entity_type.setter
    def dst_entity_type(self, dst_entity_type):
        """
        Sets the dst_entity_type of this EntityCommunicationSummaryResponse.

        :param dst_entity_type: The dst_entity_type of this EntityCommunicationSummaryResponse.
        :type: str
        """

        self._dst_entity_type = dst_entity_type

    @property
    def flow_properties(self):
        """
        Gets the flow_properties of this EntityCommunicationSummaryResponse.

        :return: The flow_properties of this EntityCommunicationSummaryResponse.
        :rtype: list[FlowPropertiesResponse]
        """
        return self._flow_properties

    @flow_properties.setter
    def flow_properties(self, flow_properties):
        """
        Sets the flow_properties of this EntityCommunicationSummaryResponse.

        :param flow_properties: The flow_properties of this EntityCommunicationSummaryResponse.
        :type: list[FlowPropertiesResponse]
        """

        self._flow_properties = flow_properties

    @property
    def network_properties(self):
        """
        Gets the network_properties of this EntityCommunicationSummaryResponse.

        :return: The network_properties of this EntityCommunicationSummaryResponse.
        :rtype: list[NetworkPropertiesResponse]
        """
        return self._network_properties

    @network_properties.setter
    def network_properties(self, network_properties):
        """
        Sets the network_properties of this EntityCommunicationSummaryResponse.

        :param network_properties: The network_properties of this EntityCommunicationSummaryResponse.
        :type: list[NetworkPropertiesResponse]
        """

        self._network_properties = network_properties

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EntityCommunicationSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
