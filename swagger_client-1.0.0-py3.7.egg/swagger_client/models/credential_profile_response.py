# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CredentialProfileResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'connection_type': 'ConnectionType',
        'account_type': 'AccountType',
        'credential': 'PasswordCredentials',
        'snmp_credential': 'SNMPConfig',
        'created_by': 'str',
        'modified_by': 'str',
        'creation_time': 'int',
        'modified_time': 'int'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'connection_type': 'connection_type',
        'account_type': 'account_type',
        'credential': 'credential',
        'snmp_credential': 'snmp_credential',
        'created_by': 'createdBy',
        'modified_by': 'modifiedBy',
        'creation_time': 'creationTime',
        'modified_time': 'modifiedTime'
    }

    def __init__(self, entity_id=None, name=None, connection_type=None, account_type=None, credential=None, snmp_credential=None, created_by=None, modified_by=None, creation_time=None, modified_time=None):
        """
        CredentialProfileResponse - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._connection_type = None
        self._account_type = None
        self._credential = None
        self._snmp_credential = None
        self._created_by = None
        self._modified_by = None
        self._creation_time = None
        self._modified_time = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if connection_type is not None:
          self.connection_type = connection_type
        if account_type is not None:
          self.account_type = account_type
        if credential is not None:
          self.credential = credential
        if snmp_credential is not None:
          self.snmp_credential = snmp_credential
        if created_by is not None:
          self.created_by = created_by
        if modified_by is not None:
          self.modified_by = modified_by
        if creation_time is not None:
          self.creation_time = creation_time
        if modified_time is not None:
          self.modified_time = modified_time

    @property
    def entity_id(self):
        """
        Gets the entity_id of this CredentialProfileResponse.
        entity ID of credential profile

        :return: The entity_id of this CredentialProfileResponse.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this CredentialProfileResponse.
        entity ID of credential profile

        :param entity_id: The entity_id of this CredentialProfileResponse.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this CredentialProfileResponse.
        name of credential profile

        :return: The name of this CredentialProfileResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CredentialProfileResponse.
        name of credential profile

        :param name: The name of this CredentialProfileResponse.
        :type: str
        """

        self._name = name

    @property
    def connection_type(self):
        """
        Gets the connection_type of this CredentialProfileResponse.

        :return: The connection_type of this CredentialProfileResponse.
        :rtype: ConnectionType
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """
        Sets the connection_type of this CredentialProfileResponse.

        :param connection_type: The connection_type of this CredentialProfileResponse.
        :type: ConnectionType
        """

        self._connection_type = connection_type

    @property
    def account_type(self):
        """
        Gets the account_type of this CredentialProfileResponse.

        :return: The account_type of this CredentialProfileResponse.
        :rtype: AccountType
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """
        Sets the account_type of this CredentialProfileResponse.

        :param account_type: The account_type of this CredentialProfileResponse.
        :type: AccountType
        """

        self._account_type = account_type

    @property
    def credential(self):
        """
        Gets the credential of this CredentialProfileResponse.

        :return: The credential of this CredentialProfileResponse.
        :rtype: PasswordCredentials
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """
        Sets the credential of this CredentialProfileResponse.

        :param credential: The credential of this CredentialProfileResponse.
        :type: PasswordCredentials
        """

        self._credential = credential

    @property
    def snmp_credential(self):
        """
        Gets the snmp_credential of this CredentialProfileResponse.

        :return: The snmp_credential of this CredentialProfileResponse.
        :rtype: SNMPConfig
        """
        return self._snmp_credential

    @snmp_credential.setter
    def snmp_credential(self, snmp_credential):
        """
        Sets the snmp_credential of this CredentialProfileResponse.

        :param snmp_credential: The snmp_credential of this CredentialProfileResponse.
        :type: SNMPConfig
        """

        self._snmp_credential = snmp_credential

    @property
    def created_by(self):
        """
        Gets the created_by of this CredentialProfileResponse.
        User who created the credential profile

        :return: The created_by of this CredentialProfileResponse.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this CredentialProfileResponse.
        User who created the credential profile

        :param created_by: The created_by of this CredentialProfileResponse.
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """
        Gets the modified_by of this CredentialProfileResponse.
        User who modified the credential profile

        :return: The modified_by of this CredentialProfileResponse.
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """
        Sets the modified_by of this CredentialProfileResponse.
        User who modified the credential profile

        :param modified_by: The modified_by of this CredentialProfileResponse.
        :type: str
        """

        self._modified_by = modified_by

    @property
    def creation_time(self):
        """
        Gets the creation_time of this CredentialProfileResponse.
        creation time of credential profile

        :return: The creation_time of this CredentialProfileResponse.
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """
        Sets the creation_time of this CredentialProfileResponse.
        creation time of credential profile

        :param creation_time: The creation_time of this CredentialProfileResponse.
        :type: int
        """

        self._creation_time = creation_time

    @property
    def modified_time(self):
        """
        Gets the modified_time of this CredentialProfileResponse.
        modified time of credential profile

        :return: The modified_time of this CredentialProfileResponse.
        :rtype: int
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """
        Sets the modified_time of this CredentialProfileResponse.
        modified time of credential profile

        :param modified_time: The modified_time of this CredentialProfileResponse.
        :type: int
        """

        self._modified_time = modified_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CredentialProfileResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
