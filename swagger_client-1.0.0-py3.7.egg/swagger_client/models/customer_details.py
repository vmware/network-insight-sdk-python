# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomerDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_id': 'str',
        'customer_id': 'int',
        'org_id': 'str',
        'version': 'str',
        'ui_url': 'str',
        'proxy_ova_download_url': 'str',
        'product_uuid': 'str'
    }

    attribute_map = {
        'deployment_id': 'deploymentId',
        'customer_id': 'customerId',
        'org_id': 'orgId',
        'version': 'version',
        'ui_url': 'uiUrl',
        'proxy_ova_download_url': 'proxyOvaDownloadUrl',
        'product_uuid': 'productUUID'
    }

    def __init__(self, deployment_id=None, customer_id=None, org_id=None, version=None, ui_url=None, proxy_ova_download_url=None, product_uuid=None):
        """
        CustomerDetails - a model defined in Swagger
        """

        self._deployment_id = None
        self._customer_id = None
        self._org_id = None
        self._version = None
        self._ui_url = None
        self._proxy_ova_download_url = None
        self._product_uuid = None

        if deployment_id is not None:
          self.deployment_id = deployment_id
        if customer_id is not None:
          self.customer_id = customer_id
        if org_id is not None:
          self.org_id = org_id
        if version is not None:
          self.version = version
        if ui_url is not None:
          self.ui_url = ui_url
        if proxy_ova_download_url is not None:
          self.proxy_ova_download_url = proxy_ova_download_url
        if product_uuid is not None:
          self.product_uuid = product_uuid

    @property
    def deployment_id(self):
        """
        Gets the deployment_id of this CustomerDetails.
        Deployment Id of the setup

        :return: The deployment_id of this CustomerDetails.
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """
        Sets the deployment_id of this CustomerDetails.
        Deployment Id of the setup

        :param deployment_id: The deployment_id of this CustomerDetails.
        :type: str
        """

        self._deployment_id = deployment_id

    @property
    def customer_id(self):
        """
        Gets the customer_id of this CustomerDetails.
        Customer ID

        :return: The customer_id of this CustomerDetails.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this CustomerDetails.
        Customer ID

        :param customer_id: The customer_id of this CustomerDetails.
        :type: int
        """

        self._customer_id = customer_id

    @property
    def org_id(self):
        """
        Gets the org_id of this CustomerDetails.
        Organization ID( Only in case of VRNI-Cloud)

        :return: The org_id of this CustomerDetails.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """
        Sets the org_id of this CustomerDetails.
        Organization ID( Only in case of VRNI-Cloud)

        :param org_id: The org_id of this CustomerDetails.
        :type: str
        """

        self._org_id = org_id

    @property
    def version(self):
        """
        Gets the version of this CustomerDetails.
        Product version

        :return: The version of this CustomerDetails.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this CustomerDetails.
        Product version

        :param version: The version of this CustomerDetails.
        :type: str
        """

        self._version = version

    @property
    def ui_url(self):
        """
        Gets the ui_url of this CustomerDetails.
        UI URL to login (Only in case of VRNI-Cloud)

        :return: The ui_url of this CustomerDetails.
        :rtype: str
        """
        return self._ui_url

    @ui_url.setter
    def ui_url(self, ui_url):
        """
        Sets the ui_url of this CustomerDetails.
        UI URL to login (Only in case of VRNI-Cloud)

        :param ui_url: The ui_url of this CustomerDetails.
        :type: str
        """

        self._ui_url = ui_url

    @property
    def proxy_ova_download_url(self):
        """
        Gets the proxy_ova_download_url of this CustomerDetails.
        URL to download Operations for Networks Collector (OVA) (Only in case of VRNI-Cloud)

        :return: The proxy_ova_download_url of this CustomerDetails.
        :rtype: str
        """
        return self._proxy_ova_download_url

    @proxy_ova_download_url.setter
    def proxy_ova_download_url(self, proxy_ova_download_url):
        """
        Sets the proxy_ova_download_url of this CustomerDetails.
        URL to download Operations for Networks Collector (OVA) (Only in case of VRNI-Cloud)

        :param proxy_ova_download_url: The proxy_ova_download_url of this CustomerDetails.
        :type: str
        """

        self._proxy_ova_download_url = proxy_ova_download_url

    @property
    def product_uuid(self):
        """
        Gets the product_uuid of this CustomerDetails.
        product UUID

        :return: The product_uuid of this CustomerDetails.
        :rtype: str
        """
        return self._product_uuid

    @product_uuid.setter
    def product_uuid(self, product_uuid):
        """
        Sets the product_uuid of this CustomerDetails.
        product UUID

        :param product_uuid: The product_uuid of this CustomerDetails.
        :type: str
        """

        self._product_uuid = product_uuid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomerDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
