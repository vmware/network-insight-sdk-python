# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomerUsageData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aws_vm_count': 'int',
        'azure_vm_count': 'int',
        'vc_vm_count': 'int',
        'active_flows_count': 'int',
        'devices_count': 'int',
        'total_flows_count': 'int',
        'network_rules_count': 'int',
        'fbad_vm_count': 'int'
    }

    attribute_map = {
        'aws_vm_count': 'awsVMCount',
        'azure_vm_count': 'azureVMCount',
        'vc_vm_count': 'vcVMCount',
        'active_flows_count': 'activeFlowsCount',
        'devices_count': 'devicesCount',
        'total_flows_count': 'totalFlowsCount',
        'network_rules_count': 'networkRulesCount',
        'fbad_vm_count': 'fbadVMCount'
    }

    def __init__(self, aws_vm_count=None, azure_vm_count=None, vc_vm_count=None, active_flows_count=None, devices_count=None, total_flows_count=None, network_rules_count=None, fbad_vm_count=None):
        """
        CustomerUsageData - a model defined in Swagger
        """

        self._aws_vm_count = None
        self._azure_vm_count = None
        self._vc_vm_count = None
        self._active_flows_count = None
        self._devices_count = None
        self._total_flows_count = None
        self._network_rules_count = None
        self._fbad_vm_count = None

        if aws_vm_count is not None:
          self.aws_vm_count = aws_vm_count
        if azure_vm_count is not None:
          self.azure_vm_count = azure_vm_count
        if vc_vm_count is not None:
          self.vc_vm_count = vc_vm_count
        if active_flows_count is not None:
          self.active_flows_count = active_flows_count
        if devices_count is not None:
          self.devices_count = devices_count
        if total_flows_count is not None:
          self.total_flows_count = total_flows_count
        if network_rules_count is not None:
          self.network_rules_count = network_rules_count
        if fbad_vm_count is not None:
          self.fbad_vm_count = fbad_vm_count

    @property
    def aws_vm_count(self):
        """
        Gets the aws_vm_count of this CustomerUsageData.
        Count of AWS VMs

        :return: The aws_vm_count of this CustomerUsageData.
        :rtype: int
        """
        return self._aws_vm_count

    @aws_vm_count.setter
    def aws_vm_count(self, aws_vm_count):
        """
        Sets the aws_vm_count of this CustomerUsageData.
        Count of AWS VMs

        :param aws_vm_count: The aws_vm_count of this CustomerUsageData.
        :type: int
        """

        self._aws_vm_count = aws_vm_count

    @property
    def azure_vm_count(self):
        """
        Gets the azure_vm_count of this CustomerUsageData.
        Count of Azure VMs

        :return: The azure_vm_count of this CustomerUsageData.
        :rtype: int
        """
        return self._azure_vm_count

    @azure_vm_count.setter
    def azure_vm_count(self, azure_vm_count):
        """
        Sets the azure_vm_count of this CustomerUsageData.
        Count of Azure VMs

        :param azure_vm_count: The azure_vm_count of this CustomerUsageData.
        :type: int
        """

        self._azure_vm_count = azure_vm_count

    @property
    def vc_vm_count(self):
        """
        Gets the vc_vm_count of this CustomerUsageData.
        Count of vCenter VMs

        :return: The vc_vm_count of this CustomerUsageData.
        :rtype: int
        """
        return self._vc_vm_count

    @vc_vm_count.setter
    def vc_vm_count(self, vc_vm_count):
        """
        Sets the vc_vm_count of this CustomerUsageData.
        Count of vCenter VMs

        :param vc_vm_count: The vc_vm_count of this CustomerUsageData.
        :type: int
        """

        self._vc_vm_count = vc_vm_count

    @property
    def active_flows_count(self):
        """
        Gets the active_flows_count of this CustomerUsageData.
        Count of Active Flows

        :return: The active_flows_count of this CustomerUsageData.
        :rtype: int
        """
        return self._active_flows_count

    @active_flows_count.setter
    def active_flows_count(self, active_flows_count):
        """
        Sets the active_flows_count of this CustomerUsageData.
        Count of Active Flows

        :param active_flows_count: The active_flows_count of this CustomerUsageData.
        :type: int
        """

        self._active_flows_count = active_flows_count

    @property
    def devices_count(self):
        """
        Gets the devices_count of this CustomerUsageData.
        Count of Devices

        :return: The devices_count of this CustomerUsageData.
        :rtype: int
        """
        return self._devices_count

    @devices_count.setter
    def devices_count(self, devices_count):
        """
        Sets the devices_count of this CustomerUsageData.
        Count of Devices

        :param devices_count: The devices_count of this CustomerUsageData.
        :type: int
        """

        self._devices_count = devices_count

    @property
    def total_flows_count(self):
        """
        Gets the total_flows_count of this CustomerUsageData.
        Count of Total Flows

        :return: The total_flows_count of this CustomerUsageData.
        :rtype: int
        """
        return self._total_flows_count

    @total_flows_count.setter
    def total_flows_count(self, total_flows_count):
        """
        Sets the total_flows_count of this CustomerUsageData.
        Count of Total Flows

        :param total_flows_count: The total_flows_count of this CustomerUsageData.
        :type: int
        """

        self._total_flows_count = total_flows_count

    @property
    def network_rules_count(self):
        """
        Gets the network_rules_count of this CustomerUsageData.
        Count of Network Rules

        :return: The network_rules_count of this CustomerUsageData.
        :rtype: int
        """
        return self._network_rules_count

    @network_rules_count.setter
    def network_rules_count(self, network_rules_count):
        """
        Sets the network_rules_count of this CustomerUsageData.
        Count of Network Rules

        :param network_rules_count: The network_rules_count of this CustomerUsageData.
        :type: int
        """

        self._network_rules_count = network_rules_count

    @property
    def fbad_vm_count(self):
        """
        Gets the fbad_vm_count of this CustomerUsageData.
        Count of fbad VMs

        :return: The fbad_vm_count of this CustomerUsageData.
        :rtype: int
        """
        return self._fbad_vm_count

    @fbad_vm_count.setter
    def fbad_vm_count(self, fbad_vm_count):
        """
        Sets the fbad_vm_count of this CustomerUsageData.
        Count of fbad VMs

        :param fbad_vm_count: The fbad_vm_count of this CustomerUsageData.
        :type: int
        """

        self._fbad_vm_count = fbad_vm_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomerUsageData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
