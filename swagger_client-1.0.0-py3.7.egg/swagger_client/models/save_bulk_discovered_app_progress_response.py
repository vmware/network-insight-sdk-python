# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SaveBulkDiscoveredAppProgressResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'task_name': 'str',
        'status': 'str',
        'progress': 'float',
        'start_time': 'float',
        'app_save_response': 'list[SaveBulkAppProgressResponse]'
    }

    attribute_map = {
        'request_id': 'request_id',
        'task_name': 'task_name',
        'status': 'status',
        'progress': 'progress',
        'start_time': 'start_time',
        'app_save_response': 'app_save_response'
    }

    def __init__(self, request_id=None, task_name=None, status=None, progress=None, start_time=None, app_save_response=None):
        """
        SaveBulkDiscoveredAppProgressResponse - a model defined in Swagger
        """

        self._request_id = None
        self._task_name = None
        self._status = None
        self._progress = None
        self._start_time = None
        self._app_save_response = None

        if request_id is not None:
          self.request_id = request_id
        if task_name is not None:
          self.task_name = task_name
        if status is not None:
          self.status = status
        if progress is not None:
          self.progress = progress
        if start_time is not None:
          self.start_time = start_time
        if app_save_response is not None:
          self.app_save_response = app_save_response

    @property
    def request_id(self):
        """
        Gets the request_id of this SaveBulkDiscoveredAppProgressResponse.
        RequestId of bulk application save request.

        :return: The request_id of this SaveBulkDiscoveredAppProgressResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this SaveBulkDiscoveredAppProgressResponse.
        RequestId of bulk application save request.

        :param request_id: The request_id of this SaveBulkDiscoveredAppProgressResponse.
        :type: str
        """

        self._request_id = request_id

    @property
    def task_name(self):
        """
        Gets the task_name of this SaveBulkDiscoveredAppProgressResponse.

        :return: The task_name of this SaveBulkDiscoveredAppProgressResponse.
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """
        Sets the task_name of this SaveBulkDiscoveredAppProgressResponse.

        :param task_name: The task_name of this SaveBulkDiscoveredAppProgressResponse.
        :type: str
        """

        self._task_name = task_name

    @property
    def status(self):
        """
        Gets the status of this SaveBulkDiscoveredAppProgressResponse.
        Status of bulk application save task (eg. FINISHED).

        :return: The status of this SaveBulkDiscoveredAppProgressResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this SaveBulkDiscoveredAppProgressResponse.
        Status of bulk application save task (eg. FINISHED).

        :param status: The status of this SaveBulkDiscoveredAppProgressResponse.
        :type: str
        """

        self._status = status

    @property
    def progress(self):
        """
        Gets the progress of this SaveBulkDiscoveredAppProgressResponse.
        Percent progress of bulk application save task. Task is complete when progress is 100.

        :return: The progress of this SaveBulkDiscoveredAppProgressResponse.
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """
        Sets the progress of this SaveBulkDiscoveredAppProgressResponse.
        Percent progress of bulk application save task. Task is complete when progress is 100.

        :param progress: The progress of this SaveBulkDiscoveredAppProgressResponse.
        :type: float
        """

        self._progress = progress

    @property
    def start_time(self):
        """
        Gets the start_time of this SaveBulkDiscoveredAppProgressResponse.

        :return: The start_time of this SaveBulkDiscoveredAppProgressResponse.
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this SaveBulkDiscoveredAppProgressResponse.

        :param start_time: The start_time of this SaveBulkDiscoveredAppProgressResponse.
        :type: float
        """

        self._start_time = start_time

    @property
    def app_save_response(self):
        """
        Gets the app_save_response of this SaveBulkDiscoveredAppProgressResponse.
        Every application's save operation response.

        :return: The app_save_response of this SaveBulkDiscoveredAppProgressResponse.
        :rtype: list[SaveBulkAppProgressResponse]
        """
        return self._app_save_response

    @app_save_response.setter
    def app_save_response(self, app_save_response):
        """
        Sets the app_save_response of this SaveBulkDiscoveredAppProgressResponse.
        Every application's save operation response.

        :param app_save_response: The app_save_response of this SaveBulkDiscoveredAppProgressResponse.
        :type: list[SaveBulkAppProgressResponse]
        """

        self._app_save_response = app_save_response

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SaveBulkDiscoveredAppProgressResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
