# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IpNumericRange(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'int',
        'end': 'int',
        'ip_range_start': 'str',
        'ip_range_end': 'str'
    }

    attribute_map = {
        'start': 'start',
        'end': 'end',
        'ip_range_start': 'ip_range_start',
        'ip_range_end': 'ip_range_end'
    }

    def __init__(self, start=None, end=None, ip_range_start=None, ip_range_end=None):
        """
        IpNumericRange - a model defined in Swagger
        """

        self._start = None
        self._end = None
        self._ip_range_start = None
        self._ip_range_end = None

        if start is not None:
          self.start = start
        if end is not None:
          self.end = end
        if ip_range_start is not None:
          self.ip_range_start = ip_range_start
        if ip_range_end is not None:
          self.ip_range_end = ip_range_end

    @property
    def start(self):
        """
        Gets the start of this IpNumericRange.
        Long value of IPv4 range start address (set to 0 for IPv6 ranges)

        :return: The start of this IpNumericRange.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this IpNumericRange.
        Long value of IPv4 range start address (set to 0 for IPv6 ranges)

        :param start: The start of this IpNumericRange.
        :type: int
        """

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this IpNumericRange.
        Long value of IPv4 range end address (set to 0 for IPv6 ranges)

        :return: The end of this IpNumericRange.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this IpNumericRange.
        Long value of IPv4 range end address (set to 0 for IPv6 ranges)

        :param end: The end of this IpNumericRange.
        :type: int
        """

        self._end = end

    @property
    def ip_range_start(self):
        """
        Gets the ip_range_start of this IpNumericRange.
        Start address of IPv6 range (set only for IPv6 ranges)

        :return: The ip_range_start of this IpNumericRange.
        :rtype: str
        """
        return self._ip_range_start

    @ip_range_start.setter
    def ip_range_start(self, ip_range_start):
        """
        Sets the ip_range_start of this IpNumericRange.
        Start address of IPv6 range (set only for IPv6 ranges)

        :param ip_range_start: The ip_range_start of this IpNumericRange.
        :type: str
        """

        self._ip_range_start = ip_range_start

    @property
    def ip_range_end(self):
        """
        Gets the ip_range_end of this IpNumericRange.
        End address of IPv6 range (set only for IPv6 ranges)

        :return: The ip_range_end of this IpNumericRange.
        :rtype: str
        """
        return self._ip_range_end

    @ip_range_end.setter
    def ip_range_end(self, ip_range_end):
        """
        Sets the ip_range_end of this IpNumericRange.
        End address of IPv6 range (set only for IPv6 ranges)

        :param ip_range_end: The ip_range_end of this IpNumericRange.
        :type: str
        """

        self._ip_range_end = ip_range_end

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IpNumericRange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
