# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HCXL2Extension(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'entity_type': 'EntityType',
        'vendor_id': 'str',
        'source_site': 'Reference',
        'destination_site': 'Reference',
        'source_compute': 'Reference',
        'destination_compute': 'Reference',
        'source_l2_network': 'Reference',
        'destination_l2_network': 'Reference',
        'gateway': 'IpAddress',
        'netmask': 'IpAddress',
        'layer3_domain': 'Reference',
        'source_appliance': 'Reference',
        'remote_appliance': 'Reference',
        'proximity_routing': 'bool',
        'mon': 'bool',
        'manager': 'Reference',
        'tunnels': 'list[Reference]'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'entity_type': 'entity_type',
        'vendor_id': 'vendor_id',
        'source_site': 'source_site',
        'destination_site': 'destination_site',
        'source_compute': 'source_compute',
        'destination_compute': 'destination_compute',
        'source_l2_network': 'source_l2_network',
        'destination_l2_network': 'destination_l2_network',
        'gateway': 'gateway',
        'netmask': 'netmask',
        'layer3_domain': 'layer3_domain',
        'source_appliance': 'source_appliance',
        'remote_appliance': 'remote_appliance',
        'proximity_routing': 'proximity_routing',
        'mon': 'mon',
        'manager': 'manager',
        'tunnels': 'tunnels'
    }

    def __init__(self, entity_id=None, name=None, entity_type=None, vendor_id=None, source_site=None, destination_site=None, source_compute=None, destination_compute=None, source_l2_network=None, destination_l2_network=None, gateway=None, netmask=None, layer3_domain=None, source_appliance=None, remote_appliance=None, proximity_routing=None, mon=None, manager=None, tunnels=None):
        """
        HCXL2Extension - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._entity_type = None
        self._vendor_id = None
        self._source_site = None
        self._destination_site = None
        self._source_compute = None
        self._destination_compute = None
        self._source_l2_network = None
        self._destination_l2_network = None
        self._gateway = None
        self._netmask = None
        self._layer3_domain = None
        self._source_appliance = None
        self._remote_appliance = None
        self._proximity_routing = None
        self._mon = None
        self._manager = None
        self._tunnels = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if entity_type is not None:
          self.entity_type = entity_type
        if vendor_id is not None:
          self.vendor_id = vendor_id
        if source_site is not None:
          self.source_site = source_site
        if destination_site is not None:
          self.destination_site = destination_site
        if source_compute is not None:
          self.source_compute = source_compute
        if destination_compute is not None:
          self.destination_compute = destination_compute
        if source_l2_network is not None:
          self.source_l2_network = source_l2_network
        if destination_l2_network is not None:
          self.destination_l2_network = destination_l2_network
        if gateway is not None:
          self.gateway = gateway
        if netmask is not None:
          self.netmask = netmask
        if layer3_domain is not None:
          self.layer3_domain = layer3_domain
        if source_appliance is not None:
          self.source_appliance = source_appliance
        if remote_appliance is not None:
          self.remote_appliance = remote_appliance
        if proximity_routing is not None:
          self.proximity_routing = proximity_routing
        if mon is not None:
          self.mon = mon
        if manager is not None:
          self.manager = manager
        if tunnels is not None:
          self.tunnels = tunnels

    @property
    def entity_id(self):
        """
        Gets the entity_id of this HCXL2Extension.
        Entity ID that can be references in detail API calls

        :return: The entity_id of this HCXL2Extension.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this HCXL2Extension.
        Entity ID that can be references in detail API calls

        :param entity_id: The entity_id of this HCXL2Extension.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this HCXL2Extension.
        Name of the object

        :return: The name of this HCXL2Extension.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this HCXL2Extension.
        Name of the object

        :param name: The name of this HCXL2Extension.
        :type: str
        """

        self._name = name

    @property
    def entity_type(self):
        """
        Gets the entity_type of this HCXL2Extension.

        :return: The entity_type of this HCXL2Extension.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this HCXL2Extension.

        :param entity_type: The entity_type of this HCXL2Extension.
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this HCXL2Extension.

        :return: The vendor_id of this HCXL2Extension.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this HCXL2Extension.

        :param vendor_id: The vendor_id of this HCXL2Extension.
        :type: str
        """

        self._vendor_id = vendor_id

    @property
    def source_site(self):
        """
        Gets the source_site of this HCXL2Extension.

        :return: The source_site of this HCXL2Extension.
        :rtype: Reference
        """
        return self._source_site

    @source_site.setter
    def source_site(self, source_site):
        """
        Sets the source_site of this HCXL2Extension.

        :param source_site: The source_site of this HCXL2Extension.
        :type: Reference
        """

        self._source_site = source_site

    @property
    def destination_site(self):
        """
        Gets the destination_site of this HCXL2Extension.

        :return: The destination_site of this HCXL2Extension.
        :rtype: Reference
        """
        return self._destination_site

    @destination_site.setter
    def destination_site(self, destination_site):
        """
        Sets the destination_site of this HCXL2Extension.

        :param destination_site: The destination_site of this HCXL2Extension.
        :type: Reference
        """

        self._destination_site = destination_site

    @property
    def source_compute(self):
        """
        Gets the source_compute of this HCXL2Extension.

        :return: The source_compute of this HCXL2Extension.
        :rtype: Reference
        """
        return self._source_compute

    @source_compute.setter
    def source_compute(self, source_compute):
        """
        Sets the source_compute of this HCXL2Extension.

        :param source_compute: The source_compute of this HCXL2Extension.
        :type: Reference
        """

        self._source_compute = source_compute

    @property
    def destination_compute(self):
        """
        Gets the destination_compute of this HCXL2Extension.

        :return: The destination_compute of this HCXL2Extension.
        :rtype: Reference
        """
        return self._destination_compute

    @destination_compute.setter
    def destination_compute(self, destination_compute):
        """
        Sets the destination_compute of this HCXL2Extension.

        :param destination_compute: The destination_compute of this HCXL2Extension.
        :type: Reference
        """

        self._destination_compute = destination_compute

    @property
    def source_l2_network(self):
        """
        Gets the source_l2_network of this HCXL2Extension.

        :return: The source_l2_network of this HCXL2Extension.
        :rtype: Reference
        """
        return self._source_l2_network

    @source_l2_network.setter
    def source_l2_network(self, source_l2_network):
        """
        Sets the source_l2_network of this HCXL2Extension.

        :param source_l2_network: The source_l2_network of this HCXL2Extension.
        :type: Reference
        """

        self._source_l2_network = source_l2_network

    @property
    def destination_l2_network(self):
        """
        Gets the destination_l2_network of this HCXL2Extension.

        :return: The destination_l2_network of this HCXL2Extension.
        :rtype: Reference
        """
        return self._destination_l2_network

    @destination_l2_network.setter
    def destination_l2_network(self, destination_l2_network):
        """
        Sets the destination_l2_network of this HCXL2Extension.

        :param destination_l2_network: The destination_l2_network of this HCXL2Extension.
        :type: Reference
        """

        self._destination_l2_network = destination_l2_network

    @property
    def gateway(self):
        """
        Gets the gateway of this HCXL2Extension.

        :return: The gateway of this HCXL2Extension.
        :rtype: IpAddress
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this HCXL2Extension.

        :param gateway: The gateway of this HCXL2Extension.
        :type: IpAddress
        """

        self._gateway = gateway

    @property
    def netmask(self):
        """
        Gets the netmask of this HCXL2Extension.

        :return: The netmask of this HCXL2Extension.
        :rtype: IpAddress
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """
        Sets the netmask of this HCXL2Extension.

        :param netmask: The netmask of this HCXL2Extension.
        :type: IpAddress
        """

        self._netmask = netmask

    @property
    def layer3_domain(self):
        """
        Gets the layer3_domain of this HCXL2Extension.

        :return: The layer3_domain of this HCXL2Extension.
        :rtype: Reference
        """
        return self._layer3_domain

    @layer3_domain.setter
    def layer3_domain(self, layer3_domain):
        """
        Sets the layer3_domain of this HCXL2Extension.

        :param layer3_domain: The layer3_domain of this HCXL2Extension.
        :type: Reference
        """

        self._layer3_domain = layer3_domain

    @property
    def source_appliance(self):
        """
        Gets the source_appliance of this HCXL2Extension.

        :return: The source_appliance of this HCXL2Extension.
        :rtype: Reference
        """
        return self._source_appliance

    @source_appliance.setter
    def source_appliance(self, source_appliance):
        """
        Sets the source_appliance of this HCXL2Extension.

        :param source_appliance: The source_appliance of this HCXL2Extension.
        :type: Reference
        """

        self._source_appliance = source_appliance

    @property
    def remote_appliance(self):
        """
        Gets the remote_appliance of this HCXL2Extension.

        :return: The remote_appliance of this HCXL2Extension.
        :rtype: Reference
        """
        return self._remote_appliance

    @remote_appliance.setter
    def remote_appliance(self, remote_appliance):
        """
        Sets the remote_appliance of this HCXL2Extension.

        :param remote_appliance: The remote_appliance of this HCXL2Extension.
        :type: Reference
        """

        self._remote_appliance = remote_appliance

    @property
    def proximity_routing(self):
        """
        Gets the proximity_routing of this HCXL2Extension.

        :return: The proximity_routing of this HCXL2Extension.
        :rtype: bool
        """
        return self._proximity_routing

    @proximity_routing.setter
    def proximity_routing(self, proximity_routing):
        """
        Sets the proximity_routing of this HCXL2Extension.

        :param proximity_routing: The proximity_routing of this HCXL2Extension.
        :type: bool
        """

        self._proximity_routing = proximity_routing

    @property
    def mon(self):
        """
        Gets the mon of this HCXL2Extension.

        :return: The mon of this HCXL2Extension.
        :rtype: bool
        """
        return self._mon

    @mon.setter
    def mon(self, mon):
        """
        Sets the mon of this HCXL2Extension.

        :param mon: The mon of this HCXL2Extension.
        :type: bool
        """

        self._mon = mon

    @property
    def manager(self):
        """
        Gets the manager of this HCXL2Extension.

        :return: The manager of this HCXL2Extension.
        :rtype: Reference
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """
        Sets the manager of this HCXL2Extension.

        :param manager: The manager of this HCXL2Extension.
        :type: Reference
        """

        self._manager = manager

    @property
    def tunnels(self):
        """
        Gets the tunnels of this HCXL2Extension.

        :return: The tunnels of this HCXL2Extension.
        :rtype: list[Reference]
        """
        return self._tunnels

    @tunnels.setter
    def tunnels(self, tunnels):
        """
        Sets the tunnels of this HCXL2Extension.

        :param tunnels: The tunnels of this HCXL2Extension.
        :type: list[Reference]
        """

        self._tunnels = tunnels

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HCXL2Extension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
