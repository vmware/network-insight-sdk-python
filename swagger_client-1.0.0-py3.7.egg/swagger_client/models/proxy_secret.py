# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProxySecret(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'secret': 'str',
        'validity_epoch': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'secret': 'secret',
        'validity_epoch': 'validityEpoch',
        'uuid': 'uuid'
    }

    def __init__(self, secret=None, validity_epoch=None, uuid=None):
        """
        ProxySecret - a model defined in Swagger
        """

        self._secret = None
        self._validity_epoch = None
        self._uuid = None

        if secret is not None:
          self.secret = secret
        if validity_epoch is not None:
          self.validity_epoch = validity_epoch
        if uuid is not None:
          self.uuid = uuid

    @property
    def secret(self):
        """
        Gets the secret of this ProxySecret.
        Shared secret which will be needed to import the Operations for Networks collector virtual appliance.

        :return: The secret of this ProxySecret.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """
        Sets the secret of this ProxySecret.
        Shared secret which will be needed to import the Operations for Networks collector virtual appliance.

        :param secret: The secret of this ProxySecret.
        :type: str
        """

        self._secret = secret

    @property
    def validity_epoch(self):
        """
        Gets the validity_epoch of this ProxySecret.
        Validity of shared secret in epoch time (millis).

        :return: The validity_epoch of this ProxySecret.
        :rtype: int
        """
        return self._validity_epoch

    @validity_epoch.setter
    def validity_epoch(self, validity_epoch):
        """
        Sets the validity_epoch of this ProxySecret.
        Validity of shared secret in epoch time (millis).

        :param validity_epoch: The validity_epoch of this ProxySecret.
        :type: int
        """

        self._validity_epoch = validity_epoch

    @property
    def uuid(self):
        """
        Gets the uuid of this ProxySecret.
        Unique ID associated with generated shared secret

        :return: The uuid of this ProxySecret.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this ProxySecret.
        Unique ID associated with generated shared secret

        :param uuid: The uuid of this ProxySecret.
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProxySecret):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
