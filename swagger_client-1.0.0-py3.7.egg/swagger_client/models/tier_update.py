# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TierUpdate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'basic_update_info': 'BasicUpdateInfo',
        'vms': 'list[BasicUpdateInfo]',
        'physical_ips': 'list[BasicUpdateInfo]',
        'kubernetes_services': 'list[BasicUpdateInfo]'
    }

    attribute_map = {
        'basic_update_info': 'basic_update_info',
        'vms': 'vms',
        'physical_ips': 'physical_ips',
        'kubernetes_services': 'kubernetes_services'
    }

    def __init__(self, basic_update_info=None, vms=None, physical_ips=None, kubernetes_services=None):
        """
        TierUpdate - a model defined in Swagger
        """

        self._basic_update_info = None
        self._vms = None
        self._physical_ips = None
        self._kubernetes_services = None

        if basic_update_info is not None:
          self.basic_update_info = basic_update_info
        if vms is not None:
          self.vms = vms
        if physical_ips is not None:
          self.physical_ips = physical_ips
        if kubernetes_services is not None:
          self.kubernetes_services = kubernetes_services

    @property
    def basic_update_info(self):
        """
        Gets the basic_update_info of this TierUpdate.

        :return: The basic_update_info of this TierUpdate.
        :rtype: BasicUpdateInfo
        """
        return self._basic_update_info

    @basic_update_info.setter
    def basic_update_info(self, basic_update_info):
        """
        Sets the basic_update_info of this TierUpdate.

        :param basic_update_info: The basic_update_info of this TierUpdate.
        :type: BasicUpdateInfo
        """

        self._basic_update_info = basic_update_info

    @property
    def vms(self):
        """
        Gets the vms of this TierUpdate.

        :return: The vms of this TierUpdate.
        :rtype: list[BasicUpdateInfo]
        """
        return self._vms

    @vms.setter
    def vms(self, vms):
        """
        Sets the vms of this TierUpdate.

        :param vms: The vms of this TierUpdate.
        :type: list[BasicUpdateInfo]
        """

        self._vms = vms

    @property
    def physical_ips(self):
        """
        Gets the physical_ips of this TierUpdate.

        :return: The physical_ips of this TierUpdate.
        :rtype: list[BasicUpdateInfo]
        """
        return self._physical_ips

    @physical_ips.setter
    def physical_ips(self, physical_ips):
        """
        Sets the physical_ips of this TierUpdate.

        :param physical_ips: The physical_ips of this TierUpdate.
        :type: list[BasicUpdateInfo]
        """

        self._physical_ips = physical_ips

    @property
    def kubernetes_services(self):
        """
        Gets the kubernetes_services of this TierUpdate.

        :return: The kubernetes_services of this TierUpdate.
        :rtype: list[BasicUpdateInfo]
        """
        return self._kubernetes_services

    @kubernetes_services.setter
    def kubernetes_services(self, kubernetes_services):
        """
        Sets the kubernetes_services of this TierUpdate.

        :param kubernetes_services: The kubernetes_services of this TierUpdate.
        :type: list[BasicUpdateInfo]
        """

        self._kubernetes_services = kubernetes_services

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TierUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
