# coding: utf-8

"""
    VMware Aria Operations for Networks API Reference

    Operations for Networks API Reference

    OpenAPI spec version: 6.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LicenseUsageEnforcement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_uuid': 'str',
        'product_primary_hostname': 'str',
        'metadata_version': 'str',
        'is_enforcement_enabled': 'bool',
        'last_usage_updated_timestamp': 'int',
        'lcm_sync_time_stamp': 'str',
        'is_actions_enabled': 'bool',
        'action_policy': 'dict(str, list[str])',
        'grace_period_extension': 'GracePeriodExtension',
        'managed_by': 'ManagedBy',
        'properties': 'Properties'
    }

    attribute_map = {
        'product_uuid': 'productUUID',
        'product_primary_hostname': 'productPrimaryHostname',
        'metadata_version': 'metadataVersion',
        'is_enforcement_enabled': 'isEnforcementEnabled',
        'last_usage_updated_timestamp': 'lastUsageUpdatedTimestamp',
        'lcm_sync_time_stamp': 'lcmSyncTimeStamp',
        'is_actions_enabled': 'isActionsEnabled',
        'action_policy': 'actionPolicy',
        'grace_period_extension': 'gracePeriodExtension',
        'managed_by': 'managedBy',
        'properties': 'properties'
    }

    def __init__(self, product_uuid=None, product_primary_hostname=None, metadata_version=None, is_enforcement_enabled=None, last_usage_updated_timestamp=None, lcm_sync_time_stamp=None, is_actions_enabled=None, action_policy=None, grace_period_extension=None, managed_by=None, properties=None):
        """
        LicenseUsageEnforcement - a model defined in Swagger
        """

        self._product_uuid = None
        self._product_primary_hostname = None
        self._metadata_version = None
        self._is_enforcement_enabled = None
        self._last_usage_updated_timestamp = None
        self._lcm_sync_time_stamp = None
        self._is_actions_enabled = None
        self._action_policy = None
        self._grace_period_extension = None
        self._managed_by = None
        self._properties = None

        if product_uuid is not None:
          self.product_uuid = product_uuid
        if product_primary_hostname is not None:
          self.product_primary_hostname = product_primary_hostname
        if metadata_version is not None:
          self.metadata_version = metadata_version
        if is_enforcement_enabled is not None:
          self.is_enforcement_enabled = is_enforcement_enabled
        if last_usage_updated_timestamp is not None:
          self.last_usage_updated_timestamp = last_usage_updated_timestamp
        if lcm_sync_time_stamp is not None:
          self.lcm_sync_time_stamp = lcm_sync_time_stamp
        if is_actions_enabled is not None:
          self.is_actions_enabled = is_actions_enabled
        if action_policy is not None:
          self.action_policy = action_policy
        if grace_period_extension is not None:
          self.grace_period_extension = grace_period_extension
        if managed_by is not None:
          self.managed_by = managed_by
        if properties is not None:
          self.properties = properties

    @property
    def product_uuid(self):
        """
        Gets the product_uuid of this LicenseUsageEnforcement.
        UUID of the product

        :return: The product_uuid of this LicenseUsageEnforcement.
        :rtype: str
        """
        return self._product_uuid

    @product_uuid.setter
    def product_uuid(self, product_uuid):
        """
        Sets the product_uuid of this LicenseUsageEnforcement.
        UUID of the product

        :param product_uuid: The product_uuid of this LicenseUsageEnforcement.
        :type: str
        """

        self._product_uuid = product_uuid

    @property
    def product_primary_hostname(self):
        """
        Gets the product_primary_hostname of this LicenseUsageEnforcement.
        Primary Hostname of the product

        :return: The product_primary_hostname of this LicenseUsageEnforcement.
        :rtype: str
        """
        return self._product_primary_hostname

    @product_primary_hostname.setter
    def product_primary_hostname(self, product_primary_hostname):
        """
        Sets the product_primary_hostname of this LicenseUsageEnforcement.
        Primary Hostname of the product

        :param product_primary_hostname: The product_primary_hostname of this LicenseUsageEnforcement.
        :type: str
        """

        self._product_primary_hostname = product_primary_hostname

    @property
    def metadata_version(self):
        """
        Gets the metadata_version of this LicenseUsageEnforcement.
        Metadata version of the product

        :return: The metadata_version of this LicenseUsageEnforcement.
        :rtype: str
        """
        return self._metadata_version

    @metadata_version.setter
    def metadata_version(self, metadata_version):
        """
        Sets the metadata_version of this LicenseUsageEnforcement.
        Metadata version of the product

        :param metadata_version: The metadata_version of this LicenseUsageEnforcement.
        :type: str
        """

        self._metadata_version = metadata_version

    @property
    def is_enforcement_enabled(self):
        """
        Gets the is_enforcement_enabled of this LicenseUsageEnforcement.
        isEnforcementEnabled

        :return: The is_enforcement_enabled of this LicenseUsageEnforcement.
        :rtype: bool
        """
        return self._is_enforcement_enabled

    @is_enforcement_enabled.setter
    def is_enforcement_enabled(self, is_enforcement_enabled):
        """
        Sets the is_enforcement_enabled of this LicenseUsageEnforcement.
        isEnforcementEnabled

        :param is_enforcement_enabled: The is_enforcement_enabled of this LicenseUsageEnforcement.
        :type: bool
        """

        self._is_enforcement_enabled = is_enforcement_enabled

    @property
    def last_usage_updated_timestamp(self):
        """
        Gets the last_usage_updated_timestamp of this LicenseUsageEnforcement.
        lastUsageUpdatedTimestamp

        :return: The last_usage_updated_timestamp of this LicenseUsageEnforcement.
        :rtype: int
        """
        return self._last_usage_updated_timestamp

    @last_usage_updated_timestamp.setter
    def last_usage_updated_timestamp(self, last_usage_updated_timestamp):
        """
        Sets the last_usage_updated_timestamp of this LicenseUsageEnforcement.
        lastUsageUpdatedTimestamp

        :param last_usage_updated_timestamp: The last_usage_updated_timestamp of this LicenseUsageEnforcement.
        :type: int
        """

        self._last_usage_updated_timestamp = last_usage_updated_timestamp

    @property
    def lcm_sync_time_stamp(self):
        """
        Gets the lcm_sync_time_stamp of this LicenseUsageEnforcement.
        lcmSyncTimeStamp

        :return: The lcm_sync_time_stamp of this LicenseUsageEnforcement.
        :rtype: str
        """
        return self._lcm_sync_time_stamp

    @lcm_sync_time_stamp.setter
    def lcm_sync_time_stamp(self, lcm_sync_time_stamp):
        """
        Sets the lcm_sync_time_stamp of this LicenseUsageEnforcement.
        lcmSyncTimeStamp

        :param lcm_sync_time_stamp: The lcm_sync_time_stamp of this LicenseUsageEnforcement.
        :type: str
        """

        self._lcm_sync_time_stamp = lcm_sync_time_stamp

    @property
    def is_actions_enabled(self):
        """
        Gets the is_actions_enabled of this LicenseUsageEnforcement.
        isActionsEnabled

        :return: The is_actions_enabled of this LicenseUsageEnforcement.
        :rtype: bool
        """
        return self._is_actions_enabled

    @is_actions_enabled.setter
    def is_actions_enabled(self, is_actions_enabled):
        """
        Sets the is_actions_enabled of this LicenseUsageEnforcement.
        isActionsEnabled

        :param is_actions_enabled: The is_actions_enabled of this LicenseUsageEnforcement.
        :type: bool
        """

        self._is_actions_enabled = is_actions_enabled

    @property
    def action_policy(self):
        """
        Gets the action_policy of this LicenseUsageEnforcement.
        actionPolicy

        :return: The action_policy of this LicenseUsageEnforcement.
        :rtype: dict(str, list[str])
        """
        return self._action_policy

    @action_policy.setter
    def action_policy(self, action_policy):
        """
        Sets the action_policy of this LicenseUsageEnforcement.
        actionPolicy

        :param action_policy: The action_policy of this LicenseUsageEnforcement.
        :type: dict(str, list[str])
        """

        self._action_policy = action_policy

    @property
    def grace_period_extension(self):
        """
        Gets the grace_period_extension of this LicenseUsageEnforcement.
        gracePeriodExtension

        :return: The grace_period_extension of this LicenseUsageEnforcement.
        :rtype: GracePeriodExtension
        """
        return self._grace_period_extension

    @grace_period_extension.setter
    def grace_period_extension(self, grace_period_extension):
        """
        Sets the grace_period_extension of this LicenseUsageEnforcement.
        gracePeriodExtension

        :param grace_period_extension: The grace_period_extension of this LicenseUsageEnforcement.
        :type: GracePeriodExtension
        """

        self._grace_period_extension = grace_period_extension

    @property
    def managed_by(self):
        """
        Gets the managed_by of this LicenseUsageEnforcement.
        managedBy

        :return: The managed_by of this LicenseUsageEnforcement.
        :rtype: ManagedBy
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """
        Sets the managed_by of this LicenseUsageEnforcement.
        managedBy

        :param managed_by: The managed_by of this LicenseUsageEnforcement.
        :type: ManagedBy
        """

        self._managed_by = managed_by

    @property
    def properties(self):
        """
        Gets the properties of this LicenseUsageEnforcement.
        properties

        :return: The properties of this LicenseUsageEnforcement.
        :rtype: Properties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this LicenseUsageEnforcement.
        properties

        :param properties: The properties of this LicenseUsageEnforcement.
        :type: Properties
        """

        self._properties = properties

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LicenseUsageEnforcement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
