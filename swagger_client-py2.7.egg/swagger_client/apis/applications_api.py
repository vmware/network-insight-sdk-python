# coding: utf-8

"""
    vRealize Network Insight API Reference

    vRealize Network Insight API Reference

    OpenAPI spec version: 1.1.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ApplicationsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_application(self, body, **kwargs):
        """
        Create an application
        Application is a group of tiers. A tier is a group of virtual machines based on membership criteria. Tiers are bound to single application. An application name is unique and should not conflict with another application name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_application(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApplicationRequest body: (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_application_with_http_info(body, **kwargs)
        else:
            (data) = self.add_application_with_http_info(body, **kwargs)
            return data

    def add_application_with_http_info(self, body, **kwargs):
        """
        Create an application
        Application is a group of tiers. A tier is a group of virtual machines based on membership criteria. Tiers are bound to single application. An application name is unique and should not conflict with another application name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_application_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApplicationRequest body: (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_application`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Application',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_tier(self, id, body, **kwargs):
        """
        Create tier in application
        Create a tier of an application by with specified membership criteria. The membership criteria id defined in terms of virtual machines or ip addresses/subnet. Please refer to API Guide on how to construct membership criteria.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_tier(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param TierRequest body: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_tier_with_http_info(id, body, **kwargs)
        else:
            (data) = self.add_tier_with_http_info(id, body, **kwargs)
            return data

    def add_tier_with_http_info(self, id, body, **kwargs):
        """
        Create tier in application
        Create a tier of an application by with specified membership criteria. The membership criteria id defined in terms of virtual machines or ip addresses/subnet. Please refer to API Guide on how to construct membership criteria.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_tier_with_http_info(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param TierRequest body: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_tier`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_tier`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/tiers', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Tier',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_application(self, id, **kwargs):
        """
        Delete an application
        Deleting an application deletes all the tiers of the application along with the application
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_application(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_application_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_application_with_http_info(id, **kwargs)
            return data

    def delete_application_with_http_info(self, id, **kwargs):
        """
        Delete an application
        Deleting an application deletes all the tiers of the application along with the application
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_application_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_application`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_tier(self, id, tier_id, **kwargs):
        """
        Delete tier
        Delete tier of an application
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_tier(id, tier_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param str tier_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_tier_with_http_info(id, tier_id, **kwargs)
        else:
            (data) = self.delete_tier_with_http_info(id, tier_id, **kwargs)
            return data

    def delete_tier_with_http_info(self, id, tier_id, **kwargs):
        """
        Delete tier
        Delete tier of an application
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_tier_with_http_info(id, tier_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param str tier_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tier_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_tier`")
        # verify the required parameter 'tier_id' is set
        if ('tier_id' not in params) or (params['tier_id'] is None):
            raise ValueError("Missing the required parameter `tier_id` when calling `delete_tier`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'tier_id' in params:
            path_params['tier-id'] = params['tier_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/tiers/{tier-id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edit_application_tier(self, id, tier_id, body, **kwargs):
        """
        Edit tier in application
        Edit a tier of an application with specified membership criteria. The membership criteria id defined in terms of virtual machines or ip addresses/subnet. Please refer to API Guide on how to construct membership criteria.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_application_tier(id, tier_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param str tier_id: (required)
        :param TierRequest body: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edit_application_tier_with_http_info(id, tier_id, body, **kwargs)
        else:
            (data) = self.edit_application_tier_with_http_info(id, tier_id, body, **kwargs)
            return data

    def edit_application_tier_with_http_info(self, id, tier_id, body, **kwargs):
        """
        Edit tier in application
        Edit a tier of an application with specified membership criteria. The membership criteria id defined in terms of virtual machines or ip addresses/subnet. Please refer to API Guide on how to construct membership criteria.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_application_tier_with_http_info(id, tier_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param str tier_id: (required)
        :param TierRequest body: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tier_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `edit_application_tier`")
        # verify the required parameter 'tier_id' is set
        if ('tier_id' not in params) or (params['tier_id'] is None):
            raise ValueError("Missing the required parameter `tier_id` when calling `edit_application_tier`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_tier`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'tier_id' in params:
            path_params['tier-id'] = params['tier_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/tiers/{tier-id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Tier',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_app_flow_metrics(self, id, metrics, **kwargs):
        """
        Get application flow metrics
        Get application flow properties sum of bytes of incoming anf outgoing flows
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_flow_metrics(id, metrics, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param list[AppFlowMetricEnum] metrics: List of metrics to include (required)
        :param float start_time: start time for query in epoch seconds
        :param float end_time: end time for query in epoch seconds
        :return: ApplicationFlowData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_app_flow_metrics_with_http_info(id, metrics, **kwargs)
        else:
            (data) = self.get_app_flow_metrics_with_http_info(id, metrics, **kwargs)
            return data

    def get_app_flow_metrics_with_http_info(self, id, metrics, **kwargs):
        """
        Get application flow metrics
        Get application flow properties sum of bytes of incoming anf outgoing flows
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_flow_metrics_with_http_info(id, metrics, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param list[AppFlowMetricEnum] metrics: List of metrics to include (required)
        :param float start_time: start time for query in epoch seconds
        :param float end_time: end time for query in epoch seconds
        :return: ApplicationFlowData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'metrics', 'start_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_flow_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_app_flow_metrics`")
        # verify the required parameter 'metrics' is set
        if ('metrics' not in params) or (params['metrics'] is None):
            raise ValueError("Missing the required parameter `metrics` when calling `get_app_flow_metrics`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))
        if 'metrics' in params:
            query_params.append(('metrics', params['metrics']))
            collection_formats['metrics'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/flow-metrics', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationFlowData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_app_flow_properties(self, id, props, **kwargs):
        """
        Get application flow properties
        Get application flow properties e.g flow count, count of interent flows etc
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_flow_properties(id, props, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param list[AppFlowPropEnum] props: List of properties to include (required)
        :param float start_time: start time for query in epoch seconds
        :param float end_time: end time for query in epoch seconds
        :return: ApplicationFlowData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_app_flow_properties_with_http_info(id, props, **kwargs)
        else:
            (data) = self.get_app_flow_properties_with_http_info(id, props, **kwargs)
            return data

    def get_app_flow_properties_with_http_info(self, id, props, **kwargs):
        """
        Get application flow properties
        Get application flow properties e.g flow count, count of interent flows etc
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_flow_properties_with_http_info(id, props, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param list[AppFlowPropEnum] props: List of properties to include (required)
        :param float start_time: start time for query in epoch seconds
        :param float end_time: end time for query in epoch seconds
        :return: ApplicationFlowData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'props', 'start_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_flow_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_app_flow_properties`")
        # verify the required parameter 'props' is set
        if ('props' not in params) or (params['props'] is None):
            raise ValueError("Missing the required parameter `props` when calling `get_app_flow_properties`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))
        if 'props' in params:
            query_params.append(('props', params['props']))
            collection_formats['props'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/flow-props', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationFlowData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_app_problems(self, id, **kwargs):
        """
        List Application problems
        List Application problem events.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_problems(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param float size: page size of results
        :param str cursor: cursor from previous response
        :param float start_time: start time for query in epoch seconds
        :param float end_time: end time for query in epoch seconds
        :param str event_type: type of event, e.g UserDefinedProblemEvent
        :param list[str] event_tags: event tags
        :param str event_status: status of event open or closed
        :param float update_time_from: Events that were created or updated or closed between this time and update_time_to, in seconds
        :param float update_time_to: Events that were created or updated or closed between update_time_from and this time, in seconds
        :return: PagedListResponseWithTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_app_problems_with_http_info(id, **kwargs)
        else:
            (data) = self.get_app_problems_with_http_info(id, **kwargs)
            return data

    def get_app_problems_with_http_info(self, id, **kwargs):
        """
        List Application problems
        List Application problem events.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_problems_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param float size: page size of results
        :param str cursor: cursor from previous response
        :param float start_time: start time for query in epoch seconds
        :param float end_time: end time for query in epoch seconds
        :param str event_type: type of event, e.g UserDefinedProblemEvent
        :param list[str] event_tags: event tags
        :param str event_status: status of event open or closed
        :param float update_time_from: Events that were created or updated or closed between this time and update_time_to, in seconds
        :param float update_time_to: Events that were created or updated or closed between update_time_from and this time, in seconds
        :return: PagedListResponseWithTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'size', 'cursor', 'start_time', 'end_time', 'event_type', 'event_tags', 'event_status', 'update_time_from', 'update_time_to']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_problems" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_app_problems`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))
        if 'event_type' in params:
            query_params.append(('event_type', params['event_type']))
        if 'event_tags' in params:
            query_params.append(('event_tags', params['event_tags']))
            collection_formats['event_tags'] = 'multi'
        if 'event_status' in params:
            query_params.append(('event_status', params['event_status']))
        if 'update_time_from' in params:
            query_params.append(('update_time_from', params['update_time_from']))
        if 'update_time_to' in params:
            query_params.append(('update_time_to', params['update_time_to']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/problems', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PagedListResponseWithTime',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_app_top_talking_members(self, id, sort_criteria, **kwargs):
        """
        List Application top talking members
        List Application top talking members based on provided criteria
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_top_talking_members(id, sort_criteria, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param list[TopTalkerSortEnum] sort_criteria: Sorting criteria (required)
        :param float size: page size of results
        :param str cursor: cursor from previous response
        :param float start_time: start time for query in epoch seconds
        :param float end_time: end time for query in epoch seconds
        :return: ApplicationTopTalkingMemberData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_app_top_talking_members_with_http_info(id, sort_criteria, **kwargs)
        else:
            (data) = self.get_app_top_talking_members_with_http_info(id, sort_criteria, **kwargs)
            return data

    def get_app_top_talking_members_with_http_info(self, id, sort_criteria, **kwargs):
        """
        List Application top talking members
        List Application top talking members based on provided criteria
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_top_talking_members_with_http_info(id, sort_criteria, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param list[TopTalkerSortEnum] sort_criteria: Sorting criteria (required)
        :param float size: page size of results
        :param str cursor: cursor from previous response
        :param float start_time: start time for query in epoch seconds
        :param float end_time: end time for query in epoch seconds
        :return: ApplicationTopTalkingMemberData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort_criteria', 'size', 'cursor', 'start_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_top_talking_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_app_top_talking_members`")
        # verify the required parameter 'sort_criteria' is set
        if ('sort_criteria' not in params) or (params['sort_criteria'] is None):
            raise ValueError("Missing the required parameter `sort_criteria` when calling `get_app_top_talking_members`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))
        if 'sort_criteria' in params:
            query_params.append(('sort_criteria', params['sort_criteria']))
            collection_formats['sort_criteria'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/top-talking-member', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationTopTalkingMemberData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_app_top_talking_pairs(self, id, sort_criteria, **kwargs):
        """
        List Application top talking pairs
        List Application top talking pairs based on provided criteria
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_top_talking_pairs(id, sort_criteria, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param list[TopTalkerSortEnum] sort_criteria: Sorting criteria (required)
        :param float size: page size of results
        :param str cursor: cursor from previous response
        :param float start_time: start time for query in epoch seconds
        :param float end_time: end time for query in epoch seconds
        :return: ApplicationTopTalkingPairData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_app_top_talking_pairs_with_http_info(id, sort_criteria, **kwargs)
        else:
            (data) = self.get_app_top_talking_pairs_with_http_info(id, sort_criteria, **kwargs)
            return data

    def get_app_top_talking_pairs_with_http_info(self, id, sort_criteria, **kwargs):
        """
        List Application top talking pairs
        List Application top talking pairs based on provided criteria
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_top_talking_pairs_with_http_info(id, sort_criteria, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param list[TopTalkerSortEnum] sort_criteria: Sorting criteria (required)
        :param float size: page size of results
        :param str cursor: cursor from previous response
        :param float start_time: start time for query in epoch seconds
        :param float end_time: end time for query in epoch seconds
        :return: ApplicationTopTalkingPairData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort_criteria', 'size', 'cursor', 'start_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_top_talking_pairs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_app_top_talking_pairs`")
        # verify the required parameter 'sort_criteria' is set
        if ('sort_criteria' not in params) or (params['sort_criteria'] is None):
            raise ValueError("Missing the required parameter `sort_criteria` when calling `get_app_top_talking_pairs`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))
        if 'sort_criteria' in params:
            query_params.append(('sort_criteria', params['sort_criteria']))
            collection_formats['sort_criteria'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/top-talking-pair', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationTopTalkingPairData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_application(self, id, **kwargs):
        """
        Show application details
        Show application details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_application_with_http_info(id, **kwargs)
        else:
            (data) = self.get_application_with_http_info(id, **kwargs)
            return data

    def get_application_with_http_info(self, id, **kwargs):
        """
        Show application details
        Show application details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_application`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Application',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_application_flow_summary(self, id, **kwargs):
        """
        Show application flow summary
        Show application details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_flow_summary(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param float start_time: start time for query in epoch seconds
        :param float end_time: end time for query in epoch seconds
        :return: ApplicationFlowSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_application_flow_summary_with_http_info(id, **kwargs)
        else:
            (data) = self.get_application_flow_summary_with_http_info(id, **kwargs)
            return data

    def get_application_flow_summary_with_http_info(self, id, **kwargs):
        """
        Show application flow summary
        Show application details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_flow_summary_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param float start_time: start time for query in epoch seconds
        :param float end_time: end time for query in epoch seconds
        :return: ApplicationFlowSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_flow_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_application_flow_summary`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/flow-summary', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationFlowSummary',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_application_tier(self, id, tier_id, **kwargs):
        """
        Show tier details
        Show tier details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_tier(id, tier_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param str tier_id: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_application_tier_with_http_info(id, tier_id, **kwargs)
        else:
            (data) = self.get_application_tier_with_http_info(id, tier_id, **kwargs)
            return data

    def get_application_tier_with_http_info(self, id, tier_id, **kwargs):
        """
        Show tier details
        Show tier details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_tier_with_http_info(id, tier_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :param str tier_id: (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tier_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_application_tier`")
        # verify the required parameter 'tier_id' is set
        if ('tier_id' not in params) or (params['tier_id'] is None):
            raise ValueError("Missing the required parameter `tier_id` when calling `get_application_tier`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'tier_id' in params:
            path_params['tier-id'] = params['tier_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/tiers/{tier-id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Tier',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_application_vms(self, id, **kwargs):
        """
        Show application members
        Show application members
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_vms(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :return: ApplicationMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_application_vms_with_http_info(id, **kwargs)
        else:
            (data) = self.get_application_vms_with_http_info(id, **kwargs)
            return data

    def get_application_vms_with_http_info(self, id, **kwargs):
        """
        Show application members
        Show application members
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_vms_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :return: ApplicationMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_vms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_application_vms`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/members/vms', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationMembers',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_applications_members(self, body, **kwargs):
        """
        Get member details of applications
        Get member details of applications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_applications_members(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupsMembersRequest body: (required)
        :return: ApplicationsMembersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_applications_members_with_http_info(body, **kwargs)
        else:
            (data) = self.get_applications_members_with_http_info(body, **kwargs)
            return data

    def get_applications_members_with_http_info(self, body, **kwargs):
        """
        Get member details of applications
        Get member details of applications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_applications_members_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupsMembersRequest body: (required)
        :return: ApplicationsMembersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_applications_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_applications_members`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/members', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationsMembersResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tier(self, tier_id, authorization, **kwargs):
        """
        Show tier details
        Show tier details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tier(tier_id, authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tier_id: (required)
        :param str authorization: Authorization Header (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tier_with_http_info(tier_id, authorization, **kwargs)
        else:
            (data) = self.get_tier_with_http_info(tier_id, authorization, **kwargs)
            return data

    def get_tier_with_http_info(self, tier_id, authorization, **kwargs):
        """
        Show tier details
        Show tier details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tier_with_http_info(tier_id, authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tier_id: (required)
        :param str authorization: Authorization Header (required)
        :return: Tier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tier_id', 'authorization']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tier_id' is set
        if ('tier_id' not in params) or (params['tier_id'] is None):
            raise ValueError("Missing the required parameter `tier_id` when calling `get_tier`")
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_tier`")


        collection_formats = {}

        path_params = {}
        if 'tier_id' in params:
            path_params['tier-id'] = params['tier_id']

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/tiers/{tier-id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Tier',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tiers_members(self, body, **kwargs):
        """
        Get member details of tiers
        Get member details of tiers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tiers_members(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupsMembersRequest body: (required)
        :return: TiersMembersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tiers_members_with_http_info(body, **kwargs)
        else:
            (data) = self.get_tiers_members_with_http_info(body, **kwargs)
            return data

    def get_tiers_members_with_http_info(self, body, **kwargs):
        """
        Get member details of tiers
        Get member details of tiers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tiers_members_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupsMembersRequest body: (required)
        :return: TiersMembersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tiers_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_tiers_members`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/tiers/members', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TiersMembersResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_application_tiers(self, id, **kwargs):
        """
        List tiers of an application
        List tiers of an application
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_application_tiers(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :return: TierListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_application_tiers_with_http_info(id, **kwargs)
        else:
            (data) = self.list_application_tiers_with_http_info(id, **kwargs)
            return data

    def list_application_tiers_with_http_info(self, id, **kwargs):
        """
        List tiers of an application
        List tiers of an application
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_application_tiers_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: entity id (required)
        :return: TierListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_application_tiers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_application_tiers`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/{id}/tiers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TierListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_applications(self, **kwargs):
        """
        List applications
        List applications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_applications(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float size: page size of results
        :param str cursor: cursor from previous response
        :param float modified_after: timestamp after which apps has been modified
        :return: PagedListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_applications_with_http_info(**kwargs)
        else:
            (data) = self.list_applications_with_http_info(**kwargs)
            return data

    def list_applications_with_http_info(self, **kwargs):
        """
        List applications
        List applications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_applications_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float size: page size of results
        :param str cursor: cursor from previous response
        :param float modified_after: timestamp after which apps has been modified
        :return: PagedListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['size', 'cursor', 'modified_after']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_applications" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))
        if 'modified_after' in params:
            query_params.append(('modifiedAfter', params['modified_after']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PagedListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_applications_details(self, **kwargs):
        """
        Get application details bulk
        Get application details bulk
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_applications_details(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float size: page size of results
        :param str cursor: cursor from previous response
        :param float modified_after: timestamp after which apps has been modified
        :return: PagedApplicationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_applications_details_with_http_info(**kwargs)
        else:
            (data) = self.list_applications_details_with_http_info(**kwargs)
            return data

    def list_applications_details_with_http_info(self, **kwargs):
        """
        Get application details bulk
        Get application details bulk
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_applications_details_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float size: page size of results
        :param str cursor: cursor from previous response
        :param float modified_after: timestamp after which apps has been modified
        :return: PagedApplicationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['size', 'cursor', 'modified_after']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_applications_details" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))
        if 'modified_after' in params:
            query_params.append(('modifiedAfter', params['modified_after']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/groups/applications/fetch', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PagedApplicationListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
