# coding: utf-8

"""
    vRealize Network Insight API Reference

    vRealize Network Insight API Reference

    OpenAPI spec version: 1.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IpTag(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag_id': 'str',
        'subnets': 'list[str]',
        'ip_address_ranges': 'list[IpAddressRange]'
    }

    attribute_map = {
        'tag_id': 'tag_id',
        'subnets': 'subnets',
        'ip_address_ranges': 'ip_address_ranges'
    }

    def __init__(self, tag_id=None, subnets=None, ip_address_ranges=None):
        """
        IpTag - a model defined in Swagger
        """

        self._tag_id = None
        self._subnets = None
        self._ip_address_ranges = None

        if tag_id is not None:
          self.tag_id = tag_id
        if subnets is not None:
          self.subnets = subnets
        if ip_address_ranges is not None:
          self.ip_address_ranges = ip_address_ranges

    @property
    def tag_id(self):
        """
        Gets the tag_id of this IpTag.

        :return: The tag_id of this IpTag.
        :rtype: str
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """
        Sets the tag_id of this IpTag.

        :param tag_id: The tag_id of this IpTag.
        :type: str
        """

        self._tag_id = tag_id

    @property
    def subnets(self):
        """
        Gets the subnets of this IpTag.

        :return: The subnets of this IpTag.
        :rtype: list[str]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """
        Sets the subnets of this IpTag.

        :param subnets: The subnets of this IpTag.
        :type: list[str]
        """

        self._subnets = subnets

    @property
    def ip_address_ranges(self):
        """
        Gets the ip_address_ranges of this IpTag.

        :return: The ip_address_ranges of this IpTag.
        :rtype: list[IpAddressRange]
        """
        return self._ip_address_ranges

    @ip_address_ranges.setter
    def ip_address_ranges(self, ip_address_ranges):
        """
        Sets the ip_address_ranges of this IpTag.

        :param ip_address_ranges: The ip_address_ranges of this IpTag.
        :type: list[IpAddressRange]
        """

        self._ip_address_ranges = ip_address_ranges

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IpTag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
