# coding: utf-8

"""
    vRealize Network Insight API Reference

    vRealize Network Insight API Reference

    OpenAPI spec version: 1.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GroupWithValue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket': 'list[BucketValue]',
        'count': 'int',
        'aggregations': 'list[AggregationWithValue]'
    }

    attribute_map = {
        'bucket': 'bucket',
        'count': 'count',
        'aggregations': 'aggregations'
    }

    def __init__(self, bucket=None, count=None, aggregations=None):
        """
        GroupWithValue - a model defined in Swagger
        """

        self._bucket = None
        self._count = None
        self._aggregations = None

        if bucket is not None:
          self.bucket = bucket
        if count is not None:
          self.count = count
        if aggregations is not None:
          self.aggregations = aggregations

    @property
    def bucket(self):
        """
        Gets the bucket of this GroupWithValue.

        :return: The bucket of this GroupWithValue.
        :rtype: list[BucketValue]
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """
        Sets the bucket of this GroupWithValue.

        :param bucket: The bucket of this GroupWithValue.
        :type: list[BucketValue]
        """

        self._bucket = bucket

    @property
    def count(self):
        """
        Gets the count of this GroupWithValue.
        count of entity in group

        :return: The count of this GroupWithValue.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this GroupWithValue.
        count of entity in group

        :param count: The count of this GroupWithValue.
        :type: int
        """

        self._count = count

    @property
    def aggregations(self):
        """
        Gets the aggregations of this GroupWithValue.

        :return: The aggregations of this GroupWithValue.
        :rtype: list[AggregationWithValue]
        """
        return self._aggregations

    @aggregations.setter
    def aggregations(self, aggregations):
        """
        Sets the aggregations of this GroupWithValue.

        :param aggregations: The aggregations of this GroupWithValue.
        :type: list[AggregationWithValue]
        """

        self._aggregations = aggregations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GroupWithValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
