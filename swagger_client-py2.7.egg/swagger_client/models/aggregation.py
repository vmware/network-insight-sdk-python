# coding: utf-8

"""
    vRealize Network Insight API Reference

    vRealize Network Insight API Reference

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Aggregation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'aggregation_type': 'str'
    }

    attribute_map = {
        'field': 'field',
        'aggregation_type': 'aggregation_type'
    }

    def __init__(self, field=None, aggregation_type=None):
        """
        Aggregation - a model defined in Swagger
        """

        self._field = None
        self._aggregation_type = None

        if field is not None:
          self.field = field
        if aggregation_type is not None:
          self.aggregation_type = aggregation_type

    @property
    def field(self):
        """
        Gets the field of this Aggregation.

        :return: The field of this Aggregation.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """
        Sets the field of this Aggregation.

        :param field: The field of this Aggregation.
        :type: str
        """

        self._field = field

    @property
    def aggregation_type(self):
        """
        Gets the aggregation_type of this Aggregation.

        :return: The aggregation_type of this Aggregation.
        :rtype: str
        """
        return self._aggregation_type

    @aggregation_type.setter
    def aggregation_type(self, aggregation_type):
        """
        Sets the aggregation_type of this Aggregation.

        :param aggregation_type: The aggregation_type of this Aggregation.
        :type: str
        """
        allowed_values = ["SUM", "MIN", "MAX", "AVG"]
        if aggregation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_type` ({0}), must be one of {1}"
                .format(aggregation_type, allowed_values)
            )

        self._aggregation_type = aggregation_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Aggregation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
