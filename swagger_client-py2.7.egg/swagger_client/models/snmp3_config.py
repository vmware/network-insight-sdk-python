# coding: utf-8

"""
    vRealize Network Insight API Reference

    vRealize Network Insight API Reference

    OpenAPI spec version: 1.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SNMP3Config(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'context_name': 'str',
        'authentication_type': 'str',
        'authentication_password': 'str',
        'privacy_type': 'str',
        'privacy_password': 'str'
    }

    attribute_map = {
        'username': 'username',
        'context_name': 'context_name',
        'authentication_type': 'authentication_type',
        'authentication_password': 'authentication_password',
        'privacy_type': 'privacy_type',
        'privacy_password': 'privacy_password'
    }

    def __init__(self, username=None, context_name=None, authentication_type=None, authentication_password=None, privacy_type=None, privacy_password=None):
        """
        SNMP3Config - a model defined in Swagger
        """

        self._username = None
        self._context_name = None
        self._authentication_type = None
        self._authentication_password = None
        self._privacy_type = None
        self._privacy_password = None

        if username is not None:
          self.username = username
        if context_name is not None:
          self.context_name = context_name
        if authentication_type is not None:
          self.authentication_type = authentication_type
        if authentication_password is not None:
          self.authentication_password = authentication_password
        if privacy_type is not None:
          self.privacy_type = privacy_type
        if privacy_password is not None:
          self.privacy_password = privacy_password

    @property
    def username(self):
        """
        Gets the username of this SNMP3Config.

        :return: The username of this SNMP3Config.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this SNMP3Config.

        :param username: The username of this SNMP3Config.
        :type: str
        """

        self._username = username

    @property
    def context_name(self):
        """
        Gets the context_name of this SNMP3Config.

        :return: The context_name of this SNMP3Config.
        :rtype: str
        """
        return self._context_name

    @context_name.setter
    def context_name(self, context_name):
        """
        Sets the context_name of this SNMP3Config.

        :param context_name: The context_name of this SNMP3Config.
        :type: str
        """

        self._context_name = context_name

    @property
    def authentication_type(self):
        """
        Gets the authentication_type of this SNMP3Config.

        :return: The authentication_type of this SNMP3Config.
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """
        Sets the authentication_type of this SNMP3Config.

        :param authentication_type: The authentication_type of this SNMP3Config.
        :type: str
        """
        allowed_values = ["NO_AUTH", "MD5", "SHA"]
        if authentication_type not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_type` ({0}), must be one of {1}"
                .format(authentication_type, allowed_values)
            )

        self._authentication_type = authentication_type

    @property
    def authentication_password(self):
        """
        Gets the authentication_password of this SNMP3Config.

        :return: The authentication_password of this SNMP3Config.
        :rtype: str
        """
        return self._authentication_password

    @authentication_password.setter
    def authentication_password(self, authentication_password):
        """
        Sets the authentication_password of this SNMP3Config.

        :param authentication_password: The authentication_password of this SNMP3Config.
        :type: str
        """

        self._authentication_password = authentication_password

    @property
    def privacy_type(self):
        """
        Gets the privacy_type of this SNMP3Config.

        :return: The privacy_type of this SNMP3Config.
        :rtype: str
        """
        return self._privacy_type

    @privacy_type.setter
    def privacy_type(self, privacy_type):
        """
        Sets the privacy_type of this SNMP3Config.

        :param privacy_type: The privacy_type of this SNMP3Config.
        :type: str
        """
        allowed_values = ["AES", "DES", "AES128", "AES192", "AES256", "3DES", "NO_PRIV"]
        if privacy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `privacy_type` ({0}), must be one of {1}"
                .format(privacy_type, allowed_values)
            )

        self._privacy_type = privacy_type

    @property
    def privacy_password(self):
        """
        Gets the privacy_password of this SNMP3Config.

        :return: The privacy_password of this SNMP3Config.
        :rtype: str
        """
        return self._privacy_password

    @privacy_password.setter
    def privacy_password(self, privacy_password):
        """
        Sets the privacy_password of this SNMP3Config.

        :param privacy_password: The privacy_password of this SNMP3Config.
        :type: str
        """

        self._privacy_password = privacy_password

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SNMP3Config):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
