# coding: utf-8

"""
    vRealize Network Insight API Reference

    vRealize Network Insight API Reference

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Vmknic(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'name': 'str',
        'entity_type': 'EntityType',
        'ip_addresses': 'list[IpV4Address]',
        'vlan': 'Vlan',
        'host': 'Reference',
        'layer2_network': 'Reference'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'name': 'name',
        'entity_type': 'entity_type',
        'ip_addresses': 'ip_addresses',
        'vlan': 'vlan',
        'host': 'host',
        'layer2_network': 'layer2_network'
    }

    def __init__(self, entity_id=None, name=None, entity_type=None, ip_addresses=None, vlan=None, host=None, layer2_network=None):
        """
        Vmknic - a model defined in Swagger
        """

        self._entity_id = None
        self._name = None
        self._entity_type = None
        self._ip_addresses = None
        self._vlan = None
        self._host = None
        self._layer2_network = None

        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if entity_type is not None:
          self.entity_type = entity_type
        if ip_addresses is not None:
          self.ip_addresses = ip_addresses
        if vlan is not None:
          self.vlan = vlan
        if host is not None:
          self.host = host
        if layer2_network is not None:
          self.layer2_network = layer2_network

    @property
    def entity_id(self):
        """
        Gets the entity_id of this Vmknic.

        :return: The entity_id of this Vmknic.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this Vmknic.

        :param entity_id: The entity_id of this Vmknic.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this Vmknic.

        :return: The name of this Vmknic.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Vmknic.

        :param name: The name of this Vmknic.
        :type: str
        """

        self._name = name

    @property
    def entity_type(self):
        """
        Gets the entity_type of this Vmknic.

        :return: The entity_type of this Vmknic.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this Vmknic.

        :param entity_type: The entity_type of this Vmknic.
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def ip_addresses(self):
        """
        Gets the ip_addresses of this Vmknic.

        :return: The ip_addresses of this Vmknic.
        :rtype: list[IpV4Address]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """
        Sets the ip_addresses of this Vmknic.

        :param ip_addresses: The ip_addresses of this Vmknic.
        :type: list[IpV4Address]
        """

        self._ip_addresses = ip_addresses

    @property
    def vlan(self):
        """
        Gets the vlan of this Vmknic.

        :return: The vlan of this Vmknic.
        :rtype: Vlan
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """
        Sets the vlan of this Vmknic.

        :param vlan: The vlan of this Vmknic.
        :type: Vlan
        """

        self._vlan = vlan

    @property
    def host(self):
        """
        Gets the host of this Vmknic.

        :return: The host of this Vmknic.
        :rtype: Reference
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this Vmknic.

        :param host: The host of this Vmknic.
        :type: Reference
        """

        self._host = host

    @property
    def layer2_network(self):
        """
        Gets the layer2_network of this Vmknic.

        :return: The layer2_network of this Vmknic.
        :rtype: Reference
        """
        return self._layer2_network

    @layer2_network.setter
    def layer2_network(self, layer2_network):
        """
        Sets the layer2_network of this Vmknic.

        :param layer2_network: The layer2_network of this Vmknic.
        :type: Reference
        """

        self._layer2_network = layer2_network

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Vmknic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
